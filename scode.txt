`backend/.env`

```
# ----------------------------------
# SERVER CONFIGURATION
# ----------------------------------
PORT=3001

# ----------------------------------
# SECURITY
# ----------------------------------
# Generate a new random string from https://www.uuidgenerator.net/ and paste it here
JWT_SECRET="eb4db4a414678902613083784a04ec9de45570856d8ced1dbe6fdd4a545ff715"

# ----------------------------------
# DATABASE (CONNECTION POOLER)
# ----------------------------------
# Replace the ENTIRE line below with your Connection Pooler URI from Supabase
DATABASE_URL="postgresql://postgres.fapoilusnezdvfmbbxzr:RP6eThZoJhsCrxcH@aws-1-ap-south-1.pooler.supabase.com:6543/postgres"

# ----------------------------------
# THIRD-PARTY APIs
# ----------------------------------
# Paste your Gemini API key from Google AI Studio
GEMINI_API_KEY="AIzaSyCn1xTJRYjOH_Gl3hg5sOW0P9PUX2Ug76M"

# For the local Python service
ML_SERVICE_URL="http://localhost:8000"

# ----------------------------------
# WHATSAPP (FROM YOUR META APP)
# ----------------------------------
# # Paste your own credentials from your Meta for Developers App
# WHATSAPP_TOKEN="EAAY5A1aZB96obPX23B4JYBOvCLcGmQZBYUa5KCkZD"
# WHATSAPP_PHONE_NUMBER_ID="72954882"
# WHATSAPP_APP_SECRET="e9422b0185dc6"
# WHATSAPP_VERIFY_TOKEN="inquilab_bloodai-123-2025-hackathon"
# IMPORTANT: You MUST refresh this token from the Meta dashboard
WHATSAPP_TOKEN=EAAKgGM4v4XIBPZAWub733l9jxOBKl8XjdBzb88mS92kSY5OG0pmnmVFOOKAjhwK62PCJL0APqKkfNC3sRiAM5yCr2GXiturGhb60f4y4EhhAcjFQX7XrMLFjEofCOrCbFMpxXdED2b4uYAZCHZA5ZANsW9rLgswrtZBPVVhVVuIgI3WKjjJztL4PktUh3hy6gi4DXRz7YPCc5ipF8FbrQOghv6otlyrOtkVjQPkhPCMhiGX4ZD
WHATSAPP_PHONE_NUMBER_ID=767647326428922
WHATSAPP_BUSINESS_ACCOUNT_ID=761863289795347
WHATSAPP_APP_SECRET=a95b9edb36567664fbf7c9779e154021
WHATSAPP_VERIFY_TOKEN=bloodbridge-hackathon-2025-secret

# ----------------------------------
# DEMO & ADMIN
# ----------------------------------
ADMIN_DEMO_PHONE="+918000000000"
DEMO_VERIFIED_PHONE_NUMBERS="+917075899966"

```

`backend/server.js`

```javascript
// // backend/server.js

// // Import required dependencies
// import express from 'express'; // Express framework for building the server
// import cors from 'cors'; // Middleware for enabling CORS
// import morgan from 'morgan'; // Middleware for request logging
// import config from './src/config/config.js'; // Configuration settings
// import adminRoutes from './src/routes/adminRoutes.js'; // Admin dashboard routes
// import { verifyWebhook } from './src/middleware/verifyWebhook.js'; // Webhook signature verification
// import webhookController from './src/controllers/webhookController.js'; // Webhook handling controller
// import BridgeCoordinationService from './src/services/bridgeCoordinationService.js';

// // --- PHASE 1: PREDICTIVE ENGAGEMENT ---
// import cron from 'node-cron'; // Import the cron scheduler library
// import EngagementService from './src/services/engagementService.js'; // Import our new engagement service
// // --- END PHASE 1 ---

// // Initialize Express app
// const app = express();
// const PORT = process.env.PORT || 3001; // Use environment PORT or default to 3001

// // Middleware setup
// app.use(cors()); // Enable CORS for all routes
// app.use(morgan('tiny')); // Log HTTP requests in 'tiny' format

// // API and Health Routes
// app.get('/health', (req, res) => {
//   // Health check endpoint to verify server status
//   res.status(200).json({ status: 'healthy', now: new Date().toISOString() });
// });

// // Admin routes with JSON body parser
// app.use('/api/admin', express.json({ limit: '1mb' }), adminRoutes);

// // Webhook Routes
// app.get('/webhook', webhookController.verifyToken); // Handle Meta webhook verification (GET)

// app.post(
//   '/webhook',
//   express.json({
//     verify: (req, res, buf) => {
// req.rawBody = buf.toString();     }
//   }),
//   verifyWebhook, // This middleware will now use req.rawBody
//   webhookController.handleMessage // This controller will use the parsed req.body
// );

// // Global Error Handling
// app.use((err, req, res, next) => {
//   // Handle errors from middleware or routes
//   console.error('[ERROR HANDLER]', err.stack);
//   res.status(500).json({ message: 'An internal server error occurred.' });
// });

// // Handle unhandled promise rejections
// process.on('unhandledRejection', (reason) => {
//   console.error('Unhandled Rejection:', reason);
// });

// // Handle uncaught exceptions
// process.on('uncaughtException', (err) => {
//   console.error('Uncaught Exception:', err);
// });


// // --- PHASE 1: PREDICTIVE ENGAGEMENT SCHEDULER ---
// // This task is scheduled to run at 9:00 AM every day in the Asia/Kolkata timezone.
// // It will automatically find donors who are now eligible to donate again and send them a reminder.
// console.log('🕒 Cron job for eligibility reminders scheduled to run every day at 9:00 AM.');
// cron.schedule('0 9 * * *', () => {
//   console.log('⏰ It is 9:00 AM. Triggering the eligibility reminder cron job...');
//   // We create a new instance to ensure it's a fresh run
//   const engagementService = new EngagementService();
//   engagementService.sendEligibilityReminders();
// }, {
//   scheduled: true,
//   timezone: "Asia/Kolkata" // IMPORTANT: Set to your target timezone
// });

// console.log('🕒 Cron job for automatic bridge requests scheduled to run every day at 8:00 AM.');
// cron.schedule('0 8 * * *', () => {
//   console.log('⏰ It is 8:00 AM. Triggering automatic bridge requests...');
//   const bridgeService = new BridgeCoordinationService();
//   bridgeService.triggerAutomaticBridgeRequests();
// }, {
//   scheduled: true,
//   timezone: "Asia/Kolkata"
// });

// // '0 10 * * 0' means at minute 0, hour 10, on day-of-week 0 (Sunday).
// console.log('🕒 Cron job for inactive donor nudges scheduled to run every Sunday at 10:00 AM.');
// cron.schedule('0 10 * * 0', () => {
//     console.log('⏰ It is Sunday 10:00 AM. Triggering inactive donor nudge...');
//     const engagementService = new EngagementService();
//     engagementService.sendInactiveDonorNudges();
// }, {
//     scheduled: true,
//     timezone: "Asia/Kolkata"
// });
// // --- END PHASE 1 ---


// // Start the server
// app.listen(PORT, () => {
//   console.log(`✅ BloodBridge AI backend is running on port ${PORT}`);
// });


// backend/server.js

import express from 'express';
import cors from 'cors';
import morgan from 'morgan';
import apiRoutes from './src/routes/index.js'; // <-- IMPORT THE SINGLE UNIFIED ROUTER
import { verifyWebhook } from './src/middleware/verifyWebhook.js';
import webhookController from './src/controllers/webhookController.js';
import cron from 'node-cron';
import EngagementService from './src/services/engagementService.js';
import BridgeCoordinationService from './src/services/bridgeCoordinationService.js';

const app = express();
const PORT = process.env.PORT || 3001;

app.use(cors());
app.use(morgan('tiny'));
app.use(express.json({ limit: '1mb' }));

// --- API ROUTES ---
app.get('/health', (req, res) => res.status(200).json({ status: 'healthy' }));

// Mount the single unified router on the /api base path
app.use('/api', apiRoutes); // <-- USE THE SINGLE ROUTER

// --- WHATSAPP WEBHOOK ---
app.get('/webhook', webhookController.verifyToken);
app.post('/webhook', express.json({ verify: (req, res, buf) => { req.rawBody = buf.toString(); } }), verifyWebhook, webhookController.handleMessage);

// --- ERROR HANDLING & CRON JOBS ---
app.use((err, req, res, next) => { console.error('[ERROR HANDLER]', err.stack); res.status(500).json({ message: 'An internal server error occurred.' }); });
process.on('unhandledRejection', (reason) => { console.error('Unhandled Rejection:', reason); });
process.on('uncaughtException', (err) => { console.error('Uncaught Exception:', err); });
cron.schedule('0 9 * * *', () => new EngagementService().sendEligibilityReminders(), { scheduled: true, timezone: "Asia/Kolkata" });
cron.schedule('0 8 * * *', () => new BridgeCoordinationService().triggerAutomaticBridgeRequests(), { scheduled: true, timezone: "Asia/Kolkata" });
cron.schedule('0 10 * * 0', () => new EngagementService().sendInactiveDonorNudges(), { scheduled: true, timezone: "Asia/Kolkata" });

app.listen(PORT, () => console.log(`✅ BloodBridge AI backend is running on port ${PORT}`));

```

`backend/src/config/config.js`

```javascript
// backend/src/config/config.js
import 'dotenv/config'; // Loads variables from .env into process.env

// This object maps environment variables to a clean, accessible config object.
const config = {
    port: process.env.PORT,
    jwtSecret: process.env.JWT_SECRET,
    databaseUrl: process.env.DATABASE_URL,
    geminiApiKey: process.env.GEMINI_API_KEY,
    mlServiceUrl: process.env.ML_SERVICE_URL,
    whatsappToken: process.env.WHATSAPP_TOKEN,
    whatsappPhoneNumberId: process.env.WHATSAPP_PHONE_NUMBER_ID,
    whatsappAppSecret: process.env.WHATSAPP_APP_SECRET,
    whatsappVerifyToken: process.env.WHATSAPP_VERIFY_TOKEN,
    adminDemoPhone: process.env.ADMIN_DEMO_PHONE,
    demoVerifiedPhoneNumbers: process.env.DEMO_VERIFIED_PHONE_NUMBERS
};

// This validation step ensures the application fails fast if critical secrets are missing.
// It's a crucial security and stability feature.
const requiredConfig = ['port', 'jwtSecret', 'databaseUrl'];
const missingConfig = requiredConfig.filter(key => !config[key]);

if (missingConfig.length > 0) {
    console.error(`🔴 FATAL ERROR: Missing required environment variables: ${missingConfig.join(', ')}`);
    // Exit the application with an error code.
    process.exit(1);
}

export default config;

```

`backend/src/config/db.js`

```javascript
// backend/src/config/db.js
import { Pool } from 'pg';
import config from './config.js';

/**
 * Creates a new connection pool.
 * The pool manages multiple client connections to the database,
 * reusing them to improve performance and stability.
 */
const pool = new Pool({
  connectionString: config.databaseUrl,
});

/**
 * A helper function to execute a simple query.
 * @param {string} text - The SQL query string.
 * @param {Array} params - The parameters to pass to the query.
 * @returns {Promise<QueryResult>} The result from the database.
 */
const query = (text, params) => pool.query(text, params);

// We export the entire pool so we can use it for transactions later,
// and the query function for convenience.
const db = {
  query,
  pool,
};

export default db;

```

`backend/src/controllers/adminController.js`

```javascript
// // backend/src/controllers/adminController.js
// import jwt from 'jsonwebtoken';
// import config from '../config/config.js';
// import db from '../config/db.js';
// import bridgeService from '../services/bridgeService.js';
// import bridgeCoordinationService from '../services/bridgeCoordinationService.js'; 
// import emergencyService from '../services/emergencyService.js';

// /**
//  * Admin Login
//  */
// export const login = async (req, res) => {
//   const { phone, password } = req.body;
//   if (!phone || !password) {
//     return res.status(400).json({ message: 'Phone and password are required' });
//   }
//   try {
//     // Demo admin login (for prototype)
//     if (phone === config.adminDemoPhone && password === 'admin123') {
//       const token = jwt.sign({ phone, role: 'Admin' }, config.jwtSecret, { expiresIn: '8h' });
//       console.log(`Login successful for demo admin: ${phone}`);
//       return res.json({ token });
//     }
//     // In a real app, you would have hashed password validation here
//     const { rows } = await db.query(
//       'SELECT * FROM users WHERE phone = $1 AND role = $2',
//       [phone, 'Admin']
//     );
//     if (rows.length === 0 || rows[0].password !== password) {
//       console.warn('Login failed for phone:', phone);
//       return res.status(401).json({ message: 'Invalid credentials' });
//     }
//     const token = jwt.sign({ phone, role: 'Admin' }, config.jwtSecret, { expiresIn: '8h' });
//     console.log(`Login successful for user: ${phone}`);
//     return res.json({ token });

//   } catch (err) {
//     console.error('Login error:', { error: err.message, phone });
//     return res.status(500).json({ message: 'Server error during login' });
//   }
// };

// /**
//  * Create a Blood Bridge for a Patient
//  */
// export const createBridgeForPatient = async (req, res) => {
//   const { patientId } = req.params;
//   try {
//     const { rows: [patient] } = await db.query(
//       'SELECT * FROM patients WHERE id = $1',
//       [patientId]
//     );

//     if (!patient) {
//       return res.status(404).json({ message: 'Patient not found' });
//     }
//     if (patient.status === 'bridged') {
//       return res.status(400).json({ message: 'Patient already has a bridge.' });
//     }

//     const { rows: [bridge] } = await db.query(
//       'INSERT INTO blood_bridges (patient_id, name, blood_group, city) VALUES ($1, $2, $3, $4) RETURNING id',
//       [patient.id, `${patient.name}'s Bridge`, patient.blood_group, patient.city]
//     );

//     const result = await bridgeService.populateNewBridge(
//       bridge.id,
//       patient.city,
//       patient.blood_group,
//       patient.pincode
//     );

//     await db.query(
//       "UPDATE patients SET status = 'bridged' WHERE id = $1",
//       [patientId]
//     );
//     console.log(`ADMIN ACTION: Created and populated Bridge ${bridge.id} with ${result.count} members.`);
//     res.json({
//       success: true,
//       message: `Blood Bridge created and populated with ${result.count} top donors.`
//     });
//   } catch (error) {
//     console.error('Error creating bridge for patient:', error);
//     await db.query( "UPDATE patients SET status = 'pending_verification' WHERE id = $1", [patientId]);
//     res.status(500).json({ error: 'Failed to create and populate bridge.' });
//   }
// };

// /**
//  * Close Emergency Request
//  */
// export const closeEmergency = async (req, res) => {
//   const { requestId } = req.params;
//   try {
//     const { rowCount } = await db.query(
//       "UPDATE emergency_requests SET status = 'closed' WHERE id = $1 AND status = 'active'",
//       [requestId]
//     );
//     if (rowCount === 0) {
//       return res.status(404).json({ message: "Active request not found or already closed."})
//     }
//     console.log(`ADMIN ACTION: Closed emergency request ${requestId}`);
//     res.json({ success: true, message: 'Request successfully closed.' });
//   } catch (error) {
//     console.error(`Error closing emergency ${requestId}:`, error);
//     res.status(500).json({ error: 'Failed to close request.' });
//   }
// };

// /**
//  * Triggers a transfusion request for a patient in a Blood Bridge.requestBridgeTransfusion
//  */
// export const requestBridgeTransfusion = async (req, res) => {
//   const { bridgeId } = req.params;
//   try {
//     // Use the imported instance directly
//     const result = await bridgeCoordinationService.requestTransfusion(bridgeId);
//   // --- END OF FIX ---
//     console.log(`ADMIN ACTION: Triggered transfusion request for bridge ${bridgeId}`);
//     res.json(result);
//   } catch (error) {
//     console.error(`Error requesting bridge transfusion for ${bridgeId}:`, error);
//     res.status(500).json({ error: error.message || 'Failed to send bridge request.' });
//   }
// };

// /**
//  * Fetches the four main statistics for the StatCards on the dashboard.
//  */
// export const getDashboardStats = async (req, res) => {
//   try {
//     const [
//       { rows: [totalDonors] },
//       { rows: [activeDonors] },
//       { rows: [pendingPatients] },
//       { rows: [atRisk] }
//     ] = await Promise.all([
//       db.query("SELECT COUNT(*) as count FROM users WHERE user_type = 'donor'"),
//       db.query("SELECT COUNT(*) as count FROM users WHERE user_type = 'donor' AND availability_status = 'available'"),
//       db.query("SELECT COUNT(*) as count FROM patients WHERE status = 'pending_verification'"),
//       db.query("SELECT COUNT(*) as count FROM emergency_requests WHERE status = 'active'")
//     ]);
    
//     res.json({
//       total_donors: parseInt(totalDonors.count, 10),
//       active_donors: parseInt(activeDonors.count, 10),
//       pending_patients: parseInt(pendingPatients.count, 10),
//       patients_at_risk: parseInt(atRisk.count, 10),
//     });
//   } catch (error) {
//     console.error('Error fetching dashboard stats:', error);
//     res.status(500).json({ error: 'Failed to fetch dashboard stats.' });
//   }
// };

// /**
//  * Fetches the count of donors for each blood group for the chart.
//  */
// export const getBloodGroupStats = async (req, res) => {
//   try {
//     const { rows } = await db.query(
//       `SELECT blood_group, COUNT(*) as count 
//        FROM users 
//        WHERE user_type = 'donor' AND blood_group IS NOT NULL AND blood_group != 'Unknown'
//        GROUP BY blood_group 
//        ORDER BY blood_group`
//     );
//     res.json(rows);
//   } catch (error) {
//     console.error('Error fetching blood group stats:', error);
//     res.status(500).json({ error: 'Failed to fetch blood group stats.' });
//   }
// };

// /**
//  * Fetches patients with 'pending_verification' status for the Patients tab.
//  */

// export const getPatients = async (req, res) => {
//   try {
//     // --- THIS IS THE CORRECTED QUERY ---
//     // Instead of a risky subquery, we use a LEFT JOIN. This is safer and more efficient.
//     // It correctly handles the case where a patient has no bridge yet (member_count will be 0).
//     const query = `
//       SELECT 
//         p.id, p.name, p.phone, p.blood_group, p.city, p.status, p.condition,
//         p.last_transfusion_date, p.frequency_in_days,
//         p.last_transfusion_date + (p.frequency_in_days || ' days')::interval AS next_due_date,
//         COUNT(bm.id) as bridge_member_count
//       FROM 
//         patients p
//       LEFT JOIN 
//         blood_bridges bb ON p.id = bb.patient_id
//       LEFT JOIN 
//         bridge_members bm ON bb.id = bm.bridge_id
//       GROUP BY
//         p.id
//       ORDER BY 
//         p.created_at DESC
//     `;
//     // --- END OF CORRECTION ---
    
//     const { rows } = await db.query(query);
//     res.json(rows);
//   } catch (error) {
//     console.error('Error fetching patients:', error);
//     res.status(500).json({ error: 'Failed to fetch patients.' });
//   }
// };

// /**
//  * Fetches all 'active' emergencies for the Emergencies tab.
//  */
// export const getActiveEmergencies = async (req, res) => {
//   try {
//     const { rows } = await db.query(
//       "SELECT id, patient_name, blood_group, status, city FROM emergency_requests WHERE status = 'active' ORDER BY created_at DESC"
//     );
//     res.json(rows);
//   } catch (error) {
//     console.error('Error fetching active emergencies:', error);
//     res.status(500).json({ error: 'Failed to fetch active emergencies.' });
//   }
// };

// /**
//  * Fetches all created Blood Bridges for the Blood Bridges tab.
//  */
// export const getBloodBridges = async (req, res) => {
//     try {
//         const { rows } = await db.query(
//             `SELECT 
//                 bb.id, 
//                 bb.name, -- Select the bridge's name
//                 p.name as patient_name,
//                 COUNT(bm.id) as member_count -- Count the members in each bridge
//              FROM 
//                 blood_bridges bb
//              JOIN 
//                 patients p ON bb.patient_id = p.id
//              LEFT JOIN -- Use LEFT JOIN in case a bridge has 0 members
//                 bridge_members bm ON bb.id = bm.bridge_id
//              WHERE 
//                 bb.active = true
//              GROUP BY -- Required when using an aggregate function like COUNT
//                 bb.id, p.name
//              ORDER BY 
//                 p.name`
//         );
//         res.json(rows);
//     } catch (error) {
//         console.error('Error fetching blood bridges:', error);
//         res.status(500).json({ error: 'Failed to fetch blood bridges.' });
//     }
// };


// /**
//  * Fetches patients who are due for a transfusion.
//  * Logic: Finds patients where today's date is past their last transfusion + frequency.
//  */
// export const getDuePatients = async (req, res) => {
//   try {
//     const { rows } = await db.query(
//       `SELECT id, name, blood_group, city, last_transfusion_date, frequency_in_days
//        FROM patients
//        WHERE 
//          status = 'bridged' AND 
//          last_transfusion_date IS NOT NULL AND 
//          frequency_in_days IS NOT NULL AND
//          (last_transfusion_date + frequency_in_days * INTERVAL '1 day') <= NOW()`
//     );
//     res.json(rows);
//   } catch (error){
//     console.error('Error fetching due patients:', error);
//     res.status(500).json({ error: 'Failed to fetch due patients.' });
//   }
// };

// /**
//  * Fetches the top 10 donors for the gamification leaderboard.
//  */
// export const getLeaderboard = async (req, res) => {
//   try {
//     const { rows } = await db.query(
//       `SELECT name, gamification_points, city 
//        FROM users 
//        WHERE user_type = 'donor' 
//        ORDER BY gamification_points DESC 
//        LIMIT 10`
//     );
//     res.json(rows);
//   } catch (error) {
//     console.error('Error fetching leaderboard:', error);
//     res.status(500).json({ error: 'Failed to fetch leaderboard data.' });
//   }
// };

// // --- Other Endpoints (Placeholders for now) ---
// export const getConfig = async (req, res) => { res.json({ message: "Config placeholder" }); };
// export const getInboxMessages = async (req, res) => {
//   try {
//     // This query selects all messages that an admin has not yet marked as 'resolved'.
//     const { rows } = await db.query(
//       "SELECT id, user_phone, user_message, reason, created_at FROM inbox_messages WHERE status = 'pending' ORDER BY created_at ASC"
//     );
//     res.json(rows);
//   } catch (error) {
//     console.error('Error fetching inbox messages:', error);
//     res.status(500).json({ error: 'Failed to fetch inbox messages.' });
//   }
// };
// export const escalateEmergency = async (req, res) => {
//   const { requestId } = req.params;
//   try {
//     const result = await emergencyService.escalateRequest(requestId);
//     console.log(`ADMIN ACTION: Escalated emergency request ${requestId}`);
//     res.json(result);
//   } catch (error) {
//     console.error(`Error escalating emergency ${requestId}:`, error);
//     res.status(500).json({ error: error.message || 'Failed to escalate emergency.' });
//   }
// };
// export const resolveInboxMessage = async (req, res) => {
//   const { messageId } = req.params;
//   try {
//     const { rowCount } = await db.query(
//       "UPDATE inbox_messages SET status = 'resolved', resolved_at = NOW() WHERE id = $1 AND status = 'pending'",
//       [messageId]
//     );

//     if (rowCount === 0) {
//       return res.status(404).json({ message: "Pending message not found or it may have been already resolved." });
//     }

//     console.log(`ADMIN ACTION: Resolved inbox message ${messageId}`);
//     res.json({ success: true, message: 'Message marked as resolved.' });
//   } catch (error) {
//     console.error(`Error resolving inbox message ${messageId}:`, error);
//     res.status(500).json({ error: 'Failed to resolve message.' });
//   }
// };


// backend/src/controllers/adminController.js

import jwt from 'jsonwebtoken';
import config from '../config/config.js';
import db from '../config/db.js';
import bridgeService from '../services/bridgeService.js';
import bridgeCoordinationService from '../services/bridgeCoordinationService.js';
import emergencyService from '../services/emergencyService.js';

/**
 * FINAL UNIFIED MOCK LOGIN
 */
export const login = async (req, res) => {
  const { phone, password } = req.body;
  if (!phone || !password) {
    return res.status(400).json({ message: 'Phone and password are required' });
  }
  try {
    if (phone === config.adminDemoPhone && password === 'admin123') {
      const userPayload = { phone, role: 'Admin', name: 'Admin User' };
      const token = jwt.sign(userPayload, config.jwtSecret, { expiresIn: '8h' });
      return res.json({ token, user: userPayload });
    }
    if (phone === '+919876543210' && password === 'donor123') {
      const userPayload = { phone, role: 'Donor', name: 'Ravi Kumar' };
      const token = jwt.sign(userPayload, config.jwtSecret, { expiresIn: '8h' });
      return res.json({ token, user: userPayload });
    }
    if (phone === '+911234567890' && password === 'patient123') {
      const userPayload = { phone, role: 'Patient', name: 'Priya Sharma' };
      const token = jwt.sign(userPayload, config.jwtSecret, { expiresIn: '8h' });
      return res.json({ token, user: userPayload });
    }
    return res.status(401).json({ message: 'Invalid credentials. Please use the demo details.' });
  } catch (err) {
    console.error('Login error:', { error: err.message, phone });
    return res.status(500).json({ message: 'Server error during login' });
  }
};

/**
 * Public stats for the landing page.
 */
export const getPublicStats = async (req, res) => {
    try {
        const { rows: [stats] } = await db.query(`SELECT (SELECT COUNT(*) FROM users WHERE user_type = 'donor') AS total_donors, (SELECT COUNT(*) FROM users WHERE user_type = 'donor' AND availability_status = 'available') AS active_donors, (SELECT COUNT(DISTINCT patient_id) FROM blood_bridges) AS patients_helped`);
        res.json({
            total_donors: parseInt(stats.total_donors, 10) || 0,
            active_donors: parseInt(stats.active_donors, 10) || 0,
            patients_helped: parseInt(stats.patients_helped, 10) || 0,
        });
    } catch (error) {
        console.error('Error fetching public stats:', error);
        res.status(500).json({ total_donors: 1247, active_donors: 892, patients_helped: 156 });
    }
};

export const createBridgeForPatient = async (req, res) => {
  const { patientId } = req.params;
  try {
    const { rows: [patient] } = await db.query('SELECT * FROM patients WHERE id = $1', [patientId]);
    if (!patient) return res.status(404).json({ message: 'Patient not found' });
    if (patient.status === 'bridged') return res.status(400).json({ message: 'Patient already has a bridge.' });
    const { rows: [bridge] } = await db.query('INSERT INTO blood_bridges (patient_id, name, blood_group, city) VALUES ($1, $2, $3, $4) RETURNING id', [patient.id, `${patient.name}'s Bridge`, patient.blood_group, patient.city]);
    const result = await bridgeService.populateNewBridge(bridge.id, patient.city, patient.blood_group, patient.pincode);
    await db.query("UPDATE patients SET status = 'bridged' WHERE id = $1", [patientId]);
    res.json({ success: true, message: `Blood Bridge created and populated with ${result.count} top donors.` });
  } catch (error) {
    console.error('Error creating bridge for patient:', error);
    await db.query("UPDATE patients SET status = 'pending_verification' WHERE id = $1", [patientId]).catch(console.error);
    res.status(500).json({ error: 'Failed to create and populate bridge.' });
  }
};

export const closeEmergency = async (req, res) => {
  const { requestId } = req.params;
  try {
    const { rowCount } = await db.query("UPDATE emergency_requests SET status = 'closed' WHERE id = $1 AND status = 'active'", [requestId]);
    if (rowCount === 0) return res.status(404).json({ message: "Active request not found or already closed." });
    res.json({ success: true, message: 'Request successfully closed.' });
  } catch (error) {
    console.error(`Error closing emergency ${requestId}:`, error);
    res.status(500).json({ error: 'Failed to close request.' });
  }
};

export const requestBridgeTransfusion = async (req, res) => {
  const { bridgeId } = req.params;
  try {
    const result = await bridgeCoordinationService.requestTransfusion(bridgeId);
    res.json(result);
  } catch (error) {
    console.error(`Error requesting bridge transfusion for ${bridgeId}:`, error);
    res.status(500).json({ error: error.message || 'Failed to send bridge request.' });
  }
};

export const getDashboardStats = async (req, res) => {
    try {
        const [
            { rows: [totalDonors] }, { rows: [activeDonors] }, { rows: [patientsHelped] },
            { rows: [emergenciesResolved] }, { rows: [bloodUnits] }, { rows: [bridgesCreated] }
        ] = await Promise.all([
            db.query("SELECT COUNT(*) as count FROM users WHERE user_type = 'donor'"),
            db.query("SELECT COUNT(*) as count FROM users WHERE user_type = 'donor' AND availability_status = 'available'"),
            db.query("SELECT COUNT(DISTINCT patient_id) as count FROM blood_bridges"),
            db.query("SELECT COUNT(*) as count FROM emergency_requests WHERE status IN ('fulfilled', 'closed')"),
            db.query("SELECT SUM(donations_confirmed) as count FROM users WHERE user_type = 'donor'"),
            db.query("SELECT COUNT(*) as count FROM blood_bridges")
        ]);
        res.json({
            total_donors: parseInt(totalDonors.count, 10) || 0,
            active_donors: parseInt(activeDonors.count, 10) || 0,
            patients_helped: parseInt(patientsHelped.count, 10) || 0,
            emergencies_resolved: parseInt(emergenciesResolved.count, 10) || 0,
            blood_units_donated: parseInt(bloodUnits.count, 10) || 0,
            bridges_created: parseInt(bridgesCreated.count, 10) || 0,
        });
    } catch (error) {
        console.error('Error fetching dashboard stats:', error);
        res.status(500).json({ error: 'Failed to fetch dashboard stats.' });
    }
};

export const getBloodGroupStats = async (req, res) => {
  try {
    const { rows } = await db.query(`SELECT blood_group, COUNT(*)::int as donors FROM users WHERE user_type = 'donor' AND blood_group IS NOT NULL AND blood_group != 'Unknown' GROUP BY blood_group ORDER BY blood_group`);
    const totalDonors = rows.reduce((sum, row) => sum + row.donors, 0);
    const dataWithPercentage = rows.map(row => ({...row, percentage: totalDonors > 0 ? parseFloat(((row.donors / totalDonors) * 100).toFixed(1)) : 0 }));
    res.json(dataWithPercentage);
  } catch (error) {
    console.error('Error fetching blood group stats:', error);
    res.status(500).json({ error: 'Failed to fetch blood group stats.' });
  }
};

export const getPatients = async (req, res) => {
  try {
    const query = `SELECT id, name, phone, blood_group, city as location, status, condition FROM patients ORDER BY created_at DESC`;
    const { rows } = await db.query(query);
    res.json(rows);
  } catch (error) {
    console.error('Error fetching patients:', error);
    res.status(500).json({ error: 'Failed to fetch patients.' });
  }
};

/**
 * CORRECTED: Fetches all 'active' emergencies.
 * Removes the non-existent column and provides a default value for 'urgency'.
 */
export const getActiveEmergencies = async (req, res) => {
  try {
    const { rows } = await db.query(
      "SELECT id, patient_name, blood_group, city as location, status, created_at, 'high' as urgency FROM emergency_requests WHERE status = 'active' ORDER BY created_at DESC"
    );
    res.json(rows);
  } catch (error) {
    console.error('Error fetching active emergencies:', error);
    res.status(500).json({ error: 'Failed to fetch active emergencies.' });
  }
};

export const getBloodBridges = async (req, res) => {
    try {
        const { rows } = await db.query(`SELECT bb.id, bb.name, p.name as patient_name, COUNT(bm.id) as member_count FROM blood_bridges bb JOIN patients p ON bb.patient_id = p.id LEFT JOIN bridge_members bm ON bb.id = bm.bridge_id WHERE bb.active = true GROUP BY bb.id, p.name ORDER BY p.name`);
        res.json(rows);
    } catch (error) {
        console.error('Error fetching blood bridges:', error);
        res.status(500).json({ error: 'Failed to fetch blood bridges.' });
    }
};

export const getDuePatients = async (req, res) => {
  try {
    const { rows } = await db.query(`SELECT id, name, blood_group, city, last_transfusion_date, frequency_in_days FROM patients WHERE status = 'bridged' AND last_transfusion_date IS NOT NULL AND frequency_in_days IS NOT NULL AND (last_transfusion_date + frequency_in_days * INTERVAL '1 day') <= NOW()`);
    res.json(rows);
  } catch (error){
    console.error('Error fetching due patients:', error);
    res.status(500).json({ error: 'Failed to fetch due patients.' });
  }
};

export const getLeaderboard = async (req, res) => {
  try {
    const { rows } = await db.query(`SELECT name, city as location, donations_confirmed as donations, blood_group, gamification_points as points FROM users WHERE user_type = 'donor' ORDER BY gamification_points DESC, donations_confirmed DESC LIMIT 10`);
    const rankedData = rows.map((row, index) => ({ rank: index + 1, ...row }));
    res.json(rankedData);
  } catch (error) {
    console.error('Error fetching leaderboard:', error);
    res.status(500).json({ error: 'Failed to fetch leaderboard data.' });
  }
};

export const getInboxMessages = async (req, res) => {
  try {
    const { rows } = await db.query("SELECT id, user_phone, user_message as message, reason as subject, created_at as timestamp, 'high' as priority, 'flagged' as status, 'general' as category FROM inbox_messages WHERE status = 'pending' ORDER BY created_at ASC");
    res.json(rows);
  } catch (error) {
    console.error('Error fetching inbox messages:', error);
    res.status(500).json({ error: 'Failed to fetch inbox messages.' });
  }
};

export const escalateEmergency = async (req, res) => {
  const { requestId } = req.params;
  try {
    const result = await emergencyService.escalateRequest(requestId);
    res.json(result);
  } catch (error) {
    console.error(`Error escalating emergency ${requestId}:`, error);
    res.status(500).json({ error: error.message || 'Failed to escalate emergency.' });
  }
};

export const resolveInboxMessage = async (req, res) => {
  const { messageId } = req.params;
  try {
    const { rowCount } = await db.query("UPDATE inbox_messages SET status = 'resolved', resolved_at = NOW() WHERE id = $1 AND status = 'pending'",[messageId]);
    if (rowCount === 0) return res.status(404).json({ message: "Pending message not found or it may have been already resolved." });
    res.json({ success: true, message: 'Message marked as resolved.' });
  } catch (error) {
    console.error(`Error resolving inbox message ${messageId}:`, error);
    res.status(500).json({ error: 'Failed to resolve message.' });
  }
};

export const getConfig = async (req, res) => {
  res.json({ version: "1.0.0", system_status: "ok" });
};

export const getDonorDashboard = async (req, res) => {
  try {
    const { phone } = req.user;
    const { rows: [donor] } = await db.query(`SELECT id, name, phone, blood_group, city, gamification_points AS points, streak_count AS streak FROM users WHERE phone = $1 AND user_type = 'Donor'`, [phone]);
    if (!donor) return res.status(404).json({ message: "Donor not found." });
    
    const dashboardData = {
      ...donor, donations_completed: 12, next_donation: 'January 25, 2025', level: 'Blood Guardian', impact_lives_saved: 5,
      badges: [
        { id: 'b1', name: 'First Donation', icon: 'award', unlocked: true },
        { id: 'b2', name: 'Regular Donor', icon: 'heart', unlocked: true },
        { id: 'b3', name: 'Monthly Hero', icon: 'calendar', unlocked: true },
        { id: 'b4', name: 'Life Saver', icon: 'shield', unlocked: false }
      ]
    };
    res.json(dashboardData);
  } catch (error) {
    console.error('Error fetching donor dashboard:', error);
    res.status(500).json({ error: 'Failed to fetch donor dashboard.' });
  }
};

export const getPatientDashboard = async (req, res) => {
  try {
    const { phone } = req.user;
    const { rows: [patient] } = await db.query(`SELECT id, name, blood_group, condition, status, last_transfusion_date, frequency_in_days FROM patients WHERE phone = $1`, [phone]);
    if (!patient) return res.status(404).json({ message: "Patient not found." });

    const dashboardData = {
      ...patient, age: 14, bridge_status: patient.status === 'bridged' ? 'Connected' : 'Not Connected', health_score: 85, connected_donors: 3,
      last_transfusion: patient.last_transfusion_date ? new Date(patient.last_transfusion_date).toLocaleDateString('en-IN') : 'N/A',
      next_transfusion: patient.frequency_in_days ? `In ${patient.frequency_in_days} days` : 'N/A',
      upcoming_appointments: [
        { type: 'Blood Transfusion', doctor: 'Dr. Amit Sharma', date: 'January 25, 2025 - 10:00 AM' },
        { type: 'Regular Checkup', doctor: 'Dr. Priya Verma', date: 'February 2, 2025 - 2:30 PM' }
      ]
    };
    res.json(dashboardData);
  } catch (error) {
    console.error('Error fetching patient dashboard:', error);
    res.status(500).json({ error: 'Failed to fetch patient dashboard.' });
  }
};

```

`backend/src/controllers/webhookController.js`

```javascript
// backend/src/controllers/webhookController.js

// Import required dependencies
import config from '../config/config.js';
import db from '../config/db.js';
import emergencyService from '../services/emergencyService.js';
import registrationService from '../services/registrationService.js';
import responseService from '../services/responseService.js';
import patientService from '../services/patientService.js';
import donorPreferenceService from '../services/donorPreferenceService.js';
import aiRouterService from '../services/aiRouterService.js';
import faqService from '../services/faqService.js';
import gamificationService from '../services/gamificationService.js';
import whatsappService from '../services/whatsappService.js';
import bridgeService from '../services/bridgeService.js';
import { normalizePhoneNumber } from '../utils/phoneHelper.js';
import { detectLanguage } from '../utils/languageHelper.js';
import translationService from '../utils/translationService.js';
import { triggerInactiveDonorNudges, triggerAutomaticBridgeRequests } from '../services/schedulerService.js';
import loggingService from '../services/loggingService.js';

/**
 * Handles the GET request from Meta for webhook verification.
 */
const verifyToken = (req, res) => {
  const mode = req.query['hub.mode'];
  const token = req.query['hub.verify_token'];
  const challenge = req.query['hub.challenge'];

  if (mode === 'subscribe' && token === config.whatsappVerifyToken) {
    console.log('✅ Webhook verified successfully!');
    return res.status(200).send(challenge);
  }

  console.warn('Webhook verification failed. Make sure your verify token is correct.');
  res.status(403).send('Verification failed');
};

/**
 * Processes a single, validated incoming WhatsApp message.
 */
const processMessage = async (messageData) => {
  const from = normalizePhoneNumber(messageData.from);

  // --- PRIORITY 0: Handle Non-Text Message Types ---
  if (messageData.type === 'interactive' && messageData.interactive.type === 'button_reply') {
    const buttonId = messageData.interactive.button_reply.id;
    console.log(`--- Interactive Reply --- From: ${from}, Button ID: ${buttonId}`);
    if (buttonId.startsWith('join_bridge_')) {
      await bridgeService.addDonorToBridge(buttonId.replace('join_bridge_', ''));
      await whatsappService.sendTextMessage(from, "Thank you for joining a Blood Bridge! You are now part of a dedicated life-saving team. ❤️");
    } else if (buttonId.startsWith('decline_bridge_')) {
      await whatsappService.sendTextMessage(from, "No problem! We appreciate you being a regular donor and will keep you in mind for general requests.");
    }
    return;
  }
  
  if (messageData.type === 'location') {
    console.log(`--- Location Message --- From: ${from}`);
    await emergencyService.handleLocationReply(from, messageData.location);
    return;
  }

  if (messageData.type !== 'text') {
    console.log(`Ignoring non-text message of type '${messageData.type}' from ${from}.`);
    return;
  }

  // --- Text Message Processing ---
  let userMessage = messageData.text.body.trim();
  
  const detectedLang = await detectLanguage(userMessage);
  if (detectedLang && detectedLang !== 'en') {
      userMessage = await translationService.translateToEnglish(userMessage);
  }
  
  const lowerUserMessage = userMessage.toLowerCase();
  console.log(`--- Processing Message --- From: ${from}, Processed Message: "${userMessage}"`);
  await loggingService.logIncoming(from, userMessage);

  // --- PRIORITY 1: Rigid Commands & State-Based Replies ---
  
  // Smart parser for the multi-line donor registration format
  const registrationDetailsMatch = userMessage.match(/(?:name|full name):\s*(?<name>.+)\s*city:\s*(?<city>.+)\s*blood group:\s*(?<blood_group>.+)/is);
  if (registrationDetailsMatch) {
    console.log(`✅ Message handled by: Donor Registration Details Parser.`);
    await registrationService.completeDonorRegistration(from, registrationDetailsMatch.groups);
    return;
  }
  
  // Keyword match for DONOR registration
  const isDonorRequest = lowerUserMessage.includes('donor') || lowerUserMessage.includes('donate');
  if (lowerUserMessage.includes('register') && isDonorRequest && !lowerUserMessage.includes('patient')) {
    console.log(`✅ Message handled by: Donor Registration keyword.`);
    await registrationService.handleNewDonor({}, from);
    return;
  }

  // Keyword match for PATIENT registration
  if ((lowerUserMessage.includes('register') && lowerUserMessage.includes('patient')) || lowerUserMessage.includes('help for a thalassemia patient')) {
    console.log(`✅ Message handled by: Patient Registration keyword.`);
    await patientService.handleNewPatient({}, from);
    return;
  }

  // Conversational flows and standard replies
  if (await patientService.processOnboardingReply(userMessage, from)) return;
  if (lowerUserMessage === 'apply' && await patientService.startApplication(from)) return;
  if (/^\d{6}$/.test(userMessage)) { await responseService.verifyOTPAndConfirm(from, userMessage); return; }
  if (lowerUserMessage === 'no') { await responseService.handleSimpleDecline(from); return; }
  const responseMatch = userMessage.match(/^(?:YES)\s+(\d{4})$/i);
  if (responseMatch) { await responseService.handleDonorReplyWithShortCode(from, responseMatch[1]); return; }
  if (lowerUserMessage === 'yes') {
    const { rows: [userWithCode] } = await db.query("SELECT last_request_short_code FROM users WHERE phone = $1", [from]);
    if (userWithCode && userWithCode.last_request_short_code) {
        await responseService.handleDonorReplyWithShortCode(from, userWithCode.last_request_short_code);
        return;
    }
  }

  // Demo commands
  if (lowerUserMessage.startsWith('/demo')) {
    console.log('DEMO MODE ACTIVATED');
    if (lowerUserMessage === '/demo nudge') {
        await triggerInactiveDonorNudges();
        await whatsappService.sendTextMessage(from, `🎬 Executed Inactive Donor Nudge.`);
    } else if (lowerUserMessage === '/demo bridge_request') {
        await triggerAutomaticBridgeRequests();
        await whatsappService.sendTextMessage(from, `🎬 Executed Automatic Bridge Requests.`);
    } else {
        await whatsappService.sendTextMessage(from, `Unknown demo command.`);
    }
    return;
  }

  // --- PRIORITY 2: AI-Powered Intent Routing (with context) ---
  console.log(`No direct keyword match found. Routing to AI with conversation context...`);
  const { rows: [user] } = await db.query('SELECT role FROM users WHERE phone = $1', [from]);
  const userRole = user ? user.role : 'Unregistered';
  
  const { rows: historyRows } = await db.query(
    `SELECT message, response FROM conversations WHERE user_phone = $1 ORDER BY created_at DESC LIMIT 3`,
    [from]
  );
  
  const chatHistory = historyRows.reverse().flatMap(row => [
    { role: 'user', parts: [{ text: row.message }] },
    ...(row.response ? [{ role: 'model', parts: [{ text: row.response }] }] : [])
  ]);

  const route = await aiRouterService.routeMessageWithContext(userMessage, userRole, chatHistory);
  
  if (route && route.tool) {
    console.log(`AI routed to tool: ${route.tool}`);
    switch (route.tool) {
      case 'handle_emergency_request':
        await emergencyService.handleEmergencyRequest(userMessage, from);
        break;
      case 'handle_donor_registration':
        await registrationService.handleNewDonor(route.params, from);
        break;
      case 'handle_patient_onboarding':
        await patientService.handleNewPatient(route.params, from);
        break;
      case 'get_my_dashboard': {
        const statusMessage = await gamificationService.getDonorStatus(from);
        await whatsappService.sendTextMessage(from, statusMessage);
        break;
      }
      case 'get_leaderboard': {
        const leaderboardMessage = await gamificationService.getLeaderboardMessage(from);
        await whatsappService.sendTextMessage(from, leaderboardMessage);
        break;
      }
      case 'handle_join_bridge_request': {
        const msg = await bridgeService.addDonorToBridgeByPhone(from);
        await whatsappService.sendTextMessage(from, msg);
        break;
      }
      case 'handle_snooze_request':
        await donorPreferenceService.handleSnooze(from, route.params);
        break;
      default:
        await faqService.handleFaq(userMessage, from);
        break;
    }
    return;
  }

  // --- PRIORITY 3: Final Fallback ---
  console.log(`AI did not select a tool. Handling as a general FAQ.`);
  await faqService.handleFaq(userMessage, from);
};

/**
 * The main entry point for the /webhook POST request.
 */
const handleMessage = async (req, res) => {
  res.sendStatus(200);

  try {
    const messageData = req.body.entry?.[0]?.changes?.[0]?.value?.messages?.[0];
    if (!messageData) {
      return;
    }

    const messageId = messageData.id;
    const { rows } = await db.query('SELECT 1 FROM processed_messages WHERE message_id = $1', [messageId]);
    if (rows.length > 0) {
      console.warn(`Duplicate message ignored: ${messageId}`);
      return;
    }
    
    await db.query('INSERT INTO processed_messages(message_id) VALUES($1)', [messageId]);
    await processMessage(messageData);

  } catch (error) {
    console.error('CRITICAL ERROR in handleMessage:', {
      message: error.message,
      stack: error.stack,
    });
  }
};

export default {
  verifyToken,
  handleMessage,
};

```

`backend/src/middleware/authMiddleware.js`

```javascript
// backend/src/middleware/authMiddleware.js
import jwt from 'jsonwebtoken';
import config from '../config/config.js';

// ✅ The function must be declared as a constant named 'authMiddleware'
const authMiddleware = (req, res, next) => {
  const authHeader = req.headers.authorization;

  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ message: 'Authorization token is missing or malformed' });
  }

  const token = authHeader.split(' ')[1];
  try {
    const decoded = jwt.verify(token, config.jwtSecret);
    req.user = decoded;
    next();
  } catch (error) {
    console.error("JWT Verification Error:", error.message);
    return res.status(401).json({ message: 'Invalid or expired token' });
  }
};

// ✅ This line then exports that constant
export default authMiddleware;

```

`backend/src/middleware/checkRole.js`

```javascript
// backend/src/middleware/checkRole.js

const checkRole = (roles) => {
  return (req, res, next) => {
    if (!req.user || !req.user.role) {
      return res.status(403).json({ message: 'Forbidden: No role assigned' });
    }
    const userRole = req.user.role;
    if (roles.includes(userRole)) {
      return next();
    }
    return res.status(403).json({ message: 'Forbidden: Insufficient permissions' });
  };
};

export default checkRole; // <-- CORRECTED LINE

```

`backend/src/middleware/verifyWebhook.js`

```javascript
// backend/src/middleware/verifyWebhook.js
import crypto from 'crypto';
import config from '../config/config.js';

/**
 * Middleware to verify WhatsApp webhook POST requests.
 * - Skips signature verification for GET (used by Meta for challenge verification).
 * - Validates signature for POST requests to ensure authenticity.
 */
export const verifyWebhook = (req, res, next) => {
  // Allow GET requests (Meta verification step) to pass through.
  if (req.method === 'GET') {
    return next();
  }

  // Get the signature from the request header.
  const signature = req.headers['x-hub-signature-256'];
  if (!signature) {
    console.warn('Signature missing for POST webhook');
    return res.status(401).json({ message: 'Signature missing' });
  }

  // --- THIS IS THE CORRECTED SECTION ---
  // Create an HMAC (Hash-based Message Authentication Code) using sha256.
  // We use the `whatsappAppSecret` as the key.
  const hmac = crypto.createHmac('sha256', config.whatsappAppSecret);

  // We MUST use the raw request body string that we saved earlier in server.js.
  // Using `req.body` here will fail because it's already parsed JSON.
  hmac.update(req.rawBody);
  const expectedSignature = `sha256=${hmac.digest('hex')}`;
  // --- END OF CORRECTION ---

  // Compare the signature from Meta with the one we calculated.
  // We use a timing-safe comparison to enhance security.
  // An invalid signature means the request might be forged.
  if (!crypto.timingSafeEqual(Buffer.from(signature), Buffer.from(expectedSignature))) {
    console.warn('Signature mismatch for POST webhook. Check your WHATSAPP_APP_SECRET.');
    return res.status(401).json({ message: 'Invalid signature' });
  }

  // If the signatures match, the request is authentic. Proceed to the next middleware.
  next();
};

```

`backend/src/routes/index.js`

```javascript
// backend/src/routes/index.js

import express from 'express';
import {
  login, getPublicStats, createBridgeForPatient, closeEmergency, requestBridgeTransfusion,
  getDashboardStats, getBloodGroupStats, getPatients, getActiveEmergencies,
  getBloodBridges, getDuePatients, getLeaderboard, getInboxMessages,
  escalateEmergency, resolveInboxMessage, getConfig,
  getDonorDashboard, getPatientDashboard
} from '../controllers/adminController.js';
import authMiddleware from '../middleware/authMiddleware.js';
import checkRole from '../middleware/checkRole.js';

const router = express.Router();

// --- PUBLIC ROUTES ---
router.post('/admin/login', login);
router.get('/public/stats', getPublicStats);

// --- AUTHENTICATION MIDDLEWARE ---
// All routes defined below this line will require a valid token.
router.use(authMiddleware);

// --- ADMIN-ONLY ROUTES ---
router.get('/admin/stats', checkRole(['Admin']), getDashboardStats);
router.get('/admin/stats/blood-groups', checkRole(['Admin']), getBloodGroupStats);
router.get('/admin/patients', checkRole(['Admin']), getPatients);
router.get('/admin/emergencies', checkRole(['Admin']), getActiveEmergencies);
router.get('/admin/leaderboard', checkRole(['Admin']), getLeaderboard);
router.get('/admin/inbox', checkRole(['Admin']), getInboxMessages);
router.post('/admin/patients/:patientId/create-bridge', checkRole(['Admin']), createBridgeForPatient);
router.post('/admin/emergencies/:requestId/close', checkRole(['Admin']), closeEmergency);
router.post('/admin/emergencies/:requestId/escalate', checkRole(['Admin']), escalateEmergency);

// --- DONOR PORTAL ROUTE ---
router.get('/donor/dashboard', checkRole(['Donor', 'Admin']), getDonorDashboard);

// --- PATIENT PORTAL ROUTE ---
router.get('/patient/dashboard', checkRole(['Patient', 'Admin']), getPatientDashboard);

export default router;

```

`backend/src/services/aiRouterService.js`

```javascript
// backend/src/services/aiRouterService.js
import { GoogleGenerativeAI } from '@google/generative-ai';
import { TOOL_DEFINITIONS } from './aiTools.js'; // ✅ This import MUST be in this file.
import config from '../config/config.js';

class AIRouterService {
  constructor() {
    if (!config.geminiApiKey) {
      throw new Error("GEMINI_API_KEY is not set.");
    }
    this.genAI = new GoogleGenerativeAI(config.geminiApiKey);
    this.model = this.genAI.getGenerativeModel({
      model: 'gemini-1.5-flash-latest',
      // This line now works because TOOL_DEFINITIONS is correctly imported above.
      tools: { functionDeclarations: TOOL_DEFINITIONS }
    });
  }

  // ✅ This is the complete, context-aware version of this function.
  async routeMessageWithContext(userMessage, userRole, chatHistory = []) {
    const systemPrompt = `You are "Bridge AI", an AI assistant. Your goal is to understand the user's message in the context of the conversation and call the appropriate function. The user's role is "${userRole}".`;
    
    const fullHistory = [
      { role: "user", parts: [{ text: systemPrompt }] },
      { role: "model", parts: [{ text: "Understood." }] },
      ...chatHistory
    ];
    
    try {
      const chat = this.model.startChat({ history: fullHistory });
      const result = await chat.sendMessage(userMessage);
      const call = result.response.functionCalls()?.[0];
      
      if (call) {
        console.log(`AI decided to call tool: ${call.name} with params:`, call.args);
        return { tool: call.name, params: call.args };
      }
      console.log("AI did not call a specific tool for this message.");
      return null;
    } catch (error) {
      console.error('Error routing message with Gemini:', error.message);
      return null;
    }
  }
}

export default new AIRouterService();

```

`backend/src/services/aiTools.js`

```javascript
// backend/src/services/aiTools.js

/**
 * TOOL_DEFINITIONS is a manifest of functions the Gemini AI can call.
 * The descriptions are critical, as they tell the AI *when* to use each tool.
 */
export const TOOL_DEFINITIONS = [
  {
    name: 'handle_emergency_request',
    description: `Use for any urgent, one-time blood request. The message may contain details like blood group, city, or hospital.`,
    parameters: {
      type: 'object',
      properties: {
        patient_name: { type: 'string', description: 'Name of the patient needing blood. If not mentioned, use "Unknown".' },
        blood_group: { type: 'string', description: 'The blood group needed, like A+, O-, AB+.' },
        city: { type: 'string', description: 'The city where the hospital is located.' }
      },
      required: ['blood_group', 'city']
    }
  },
  {
    // ✅ UPDATED: This tool can now extract parameters from a detailed message.
    name: 'handle_patient_onboarding',
    description: `Use when a user wants to register a PATIENT for long-term support. This is for long-term care, not one-time emergencies. Extract the patient's name, city, and blood group if provided.`,
    parameters: {
      type: 'object',
      properties: {
        patient_name: { type: 'string', description: 'The name of the patient. Default to "the patient" if not specified.' },
        city: { type: 'string', description: 'The city where the patient needs support.' },
        blood_group: { type: 'string', description: "The patient's blood group." }
      },
      required: [] // Parameters are optional, the bot can ask for them if missing.
    }
  },
  {
    // ✅ This description is now more specific to donors.
    name: 'handle_donor_registration',
    description: `Use when a user wants to register as a DONOR or makes a generic registration request like "register me" or "create an account". Key phrases are "I want to donate", "register me as a donor", or "sign me up". Do NOT use this tool if the user mentions "patient".`,
    parameters: {
      type: 'object',
      properties: {
        name: { type: 'string', description: 'Full name of the new donor. Default to "Unknown".' },
        blood_group: { type: 'string', description: 'The blood group of the person. Default to "Unknown".' },
        city: { type: 'string', description: 'The city where the donor lives. Default to "Unknown".' }
      },
      required: []
    }
  },
  {
    name: 'handle_join_bridge_request',
    description: `Use when an EXISTING registered donor specifically asks to join a "Blood Bridge". This is a rotational system for supporting a specific patient.`,
    parameters: { 
      type: 'object', 
      properties: {}
    }
  },

  {
    name: 'handle_snooze_request',
    description: 'Use when a donor wants to temporarily pause notifications. It can understand durations like "a month", "10 days", "2 weeks".',
    parameters: {
      type: 'object',
      properties: {
        duration: { type: 'integer', description: 'The number value for the duration (e.g., 10 for "10 days").' },
        unit: { type: 'string', enum: ['day', 'week', 'month'], description: 'The unit of time for the snooze.' }
      },
      required: ['duration', 'unit']
    }
  },
  {
    name: 'get_my_dashboard',
    description: 'Use this when a registered donor asks for their personal status, points, badges, or "mydashboard".',
    parameters: {
      type: 'object',
      properties: {},
      required: []
    }
  },
  {
    name: 'get_leaderboard',
    description: 'Use this when a user asks to see the "leaderboard", "top donors", or "rankings".',
    parameters: {
      type: 'object',
      properties: {},
      required: []
    }
  },
];

```

`backend/src/services/bridgeCoordinationService.js`

```javascript
// backend/src/services/bridgeCoordinationService.js
import db from '../config/db.js';
import whatsappService from './whatsappService.js';
import { generateShortCode } from '../utils/otpHelper.js';

class BridgeCoordinationService {
  async requestTransfusion(bridgeId) {
    const { rows: [bridge] } = await db.query(
      `SELECT bb.*, p.name as patient_name
       FROM blood_bridges bb
       JOIN patients p ON bb.patient_id = p.id
       WHERE bb.id = $1`,
      [bridgeId]
    );
    if (!bridge) throw new Error(`Blood Bridge with ID ${bridgeId} not found.`);

    // --- NEW LOGIC: PREVENT DUPLICATE REQUESTS ---
    if (bridge.active_request_id) {
      throw new Error(`Request failed: Patient ${bridge.patient_name} already has an active bridge request.`);
    }
    // --- END NEW LOGIC ---

    const { rows: members } = await db.query(
      // Find the next donor who is currently 'available'
      `SELECT u.id, u.name, u.phone
       FROM bridge_members bm
       JOIN users u ON bm.donor_id = u.id
       WHERE bm.bridge_id = $1 AND bm.status = 'active' AND u.availability_status = 'available'
       ORDER BY bm.position ASC`,
      [bridgeId]
    );

    if (members.length === 0) {
      // This is a "Bridge Failure" scenario. We need to escalate.
      // For now, we'll throw an error that the admin will see.
      // In Task 4 (Escalation), we will automate this.
      throw new Error(`No available donors found in the bridge for ${bridge.patient_name}. Please escalate to a general emergency.`);
    }

    const donorToNotify = members[0]; // The SQL query now only returns available donors in order

    const shortCode = generateShortCode();
    // Create the request and get its ID back
    const { rows: [newRequest] } = await db.query(
      `INSERT INTO emergency_requests (patient_name, blood_group, city, requested_by_phone, short_code, request_type, bridge_id, units_needed)
       VALUES ($1, $2, $3, 'system', $4, 'bridge', $5, 1) RETURNING id;`,
      [bridge.patient_name, bridge.blood_group, bridge.city, shortCode, bridge.id]
    );

    // --- NEW LOGIC: LINK THE ACTIVE REQUEST TO THE BRIDGE ---
    await db.query(
        'UPDATE public.blood_bridges SET active_request_id = $1 WHERE id = $2',
        [newRequest.id, bridgeId]
    );
    // --- END NEW LOGIC ---

    const message = `Hi ${donorToNotify.name}, it's your turn in the Blood Bridge for patient *${bridge.patient_name}*.\n\nYour help is needed for their scheduled transfusion. Please reply with *YES ${shortCode}* to confirm your availability.`;
    await whatsappService.sendTextMessage(donorToNotify.phone, message);

    return { success: true, message: `Successfully notified ${donorToNotify.name} for patient ${bridge.patient_name}.` };
  }
  
  async rotateBridge(bridgeId, client = db) {
    // This function now does two things: rotates the position AND clears the active request ID.
    const { rows: [bridge] } = await client.query('SELECT rotation_position FROM blood_bridges WHERE id = $1', [bridgeId]);
    const { rows: [{ count }] } = await client.query('SELECT COUNT(*) FROM bridge_members WHERE bridge_id = $1 AND status = \'active\'', [bridgeId]);

    if (!bridge || count === '0') {
      console.error(`Cannot rotate bridge ${bridgeId}: Bridge or members not found.`);
      return;
    }

    const totalMembers = parseInt(count, 10);
    // We use the current position to find the next one, ensuring rotation
    const currentPositionInList = (bridge.rotation_position - 1);
    const nextPosition = (currentPositionInList % totalMembers) + 1;

    // Update bridge: clear active request and set new rotation position
    await client.query(
      'UPDATE blood_bridges SET rotation_position = $1, active_request_id = NULL WHERE id = $2',
      [nextPosition, bridgeId]
    );
    console.log(`Blood Bridge ${bridgeId} rotated successfully to position ${nextPosition} and cleared active request.`);
  }  // In backend/src/services/bridgeCoordinationService.js, inside the class

  /**
   * Finds all bridged patients who are due for a transfusion and initiates the request.
   * This is designed to be run automatically by a scheduler.
   */
  async triggerAutomaticBridgeRequests() {
    console.log('CRON JOB: Checking for due bridge patients...');
    try {
      // 1. Find all patients who are bridged and due for a transfusion today or in the past.
      const { rows: duePatients } = await db.query(
        `SELECT p.id, p.name, bb.id as bridge_id
         FROM patients p
         JOIN blood_bridges bb ON p.id = bb.patient_id
         WHERE 
           p.status = 'bridged' AND 
           p.last_transfusion_date IS NOT NULL AND 
           p.frequency_in_days IS NOT NULL AND
           (p.last_transfusion_date + p.frequency_in_days * INTERVAL '1 day') <= NOW() AND
           bb.active_request_id IS NULL -- IMPORTANT: Only trigger if there isn't one already active
        `
      );

      if (duePatients.length === 0) {
        console.log('CRON JOB: No patients are due for an automatic bridge request today.');
        return;
      }

      console.log(`CRON JOB: Found ${duePatients.length} patient(s) due for transfusion. Initiating requests...`);

      // 2. Loop through each due patient and call the existing requestTransfusion function.
      for (const patient of duePatients) {
        console.log(`CRON JOB: Initiating request for patient ${patient.name} (Bridge ID: ${patient.bridge_id})`);
        try {
          // We reuse the same logic that the admin dashboard button uses.
          await this.requestTransfusion(patient.bridge_id);
        } catch (error) {
          console.error(`CRON JOB: Failed to initiate request for bridge ${patient.bridge_id}. Reason: ${error.message}`);
          // In a production system, you might send an alert to an admin here.
        }
      }
    } catch (error) {
      console.error("CRITICAL ERROR in cron job triggerAutomaticBridgeRequests:", error);
    }
  }

/**
 * Finds all bridged patients who are due for a transfusion and initiates the request.
 * This is designed to be run automatically by a scheduler.
 */
async triggerAutomaticBridgeRequests() {
  console.log('CRON JOB: Checking for due bridge patients...');
  try {
    // 1. Find all patients who are bridged and due for a transfusion today or in the past.
    const { rows: duePatients } = await db.query(
      `SELECT p.id, p.name, bb.id as bridge_id
       FROM patients p
       JOIN blood_bridges bb ON p.id = bb.patient_id
       WHERE 
         p.status = 'bridged' AND 
         p.last_transfusion_date IS NOT NULL AND 
         p.frequency_in_days IS NOT NULL AND
         (p.last_transfusion_date + p.frequency_in_days * INTERVAL '1 day') <= NOW() AND
         bb.active_request_id IS NULL -- IMPORTANT: Only trigger if there isn't one already active
      `
    );

    if (duePatients.length === 0) {
      console.log('CRON JOB: No patients are due for an automatic bridge request today.');
      return;
    }

    console.log(`CRON JOB: Found ${duePatients.length} patient(s) due for transfusion. Initiating requests...`);

    // 2. Loop through each due patient and call the existing requestTransfusion function.
    for (const patient of duePatients) {
      console.log(`CRON JOB: Initiating request for patient ${patient.name} (Bridge ID: ${patient.bridge_id})`);
      try {
        // We reuse the same logic that the admin dashboard button uses.
        await this.requestTransfusion(patient.bridge_id);
      } catch (error) {
        console.error(`CRON JOB: Failed to initiate request for bridge ${patient.bridge_id}. Reason: ${error.message}`);
        // In a production system, you might send an alert to an admin here.
      }
    }
  } catch (error) {
    console.error("CRITICAL ERROR in cron job triggerAutomaticBridgeRequests:", error);
  }
}
}

export default new BridgeCoordinationService();

```

`backend/src/services/bridgeService.js`

```javascript
// backend/src/services/bridgeService.js
import db from '../config/db.js';
import { normalizePhoneNumber } from '../utils/phoneHelper.js';

class BridgeService {
  /**
   * Finds the best active bridge for a new donor to join based on city and blood group.
   * "Best" is defined as the bridge with the fewest members, to ensure balance.
   */
  async findBestBridgeForDonor(city, bloodGroup) {
    const query = `
      SELECT bb.id, bb.name FROM blood_bridges bb
      LEFT JOIN bridge_members bm ON bb.id = bm.bridge_id
      WHERE bb.city ILIKE $1 AND bb.blood_group = $2 AND bb.active = true
      GROUP BY bb.id, bb.name
      HAVING COUNT(bm.id) < 10 -- Only consider bridges that are not full
      ORDER BY COUNT(bm.id) ASC, bb.created_at ASC -- Prioritize the least full, oldest bridge
      LIMIT 1;
    `;
    const { rows: [bestBridge] } = await db.query(query, [`%${city}%`, bloodGroup]);
    return bestBridge;
  }

  /**
   * Adds a donor to the best available bridge.
   * @param {string} donorId - The UUID of the donor to add.
   */
  async addDonorToBridge(donorId) {
    try {
      const { rows: [donor] } = await db.query('SELECT city, blood_group FROM users WHERE id = $1', [donorId]);
      if (!donor) throw new Error('Donor not found.');
      
      const bridge = await this.findBestBridgeForDonor(donor.city, donor.blood_group);
      if (!bridge) {
        console.log(`No active bridge with available space found for ${donor.city}/${donor.blood_group}.`);
        return { success: true, status: 'no_bridge_found' };
      }

      await db.query(
        "INSERT INTO bridge_members(bridge_id, donor_id, position) VALUES($1, $2, (SELECT COALESCE(MAX(position), 0) + 1 FROM bridge_members WHERE bridge_id = $1)) ON CONFLICT DO NOTHING",
        [bridge.id, donorId]
      );

      console.log(`Successfully added donor ${donorId} to bridge: ${bridge.name} (${bridge.id}).`);
      return { success: true, status: 'added_to_bridge' };
    } catch (error) {
      console.error('Error adding donor to bridge:', error);
      return { success: false, error };
    }
  }

  /**
   * Handles a request from a donor to join a bridge via their phone number.
   */
  async addDonorToBridgeByPhone(donorPhone) {
    const sanitizedPhone = normalizePhoneNumber(donorPhone);
    try {
      const { rows: [donor] } = await db.query('SELECT id, name, city, blood_group FROM users WHERE phone = $1', [sanitizedPhone]);
      if (!donor) {
        return "It looks like you're not registered yet. Please register first!";
      }
     
      const { rows: [existingMember] } = await db.query('SELECT id FROM bridge_members WHERE donor_id = $1', [donor.id]);
      if (existingMember) {
        return `Thank you, ${donor.name}! You are already a valued member of a Blood Bridge.`;
      }
      const bridge = await this.findBestBridgeForDonor(donor.city, donor.blood_group);
      if (!bridge) {
        return `Thank you for your interest, ${donor.name}! We don't have a Blood Bridge matching your profile right now, but we'll notify you when one becomes available.`;
      }
      await db.query(
        "INSERT INTO bridge_members(bridge_id, donor_id, position) VALUES($1, $2, (SELECT COALESCE(MAX(position), 0) + 1 FROM bridge_members WHERE bridge_id = $1)) ON CONFLICT DO NOTHING",
        [bridge.id, donor.id]
      );
     
      return `Welcome to ${bridge.name}! You are now part of a dedicated life-saving team. ❤️`;
    } catch (error) {
      console.error('Error adding donor to bridge by phone:', error);
      return 'Sorry, we encountered an error. Please try again later.';
    }
  }

  /**
   * Populates a newly created bridge with the best-matched donors from the general pool.
   */
  async populateNewBridge(bridgeId, city, bloodGroup, pincode) {
    try {
      console.log(`Populating bridge ${bridgeId} for city: ${city}, blood group: ${bloodGroup}, pincode: ${pincode}`);
      const { rows: bestDonors } = await db.query(
        'SELECT donor_id, final_score FROM find_donors_for_bridge($1, $2, $3, $4)',
        [city, bloodGroup, pincode, 8]
      );
      
      if (!bestDonors || bestDonors.length === 0) {
        console.warn(`No donors found for bridge ${bridgeId}`);
        return { success: true, count: 0 };
      }

      const insertQueries = bestDonors.map((donor, index) =>
        db.query(
          'INSERT INTO bridge_members(bridge_id, donor_id, position) VALUES($1, $2, $3)',
          [bridgeId, donor.donor_id, index + 1]
        )
      );

      await Promise.all(insertQueries);
      console.log(`Successfully populated bridge ${bridgeId} with ${bestDonors.length} donors`);
      return { success: true, count: bestDonors.length };
    } catch (error) {
      console.error(`Error populating bridge ${bridgeId}:`, {
        error: error.message, city, bloodGroup, pincode,
      });
      throw new Error(`Failed to populate bridge: ${error.message}`);
    }
  }
}

export default new BridgeService(); 

```

`backend/src/services/donorPreferenceService.js`

```javascript
// backend/src/services/donorPreferenceService.js
import db from '../config/db.js';
import whatsappService from './whatsappService.js';

class DonorPreferenceService {
  /**
   * Sets a snooze period for a donor, pausing notifications.
   * @param {string} phone - The donor's phone number.
   * @param {object} params - Parameters from the AI, e.g., { duration: 1, unit: 'week' }.
   */
  async handleSnooze(phone, params) {
    const { duration = 15, unit = 'day' } = params; // Default to 15 days if AI provides no params
    
    try {
      const interval = `${duration} ${unit}`;
      const { rows: [user] } = await db.query(
        "UPDATE users SET snooze_until = NOW() + $1::interval WHERE phone = $2 RETURNING snooze_until",
        [interval, phone]
      );

      if (user && user.snooze_until) {
        const snoozeDate = new Date(user.snooze_until).toLocaleDateString('en-IN');
        const message = `Got it. I've paused all non-critical notifications for you until ${snoozeDate}. We'll reach out again after that. Thank you for being a donor!`;
        await whatsappService.sendTextMessage(phone, message);
      }
    } catch (error) {
      console.error(`Error setting snooze for ${phone}:`, error);
      await whatsappService.sendTextMessage(phone, "I'm sorry, I encountered an error while setting your preferences.");
    }
  }

  /**
   * Sets the Do Not Disturb (DND) status for a donor, permanently stopping notifications.
   * @param {string} phone - The donor's phone number.
   */
  async handleDnd(phone) {
    try {
      await db.query(
        "UPDATE users SET dnd_status = true, availability_status = 'unavailable' WHERE phone = $1",
        [phone]
      );
      const message = "You have been unsubscribed from all future notifications. We're sad to see you go, but we respect your decision. If you ever change your mind, just send 'Register' to sign up again.";
      await whatsappService.sendTextMessage(phone, message);
    } catch (error) {
      console.error(`Error setting DND for ${phone}:`, error);
      await whatsappService.sendTextMessage(phone, "I'm sorry, I encountered an error while updating your DND status.");
    }
  }
}

export default new DonorPreferenceService();

```

`backend/src/services/emergencyService.js`

```javascript
// backend/src/services/emergencyService.js
import db from '../config/db.js';
import whatsappService from './whatsappService.js';
import aiRouterService from './aiRouterService.js';
import mlService from './mlService.js';
import geocodingService from './geocodingService.js';
import { getDistanceInKm } from '../utils/distanceHelper.js';
import { normalizeBloodGroup } from '../utils/dataSanitizer.js';
import { normalizePhoneNumber } from '../utils/phoneHelper.js';

const VALID_BLOOD_GROUPS = ['A+', 'A-', 'B+', 'B-', 'O+', 'O-', 'AB+', 'AB-'];
const activeTimeouts = new Map();

class EmergencyService {
  async handleEmergencyRequest(userMessage, requesterPhone) {
    const sanitizedPhone = normalizePhoneNumber(requesterPhone);
    try {
      const route = await aiRouterService.routeMessageWithContext(userMessage, 'Unregistered');
      if (route && route.tool === 'handle_emergency_request' && route.params.blood_group && route.params.city) {
        console.log("AI successfully extracted details:", route.params);
        await this.createEmergencyRequest(route.params, sanitizedPhone);
      } else {
        console.log('AI could not extract necessary details. Prompting user.');
        const followupMessage = "I understand this is an emergency. To find a donor, please provide the patient's blood group (e.g., A+, O-) and the city where the hospital is located.";
        await whatsappService.sendTextMessage(sanitizedPhone, followupMessage);
      }
    } catch (error) {
      console.error('CRITICAL ERROR in handleEmergencyRequest:', error);
      await whatsappService.sendTextMessage(requesterPhone, 'We could not process your request due to a system error.');
    }
  }  

  async createEmergencyRequest(params, requesterPhone) {
    const { 
      patient_name = 'Unknown', 
      blood_group, 
      city, 
      hospital_name = 'Unknown', 
      units_needed = 1
    } = params;
    try {
      const normalizedBG = normalizeBloodGroup(blood_group);
      if (!VALID_BLOOD_GROUPS.includes(normalizedBG)) {
        const validationErrorMessage = `Sorry, "${blood_group}" is not a recognized blood group. Please use a valid one (e.g., O+, AB-).`;
        await whatsappService.sendTextMessage(requesterPhone, validationErrorMessage);
        return;
      }
      
      const coords = await geocodingService.getCoords(hospital_name, city, null).catch(err => {
        console.error("Geocoding service failed, but continuing without coordinates.", err);
        return null;
      });

      const shortCode = Math.floor(1000 + Math.random() * 9000).toString();

      const { rows: [request] } = await db.query(
        `INSERT INTO emergency_requests (patient_name, blood_group, city, hospital_name, requested_by_phone, short_code, latitude, longitude, units_needed)
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING *;`,
        [patient_name, normalizedBG, city, hospital_name, requesterPhone, shortCode, coords?.latitude, coords?.longitude, units_needed]
      );
      
      console.log(`Successfully created emergency request ID: ${request.id}`);
      await whatsappService.sendTextMessage(requesterPhone, `✅ Emergency request active! We are now running a hyperlocal search for *${patient_name}*.`);
      
      await this.findAndNotifyDonors(request);
    } catch (error) {
      console.error('CRITICAL ERROR creating emergency request in database:', error);
      await whatsappService.sendTextMessage(requesterPhone, 'We could not process your request due to a system error.');
    }
  }
  
  async findAndNotifyDonors(request) {
    const TIMEOUT_IN_MINUTES = 2;
    const { id: requestId, requested_by_phone } = request;
    
    try {
      // 1. Find all donors who have already been contacted for this request.
      const { rows: notifiedDonors } = await db.query(
        'SELECT donor_id FROM donor_responses WHERE request_id = $1',
        [requestId]
      );
      const excludedDonorIds = notifiedDonors.map(d => d.donor_id);

      // 2. Find the next best available donors.
      let topScoredDonors = await this.findAndRankGeneralDonors(request.blood_group, request.city, excludedDonorIds);

      // 3. Handle the case where no donors are left.
      if (topScoredDonors.length === 0) {
        console.warn(`Search complete for request ${requestId}: No new donors found.`);
        const alertMessage = `⚠️ We have contacted all available donors in our network for *${request.patient_name}*. This request has been flagged for admin review.`;
        await whatsappService.sendTextMessage(requested_by_phone, alertMessage);
        await db.query("INSERT INTO inbox_messages (user_phone, user_message, reason) VALUES ($1, $2, $3)", [requested_by_phone, `Donor search exhausted for patient ${request.patient_name}`, 'Donor Search Exhausted']);
        return;
      }

      // 4. Select only the single best donor from the list.
      const bestDonor = topScoredDonors[0];
      
      const notificationMessage = 
          `🚨 URGENT: A patient needs your help!\n\n` +
          `Patient: *${request.patient_name}*\n` +
          `Blood Group: *${request.blood_group}*\n` +
          `Location: ${request.hospital_name}, ${request.city}\n\n` +
          `To confirm you can donate, please reply with: *YES ${request.short_code}*\n\n` +
          `If you are unable to help, please reply "NO" so we can find another hero quickly.`;
        
      // 5. Log the attempt and send the message to the single best donor.
      await db.query(`INSERT INTO donor_responses (donor_id, request_id, response) VALUES ($1, $2, 'pending') ON CONFLICT (donor_id, request_id) DO UPDATE SET response = 'pending'`, [bestDonor.id, requestId]);
      await db.query('UPDATE users SET notifications_received = notifications_received + 1 WHERE id = $1', [bestDonor.id]);
      await whatsappService.sendTextMessage(bestDonor.phone, notificationMessage);
      
      // 6. Inform the requester and set the automatic escalation timeout.
      const adminMessage = `✅ Search ongoing... Notifying the best match: *${bestDonor.name}*. If they don't respond in ${TIMEOUT_IN_MINUTES} minutes, we will contact the next donor.`;
      await whatsappService.sendTextMessage(requested_by_phone, adminMessage);

      const timeoutId = setTimeout(() => {
        console.log(`[TIMEOUT] Donor ${bestDonor.name} did not respond for request ${requestId}. Escalating...`);
        this.findNextDonorForRequest(requestId);
      }, TIMEOUT_IN_MINUTES * 60 * 1000);

      activeTimeouts.set(requestId.toString(), timeoutId);

    } catch (error) {
      console.error(`CRITICAL ERROR in findAndNotifyDonors for request ${requestId}:`, error);
      await whatsappService.sendTextMessage(requested_by_phone, 'We encountered a system error while searching for donors. Our team has been notified.');
    }
  }

  async findNextDonorForRequest(requestId) {
    console.log(`[ESCALATION] Finding next donor batch for request ${requestId}`);
    this.clearEmergencyTimeout(requestId);
    const { rows: [requestInfo] } = await db.query(`SELECT * FROM emergency_requests WHERE id = $1`, [requestId]);
    
    if (requestInfo && requestInfo.status === 'active') {
      await this.findAndNotifyDonors(requestInfo);
    } else {
      console.warn(`[ESCALATION] Not proceeding for request ${requestId}, status is '${requestInfo ? requestInfo.status : 'NOT FOUND'}'`);
    }
  }

  async escalateRequest(requestId) {
    const BATCH_SIZE = 10;
    try {
      const { rows: [request] } = await db.query(
          'SELECT * FROM emergency_requests WHERE id = $1 AND status = \'active\'',
          [requestId]
      );
      if (!request) {
          throw new Error('Active emergency request not found.');
      }

      const { rows: notifiedDonors } = await db.query(
          'SELECT donor_id FROM donor_responses WHERE request_id = $1',
          [requestId]
      );
      const excludedDonorIds = notifiedDonors.map(d => d.donor_id);
      console.log(`Escalating request ${requestId}. Excluding ${excludedDonorIds.length} already-notified donor(s).`);
      
      const nextDonors = await this.findAndRankGeneralDonors(
          request.blood_group,
          request.city,
          excludedDonorIds
      );
      if (nextDonors.length === 0) {
          throw new Error('No additional available donors found in the network for this request.');
      }

      const batchToNotify = nextDonors.slice(0, BATCH_SIZE);
      const notificationPromises = batchToNotify.map(async (donor) => {
          try {
              const notificationMessage = `🚨 URGENT (Escalated): You are a top match for an emergency!\n\nPatient *${request.patient_name}* needs your help (${request.blood_group}).\n\nReply *YES ${request.short_code}* to help.`;
              
              await db.query(`INSERT INTO donor_responses (donor_id, request_id, response) VALUES ($1, $2, 'pending') ON CONFLICT (donor_id, request_id) DO NOTHING;`, [donor.id, requestId]);
              const result = await whatsappService.sendTextMessage(donor.phone, notificationMessage);
              
              if(result.success) {
                  await db.query('UPDATE users SET notifications_received = notifications_received + 1 WHERE id = $1', [donor.id]);
              }
          } catch (err) {
              console.error(`Failed to notify donor ${donor.id} for request ${requestId}:`, err.message);
          }
      });

      await Promise.all(notificationPromises);
      const adminMessage = `✅ Escalation successful. Notified a batch of ${batchToNotify.length} new top-ranked donors.`;
      await whatsappService.sendTextMessage(request.requested_by_phone, adminMessage);
      
      return { success: true, message: `Successfully escalated request and notified ${batchToNotify.length} new donors.` };
    } catch (error) {
      console.error(`CRITICAL ERROR during escalation for request ${requestId}:`, error);
      throw error;
    }
  }
  
  clearEmergencyTimeout(requestId) {
    if (activeTimeouts.has(requestId.toString())) {
      clearTimeout(activeTimeouts.get(requestId.toString()));
      activeTimeouts.delete(requestId.toString());
      console.log(`[TIMEOUT CLEARED] Timeout for request ${requestId} has been stopped.`);
    }
  }

  async findAndRankGeneralDonors(bloodGroup, city, excludedDonorIds = []) {
    const { rows: availableDonors } = await db.query(
      `SELECT id, name, phone, last_donation, notifications_received, donations_confirmed, streak_count, latitude, longitude
       FROM users
       WHERE user_type = 'donor' AND blood_group = $1 AND city ILIKE $2
         AND availability_status = 'available' AND dnd_status = false
         AND (snooze_until IS NULL OR snooze_until < NOW())
         AND id NOT IN (SELECT unnest($3::uuid[]))
       LIMIT 50;`,
      [normalizeBloodGroup(bloodGroup), city, excludedDonorIds]
    );
    if (!availableDonors || availableDonors.length === 0) return [];
    
    const scoringPromises = availableDonors.map(donor => mlService.scoreSingleDonor(donor));
    const results = await Promise.allSettled(scoringPromises);
    
    const scoredDonors = availableDonors.map((donor, index) => {
        const score = results[index].status === 'fulfilled' ? results[index].value.final_score : 0;
        return { ...donor, final_score: score };
    });
    
    scoredDonors.sort((a, b) => b.final_score - a.final_score);
    return scoredDonors;
  }
}

export default new EmergencyService();

```

`backend/src/services/engagementService.js`

```javascript
// backend/src/services/engagementService.js
import db from '../config/db.js';
import whatsappService from './whatsappService.js';

class EngagementService {
  /**
   * Finds donors whose 90-day cooldown period has ended and reminds them
   * that they are now eligible to donate again.
   */
  async sendEligibilityReminders() {
    console.log('CRON JOB: Running sendEligibilityReminders...');
    try {
      // 1. Find all donors who are ready to be re-activated.
      // - Their cooldown must have expired (cooldown_until <= NOW()).
      // - Their status must currently be 'unavailable' (from their last donation).
      // - They must not have opted out of all notifications (dnd_status = false).
      const { rows: eligibleDonors } = await db.query(
        `SELECT id, name, phone
         FROM users
         WHERE user_type = 'donor'
           AND availability_status = 'unavailable'
           AND dnd_status = false
           AND cooldown_until <= NOW()`
      );

      if (eligibleDonors.length === 0) {
        console.log('CRON JOB: No donors are newly eligible today.');
        return;
      }

      console.log(`CRON JOB: Found ${eligibleDonors.length} newly eligible donors. Preparing to send reminders.`);

      // 2. Prepare all the database updates.
      // We will collect all the user IDs to update their status in a single efficient query.
      const donorIdsToUpdate = eligibleDonors.map(donor => donor.id);
      const updatePromise = db.query(
        "UPDATE users SET availability_status = 'available' WHERE id = ANY($1::uuid[])",
        [donorIdsToUpdate]
      );

      // 3. Prepare all the WhatsApp messages.
      // We will send messages concurrently for maximum speed.
      const messagePromises = eligibleDonors.map(donor => {
        const message = `Hi ${donor.name}! 👋\n\nGreat news! Your 90-day waiting period is over, and you are now eligible to save a life again.\n\nYour status has been updated to "Available". Thank you for being a vital part of the BloodBridge community! ❤️`;
        return whatsappService.sendTextMessage(donor.phone, message);
      });

      // 4. Execute all promises (database updates and messages).
      // Promise.allSettled is used so that if one message fails, it doesn't stop the others.
      const results = await Promise.allSettled([updatePromise, ...messagePromises]);

      // 5. Log the results for monitoring.
      let successCount = 0;
      results.forEach((result, index) => {
        if (result.status === 'fulfilled') {
          if (index > 0) successCount++; // Don't count the DB update as a message
        } else {
          console.error(`CRON JOB: Failed to process reminder for donor ID ${donorIdsToUpdate[index - 1]}:`, result.reason);
        }
      });
      console.log(`CRON JOB: Successfully sent ${successCount} eligibility reminders.`);
      console.log(`CRON JOB: Updated ${donorIdsToUpdate.length} donors to 'available' status.`);

    } catch (error) {
      console.error('CRITICAL ERROR in cron job sendEligibilityReminders:', error);
    }
  }

  /**
   * Finds active, eligible donors who have not donated in a long time
   * and sends them a personalized re-engagement message.
   */
  async sendInactiveDonorNudges() {
    console.log('CRON JOB: Running Inactive Donor Nudge...');
    try {
      // 1. Find donors who are available but haven't donated in over 6 months (180 days).
      const { rows: inactiveDonors } = await db.query(
        `SELECT id, name, phone 
         FROM users
         WHERE 
           user_type = 'donor' AND
           availability_status = 'available' AND
           dnd_status = false AND
           (snooze_until IS NULL OR snooze_until < NOW()) AND
           (last_donation IS NULL OR last_donation < NOW() - INTERVAL '180 days')`
      );

      if (inactiveDonors.length === 0) {
        console.log('CRON JOB: No inactive donors to nudge this week.');
        return;
      }

      console.log(`CRON JOB: Found ${inactiveDonors.length} inactive donors. Sending nudges...`);
      for (const donor of inactiveDonors) {
        const nudgeMessage = `Hi ${donor.name}! We miss you. Patients in your area are still in need of heroes like you. We hope you'll consider donating again soon. Your support makes a huge difference!`;
        await whatsappService.sendTextMessage(donor.phone, nudgeMessage);
        // Add a small delay to avoid spamming the WhatsApp API
        await new Promise(resolve => setTimeout(resolve, 500));
      }
    } catch (error) {
      console.error("CRITICAL ERROR in cron job sendInactiveDonorNudges:", error);
    }
  }
}

export default new EngagementService(); 

```

`backend/src/services/faqService.js`

```javascript
// backend/src/services/faqService.js
import db from '../config/db.js';
import whatsappService from './whatsappService.js';
import mlService from './mlService.js';
import { GoogleGenerativeAI } from '@google/generative-ai'; // ✅ ADDED: Import Google AI SDK
import config from '../config/config.js'; // ✅ ADDED: Import config for API key

// ✅ ADDED: Initialize the generative model for dynamic answers
const genAI = new GoogleGenerativeAI(config.geminiApiKey);
const generativeModel = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" });

const SENSITIVE_KEYWORDS = ['problem', 'pain', 'issue', 'bad', 'reaction', 'scared', 'help me', 'confused', 'afraid'];

class FaqService {
  async handleFaq(query, phone) {
    const disclaimer = "\n\n_Disclaimer: This is automated information. For medical advice, please consult a doctor._";
    try {
      // 1. First, try the RAG system for a precise, pre-written answer.
      const ragResponse = await mlService.client.post('/generate-faq-answer', { query });

      if (ragResponse.data && ragResponse.data.source_found) {
        console.log(`RAG HIT: Found a precise answer for "${query}".`);
        await whatsappService.sendTextMessage(phone, ragResponse.data.answer + disclaimer);
        // We can stop here because we found a perfect answer.
        return;
      }

      // 2. ✅ NEW: If RAG fails, fallback to the generative model with live data.
      console.log(`RAG MISS: Falling back to generative model with live data for "${query}".`);
      
      let contextString = 'You are a helpful and compassionate assistant for BloodBridge AI. Answer the user\'s question concisely.';
      const lowerQuery = query.toLowerCase();

      // Check for keywords and inject live data into the context.
      if (lowerQuery.includes('patient') || lowerQuery.includes('support')) {
        const { rows } = await db.query("SELECT COUNT(*) as count FROM patients WHERE status = 'bridged'");
        const patientCount = rows[0].count;
        if (patientCount > 0) {
          contextString += ` IMPORTANT CONTEXT: We are currently supporting ${patientCount} long-term patients.`;
        }
      } else if (lowerQuery.includes('donor') || lowerQuery.includes('donors')) {
        const { rows } = await db.query("SELECT COUNT(*) as count FROM users WHERE user_type = 'donor' AND availability_status = 'available'");
        const donorCount = rows[0].count;
        if (donorCount > 0) {
          contextString += ` IMPORTANT CONTEXT: We have ${donorCount} active and eligible donors ready to help.`;
        }
      }
      
      // 3. Generate the dynamic answer using the context.
      const prompt = `${contextString}\n\nUser's Question: "${query}"`;
      const result = await generativeModel.generateContent(prompt);
      const response = await result.response;
      const aiText = response.text();

      await whatsappService.sendTextMessage(phone, aiText + disclaimer);

      // 4. Finally, check for sensitive keywords.
     if (SENSITIVE_KEYWORDS.some(keyword => lowerQuery.includes(keyword))) {
        console.log(`Sensitive keyword detected in "${query}". Escalating to admin inbox.`);
        await db.query( "INSERT INTO inbox_messages (user_phone, user_message, reason) VALUES ($1, $2, $3)", [phone, query, 'Sensitive Keyword Detected']);
        const escalationMessage = "It sounds like you might have a specific concern. I have notified an NGO volunteer, and they will contact you on this number shortly.";
        setTimeout(() => { whatsappService.sendTextMessage(phone, escalationMessage); }, 1500);
      }

    } catch (error) {
      console.error("Error calling FAQ service:", error.message);
      const fallbackMessage = "Thank you for your question. An NGO volunteer will get back to you shortly.";
      await whatsappService.sendTextMessage(phone, fallbackMessage);
    }
  }
}

export default new FaqService();

```

`backend/src/services/gamificationService.js`

```javascript
// backend/src/services/gamificationService.js
import db from '../config/db.js';
import whatsappService from './whatsappService.js';

const ACHIEVEMENTS = {
  FIRST_REGISTRATION: { name: 'Community Hero', points: 50, emoji: '❤️' },
  EMERGENCY_RESPONSE: { name: 'Life Saver', points: 100, emoji: '🚨' },
};

class GamificationService {
   async awardPoints(userId, event, userPhone) {
    const achievement = ACHIEVEMENTS[event];
    if (!achievement) return;

    try {
      // Add points to the user's total score.
      const { rows: [user] } = await db.query(
        "UPDATE users SET gamification_points = gamification_points + $1 WHERE id = $2 RETURNING gamification_points",
        [achievement.points, userId]
      );

      if (!user) throw new Error("User not found or update failed.");

      // Log this specific achievement in the achievements table.
      await db.query(
        "INSERT INTO achievements(user_id, badge_type, points_awarded) VALUES($1, $2, $3)",
        [userId, achievement.name, achievement.points]
      );

      // Send a notification to the user.
      const notification = `🏆 Achievement Unlocked! 🏆\n\nYou've earned the *${achievement.name}* badge ${achievement.emoji} and received *${achievement.points} points*!\n\nYour new total is *${user.gamification_points} points*.`;
      await whatsappService.sendTextMessage(userPhone, notification);
    } catch (error) {
      console.error(`Error in awardPoints for user ${userId}:`, error);
    }
  } 

  /**
   * ✅ UPDATED: Fetches and formats a complete status report for a donor,
   * including their availability status.
   */
  async getDonorStatus(phone) {
    try {
      // Query now includes availability_status and cooldown_until
      const { rows: [user] } = await db.query(
        'SELECT id, name, gamification_points, last_donation, availability_status, cooldown_until FROM users WHERE phone = $1',
        [phone]
      );
      if (!user) {
        return "It looks like you're not registered as a donor yet. Reply with 'I want to register' to get started!";
      }
      
      const { rows: [rankData] } = await db.query(
        'SELECT count(*) FROM users WHERE user_type = \'donor\' AND gamification_points > $1',
        [user.gamification_points]
      );
      const rank = parseInt(rankData.count) + 1;

      // Format the availability status for the user
      let availabilityMessage = 'Available ✅';
      if (user.availability_status === 'unavailable' && user.cooldown_until) {
        const cooldownDate = new Date(user.cooldown_until).toLocaleDateString('en-IN');
        availabilityMessage = `On Cooldown until ${cooldownDate} ⏳`;
      } else if (user.availability_status !== 'available') {
        availabilityMessage = 'Not Available ❌';
      }

      let statusMessage = `*📊 Your Donor Dashboard 📊*\n\n`;
      statusMessage += `*Name:* ${user.name}\n`;
      statusMessage += `*Status:* ${availabilityMessage}\n`; // Add the status line
      statusMessage += `*Points:* ${user.gamification_points} 🏅\n`;
      statusMessage += `*Current Rank:* #${rank} of all our heroes\n`;
      statusMessage += `*Last Donation:* ${user.last_donation ? new Date(user.last_donation).toLocaleDateString('en-IN') : 'N/A'}`;
      
      return statusMessage;
    } catch (error) {
      console.error(`Error in getDonorStatus for phone ${phone}:`, error);
      return "Sorry, I couldn't fetch your status at this time. Please try again later.";
    }
  }

  /**
   * ✅ UPDATED: Fetches the Top 5 donors AND the requesting user's rank.
   */
  async getLeaderboardMessage(phone) {
    try {
      // Query 1: Get the Top 5 donors
      const { rows: topDonors } = await db.query(
        `SELECT name, gamification_points FROM users 
         WHERE user_type = 'donor' AND gamification_points > 0
         ORDER BY gamification_points DESC LIMIT 5`
      );

      if (topDonors.length === 0) {
        return "The leaderboard is empty right now, but the next donation could change that!";
      }

      // Query 2: Get the current user's rank
      const { rows: [userRankData] } = await db.query(
        `SELECT count(*) FROM users WHERE user_type = 'donor' AND gamification_points > (
           SELECT gamification_points FROM users WHERE phone = $1
         )`,
        [phone]
      );
      const userRank = parseInt(userRankData.count) + 1;

      // Format the message
      let leaderboardMessage = "🏆 *Top 5 Blood Warriors* 🏆\n\n";
      const medals = ['🥇', '🥈', '🥉', '4.', '5.'];
      topDonors.forEach((donor, index) => {
        leaderboardMessage += `${medals[index]} *${donor.name}* (${donor.gamification_points} points)\n`;
      });
      leaderboardMessage += `\n*Your Rank:* #${userRank}`;

      return leaderboardMessage;
    } catch (error) {
      console.error('Error fetching leaderboard for chatbot:', error);
      return "Sorry, I couldn't fetch the leaderboard right now.";
    }
  }
}

export default new GamificationService();

```

`backend/src/services/geocodingService.js`

```javascript
// backend/src/services/geocodingService.js
import axios from 'axios';

class GeocodingService {
    async getCoords(address, city, pincode) {
        if (!address && !pincode) return null;
        const query = `${address || ''}, ${city || ''}, ${pincode || ''}`;
        const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}`;
        try {
            const response = await axios.get(url, {
                headers: { 'User-Agent': 'BloodBridgeAI/1.0 (tech@bloodbridge.org)' }
            });
            if (response.data && response.data.length > 0) {
                const { lat, lon } = response.data[0];
                return { latitude: parseFloat(lat), longitude: parseFloat(lon) };
            }
            return null;
        } catch (error) {
            console.error('Error calling Geocoding API:', error.message);
            return null;
        }
    }
}

export default new GeocodingService();

```

`backend/src/services/loggingService.js`

```javascript
// backend/src/services/loggingService.js
import db from '../config/db.js';

class LoggingService {
  /**
   * Logs an incoming message and now includes the user's phone number directly.
   */
  async logIncoming(phone, message) {
    try {
      // Find the user's ID to maintain the relationship, but also store the phone number.
      const { rows: [user] } = await db.query(
        'SELECT id FROM users WHERE phone = $1',
        [phone]
      );
      const userId = user ? user.id : null;

      // Insert the incoming message, user_id, and the user_phone into the table.
      await db.query(
        'INSERT INTO conversations (user_id, user_phone, message) VALUES ($1, $2, $3)',
        [userId, phone, message]
      );
    } catch (error) {
      console.error('Error logging incoming message to DB:', error);
    }
  }

  /**
   * Logs an outgoing message by finding the last message from a specific phone number.
   */
  async logOutgoing(phone, response) {
    try {
      // Find the last conversation from this user's phone number that doesn't have a response yet
      // and update it with the bot's reply. This is more direct than looking up the user ID first.
      await db.query(
        `UPDATE conversations 
         SET response = $1 
         WHERE id = (
           SELECT id FROM conversations 
           WHERE user_phone = $2 AND response IS NULL 
           ORDER BY created_at DESC 
           LIMIT 1
         )`,
        [response, phone]
      );
    } catch (error) {
      console.error('Error logging outgoing message to DB:', error);
    }
  }
}

export default new LoggingService();

```

`backend/src/services/mlService.js`

```javascript
// backend/src/services/mlService.js
import axios from 'axios';
import db from '../config/db.js';
import config from '../config/config.js';

const CACHE_DURATION_HOURS = 6;

class MLService {
    constructor() {
        this.client = axios.create({
            baseURL: config.mlServiceUrl,
            timeout: 8000,
        });
    }

    /**
     * Scores a single donor, using a cached score if available and not stale.
     */
    async scoreSingleDonor(donor) {
        // Check for a fresh score in the cache first.
        const { rows: [cachedData] } = await db.query(
            "SELECT last_ml_score, score_cached_at FROM users WHERE id = $1",
            [donor.id]
        );

        if (cachedData && cachedData.last_ml_score && cachedData.score_cached_at) {
            const cacheAgeHours = (new Date() - new Date(cachedData.score_cached_at)) / (1000 * 60 * 60);
            if (cacheAgeHours < CACHE_DURATION_HOURS) {
                console.log(`CACHE HIT: Using cached score for donor ${donor.id}`);
                return { final_score: cachedData.last_ml_score };
            }
        }

        console.log(`CACHE MISS: Calling ML service for donor ${donor.id}`);
        try {
            // If no fresh cache, call the Python ML service.
            const response = await this.client.post('/score-donor', {
                donor_id: donor.id,
                last_donation_date: donor.last_donation,
                streak_count: donor.streak_count || 0,
                notifications_received: donor.notifications_received || 0,
                donations_confirmed: donor.donations_confirmed || 0
            });
            
            const newScore = response.data.final_score;

            // Update the cache in the database with the new score.
            db.query(
                "UPDATE users SET last_ml_score = $1, score_cached_at = NOW() WHERE id = $2",
                [newScore, donor.id]
            ).catch(err => console.error(`Failed to cache ML score for donor ${donor.id}:`, err));

            return { final_score: newScore };

        } catch (error) {
            console.error(`🔴 ML Service Error for donor ${donor.id}:`, error.message);
            throw error; // Re-throw the error to be handled by the calling service.
        }
    }
}

export default new MLService();

```

`backend/src/services/patientService.js`

```javascript
// backend/src/services/patientService.js
import db from '../config/db.js';
import whatsappService from './whatsappService.js';
import { normalizeBloodGroup } from '../utils/dataSanitizer.js';
import { normalizePhoneNumber } from '../utils/phoneHelper.js';

class PatientService {
  /**
   * Handles the initial message from a potential patient.
   * Creates a pending record and asks them to opt-in by replying "APPLY".
   */
  async handleNewPatient(params, phone) {
    const sanitizedPhone = normalizePhoneNumber(phone);
    try {
      const { rows: [existingPatient] } = await db.query("SELECT id FROM patients WHERE phone = $1", [sanitizedPhone]);
      if (existingPatient) {
        await whatsappService.sendTextMessage(sanitizedPhone, `Welcome back! Our records show this number is already associated with a patient. An admin will be in touch shortly.`);
        return;
      }

      const { patient_name, city, blood_group } = params;

      // PATH 1: AI extracted details for a one-shot registration (Passes REG-04)
      if (patient_name && city && blood_group) {
        const normalizedBG = normalizeBloodGroup(blood_group);
        await db.query(
          `INSERT INTO patients (name, phone, blood_group, city, status)
           VALUES ($1, $2, $3, $4, 'pending_verification')`,
          [patient_name, sanitizedPhone, normalizedBG, city]
        );
        const finalMessage = `Thank you! We have received the initial information for *${patient_name}*.\n\nAn admin from our team has been notified and will contact you on this number to verify the details.`;
        await whatsappService.sendTextMessage(sanitizedPhone, finalMessage);
      } 
      // PATH 2: Details are missing, fall back to the conversational flow.
      else {
        await db.query(
          `INSERT INTO patients (name, phone, blood_group, city, status)
           VALUES ('Awaiting Input', $1, 'N/A', 'N/A', 'pending_opt_in') ON CONFLICT (phone) DO NOTHING;`,
          [sanitizedPhone]
        );
        await whatsappService.sendTextMessage(sanitizedPhone, `Thank you for reaching out. To begin your application for our Blood Bridge support program, please reply with: *APPLY*`);
      }
    } catch (error) {
      console.error('Error in handleNewPatient:', error);
      await whatsappService.sendTextMessage(sanitizedPhone, 'Sorry, we encountered an error logging your request.');
    }
  }
  
  
  /**
   * Starts the conversational form after the user replies "APPLY".
   */
  async startApplication(phone) {
      const { rows: [patient] } = await db.query("SELECT id FROM patients WHERE phone = $1 AND status = 'pending_opt_in'", [phone]);
      if (!patient) return false;

      await db.query("UPDATE patients SET status = 'pending_details' WHERE id = $1", [patient.id]);
      await this.continueOnboarding(patient.id, phone);
      return true;
  }

  /**
   * The "state machine" that asks the next question based on what info is missing.
   */
  async continueOnboarding(patientId, phone) {
    const { rows: [patient] } = await db.query("SELECT * FROM patients WHERE id = $1", [patientId]);
    if (!patient) return;

    if (patient.name === 'Awaiting Input') {
      await whatsappService.sendTextMessage(phone, "Great! Let's begin.\n\nFirst, what is the patient's full name?");
      return;
    }
    if (patient.blood_group === 'N/A') {
      await whatsappService.sendTextMessage(phone, `Thank you. What is ${patient.name}'s blood group? (e.g., O+, AB-)`);
      return;
    }
    if (patient.city === 'N/A') {
      await whatsappService.sendTextMessage(phone, `Got it. In which city does the patient receive treatment?`);
      return;
    }

    // All details are collected.
    await db.query("UPDATE patients SET status = 'pending_verification' WHERE id = $1", [patientId]);
    const finalMessage = `Thank you! We have all the initial information we need for *${patient.name}*.\n\nAn admin has been notified and will contact you on this number to verify the details.`;
    await whatsappService.sendTextMessage(phone, finalMessage);
  }

  /**
   * Processes a user's reply during the conversational form.
   */
  async processOnboardingReply(message, phone) {
    const { rows: [patient] } = await db.query("SELECT * FROM patients WHERE phone = $1 AND status = 'pending_details'", [phone]);
    if (!patient) return false;

    let columnToUpdate = null;
    let valueToUpdate = message;
    
    if (patient.name === 'Awaiting Input') columnToUpdate = 'name';
    else if (patient.blood_group === 'N/A') {
      columnToUpdate = 'blood_group';
      valueToUpdate = normalizeBloodGroup(message);
    } else if (patient.city === 'N/A') columnToUpdate = 'city';
    
    if (columnToUpdate) {
        await db.query(`UPDATE patients SET ${columnToUpdate} = $1 WHERE id = $2`, [valueToUpdate, patient.id]);
        
        // Ask the next question after a short delay
        setTimeout(() => { this.continueOnboarding(patient.id, phone); }, 500);
        return true;
    }
    return false;
  }
}

export default new PatientService();

```

`backend/src/services/registrationService.js`

```javascript
// backend/src/services/registrationService.js
import db from '../config/db.js';
import whatsappService from './whatsappService.js';
import gamificationService from './gamificationService.js';
import { normalizePhoneNumber } from '../utils/phoneHelper.js';
import { normalizeBloodGroup } from '../utils/dataSanitizer.js';

class RegistrationService {
  /**
   * ✅ REWRITTEN: A single, intelligent function to handle all donor registration.
   */
    async handleNewDonor(params, phone) {
    const sanitizedPhone = normalizePhoneNumber(phone);
    try {
      const { rows: [existingUser] } = await db.query(
        "SELECT id, name, registration_status FROM users WHERE phone = $1", 
        [sanitizedPhone]
      );

      if (existingUser && existingUser.registration_status === 'completed') {
        await whatsappService.sendTextMessage(sanitizedPhone, `Welcome back, ${existingUser.name}! You are already registered.`);
        return;
      }

      const { name, city, blood_group } = params;

      // CASE 1: The AI successfully extracted the details from the user's message.
      if (name && name !== 'Unknown' && city && city !== 'Unknown' && blood_group && blood_group !== 'Unknown') {
        const normalizedBG = normalizeBloodGroup(blood_group);
        
        const { rows: [newUser] } = await db.query(
          `INSERT INTO users(name, city, blood_group, phone, user_type, registration_status, role)
           VALUES($1, $2, $3, $4, 'donor', 'completed', 'Emergency Donor')
           ON CONFLICT (phone) DO UPDATE SET 
             name = EXCLUDED.name, city = EXCLUDED.city, blood_group = EXCLUDED.blood_group, 
             registration_status = 'completed', role = 'Emergency Donor'
           RETURNING *;`,
          [name.trim(), city.trim(), normalizedBG, sanitizedPhone]
        );

        const successMessage = `✅ Registration Complete!\n\nWelcome, ${newUser.name}! You are now a registered Blood Warrior in ${newUser.city}.`;
        await whatsappService.sendTextMessage(sanitizedPhone, successMessage);
        await gamificationService.awardPoints(newUser.id, 'FIRST_REGISTRATION', sanitizedPhone);

        // ✅ NEW LOGIC: Send the interactive prompt to join a bridge.
        const bridgeQuestion = `Would you like to join a "Blood Bridge"?\n\nThis is a dedicated group of donors who support a specific patient with regular transfusions.`;
        const buttons = [
            { id: `join_bridge_${newUser.id}`, title: "Yes, sign me up!" },
            { id: `decline_bridge_${newUser.id}`, title: "Maybe later" }
        ];
        
        // Use a small delay so messages arrive in the correct order
        setTimeout(() => {
            whatsappService.sendInteractiveMessage(sanitizedPhone, bridgeQuestion, buttons);
        }, 1500); // 1.5 second delay

        return;
      }

      // CASE 2: The AI determined the user wants to register but couldn't find the details.
      const followupMessage = 
        "Great! To get you registered as a donor, please reply with your Name, City, and Blood Group.";
      
      await whatsappService.sendTextMessage(sanitizedPhone, followupMessage);

    } catch (error) {
      console.error('Critical error in handleNewDonor:', error);
      await whatsappService.sendTextMessage(sanitizedPhone, 'We encountered an error during registration.');
    }
  }
}

export default new RegistrationService();

```

`backend/src/services/responseService.js`

```javascript
// backend/src/services/responseService.js
import db from '../config/db.js';
import whatsappService from './whatsappService.js';
import { generateOTP } from '../utils/otpHelper.js';
import gamificationService from './gamificationService.js';
import bridgeService from './bridgeService.js';
import BridgeCoordinationService from './bridgeCoordinationService.js';
import emergencyService from './emergencyService.js';

class ResponseService {
    /**
     * Handles the donor's initial reply (e.g., "YES 1234").
     * It validates the code and sends back a 6-digit OTP to verify.
     */
    async handleDonorReplyWithShortCode(donorPhone, shortCode) {
        try {
            const { rows: [request] } = await db.query(`SELECT id FROM emergency_requests WHERE short_code = $1 AND status = 'active'`, [shortCode]);
            if (!request) {
                await whatsappService.sendTextMessage(donorPhone, `Sorry, we couldn't find an active request with code ${shortCode}. It may have been fulfilled.`);
                return;
            }

            const { rows: [user] } = await db.query(`SELECT id FROM users WHERE phone = $1`, [donorPhone]);
            if (!user) {
                await whatsappService.sendTextMessage(donorPhone, "We couldn't find your registration. Please register first.");
                return;
            }

            const otp = generateOTP();
            await db.query(
                `INSERT INTO donor_responses (donor_id, request_id, response, otp, otp_expires_at)
                 VALUES ($1, $2, 'pending', $3, NOW() + INTERVAL '10 minutes')
                 ON CONFLICT (donor_id, request_id) DO UPDATE SET response = 'pending', otp = $3, otp_expires_at = NOW() + INTERVAL '10 minutes';`,
                [user.id, request.id, otp]
            );

            const otpMessage = `Thank you for your quick response! To finalize your confirmation, please reply with *only* the following 6-digit code:\n\n*${otp}*`;
            await whatsappService.sendTextMessage(donorPhone, otpMessage);
        } catch (error) {
            console.error('Error in handleDonorReplyWithShortCode:', error);
            await whatsappService.sendTextMessage(donorPhone, "There was a system error processing your reply.");
        }
    }

    /**
     * Verifies the 6-digit OTP and finalizes the donation confirmation.
     * This function uses a database transaction to ensure all updates succeed or none do.
     */

      async handleSimpleDecline(donorPhone) {
    try {
      const { rows: [user] } = await db.query('SELECT id FROM users WHERE phone = $1', [donorPhone]);
      if (!user) return; // User not registered, do nothing.

      // Find the last active request this donor was notified for.
      const { rows: [lastRequest] } = await db.query(
        `SELECT r.id FROM emergency_requests r 
         JOIN donor_responses dr ON r.id = dr.request_id
         WHERE dr.donor_id = $1 AND r.status = 'active' AND dr.response = 'pending'
         ORDER BY dr.created_at DESC LIMIT 1;`,
        [user.id]
      );
      
      if (lastRequest) {
        // Mark their response as 'declined'.
        await db.query(
          "UPDATE donor_responses SET response = 'declined' WHERE donor_id = $1 AND request_id = $2",
          [user.id, lastRequest.id]
        );
        
        await whatsappService.sendTextMessage(donorPhone, "Thank you for letting us know. We will contact the next available donor immediately.");
        
        // Immediately trigger the escalation to the next batch.
        emergencyService.findNextDonorForRequest(lastRequest.id);
      } else {
        await whatsappService.sendTextMessage(donorPhone, "Thank you for your response. There are no active requests pending for you at this moment.");
      }
    } catch (error) {
      console.error("Error handling simple decline:", error);
    }
  }
    // In responseService.js
async verifyOTPAndConfirm(donorPhone, otp) {
    const client = await db.pool.connect();
    try {
        await client.query('BEGIN');

        const { rows: [response] } = await client.query(
            // Add request_type and bridge_id to the SELECT statement
            `SELECT dr.id, dr.request_id, u.name as donor_name, u.id as donor_id, 
                    er.patient_name, er.requested_by_phone, er.request_type, er.bridge_id
             FROM donor_responses dr JOIN users u ON dr.donor_id = u.id JOIN emergency_requests er ON dr.request_id = er.id
             WHERE u.phone = $1 AND dr.otp = $2 AND dr.otp_expires_at > NOW() AND dr.response = 'pending' FOR UPDATE;`,
            [donorPhone, otp]
        );

        if (!response) {
            await whatsappService.sendTextMessage(donorPhone, "Invalid or expired OTP. Please try the 'YES [code]' step again.");
            await client.query('ROLLBACK');
            return;
        }

        // Perform all database updates
        await client.query(`UPDATE users SET last_donation = NOW(), availability_status = 'unavailable', cooldown_until = NOW() + INTERVAL '90 days', donations_confirmed = donations_confirmed + 1, streak_count = streak_count + 1 WHERE id = $1`, [response.donor_id]);
        await client.query("UPDATE donor_responses SET response = 'accepted', confirmed_at = NOW(), otp = NULL WHERE id = $1", [response.id]);
        await client.query("UPDATE emergency_requests SET status = 'fulfilled' WHERE id = $1", [response.request_id]);
        
        // --- NEW LOGIC: ROTATE THE BRIDGE IF APPLICABLE ---
        // We pass the active transaction client to the rotation function
        if (response.request_type === 'bridge' && response.bridge_id) {
            await bridgeCoordinationService.rotateBridge(response.bridge_id, client);
        }
        // --- END NEW LOGIC ---

        await client.query('COMMIT');

        // Send confirmations and award points
        const donorConfirmationMessage = `✅ Confirmed! Thank you, ${response.donor_name}!\n\nYour donation for *${response.patient_name}* is confirmed. Please coordinate with the hospital. You are a true hero!`;
        await whatsappService.sendTextMessage(donorPhone, donorConfirmationMessage);

        if (response.requested_by_phone && response.requested_by_phone !== 'system') {
            const requesterUpdate = `✅ Good News! A donor has been confirmed for your request for *${response.patient_name}*.`;
            await whatsappService.sendTextMessage(response.requested_by_phone, requesterUpdate);
        }
        gamificationService.awardPoints(response.donor_id, 'EMERGENCY_RESPONSE', donorPhone);

    } catch (error) {
        await client.query('ROLLBACK');
        console.error("Error verifying OTP:", error);
        await whatsappService.sendTextMessage(donorPhone, "A system error occurred during OTP verification.");
    } finally {
        client.release();
    }
}
}

export default new ResponseService();

```

`backend/src/services/schedulerService.js`

```javascript
// backend/src/services/schedulerService.js
import cron from 'node-cron';
// ✅ FIX: Import the already-created INSTANCES of the services
import engagementService from './engagementService.js';
import bridgeCoordinationService from './bridgeCoordinationService.js';

// ✅ FIX: Use the imported instances directly in these functions
export const triggerEligibilityReminders = () => {
  console.log('MANUAL TRIGGER: Running eligibility reminders...');
  return engagementService.sendEligibilityReminders();
};

export const triggerAutomaticBridgeRequests = () => {
  console.log('MANUAL TRIGGER: Running automatic bridge requests...');
  return bridgeCoordinationService.triggerAutomaticBridgeRequests();
};

export const triggerInactiveDonorNudges = () => {
  console.log('MANUAL TRIGGER: Running inactive donor nudges...');
  return engagementService.sendInactiveDonorNudges();
};

class SchedulerService {
  start() {
    console.log('🕒 Cron job for eligibility reminders scheduled to run every day at 9:00 AM.');
    cron.schedule('0 9 * * *', triggerEligibilityReminders, { timezone: "Asia/Kolkata" });
    
    console.log('🕒 Cron job for automatic bridge requests scheduled to run every day at 8:00 AM.');
    cron.schedule('0 8 * * *', triggerAutomaticBridgeRequests, { timezone: "Asia/Kolkata" });
    
    console.log('🕒 Cron job for inactive donor nudges scheduled to run every Sunday at 10:00 AM.');
    cron.schedule('0 10 * * 0', triggerInactiveDonorNudges, { timezone: "Asia/Kolkata" });
  }
}

export const Scheduler = new SchedulerService();

```

`backend/src/services/whatsappService.js`

```javascript
// backend/src/services/whatsappService.js
import axios from 'axios';
import config from '../config/config.js';
import loggingService from './loggingService.js';

class WhatsAppService {
  constructor() {
    this.token = config.whatsappToken;
    this.phoneNumberId = config.whatsappPhoneNumberId;
    if (!this.token || !this.phoneNumberId) {
      console.warn('WhatsApp token or Phone Number ID are missing. Messages will not be sent.');
    }

    this.client = axios.create({
      baseURL: `https://graph.facebook.com/v18.0/${this.phoneNumberId}`,
      headers: {
        'Authorization': `Bearer ${this.token}`,
        'Content-Type': 'application/json'
      }
    });
  }
  async sendTextMessage(to, text) {
    if (!this.token) return { success: false, error: "WhatsApp service not configured." };

    const payload = {
      messaging_product: 'whatsapp',
      to: to,
      type: 'text',
      text: { body: text }
    };

    try {
      const response = await this.client.post('/messages', payload);
      
      // ✅ MODIFIED LINE: This now prints the message content to the console.
      console.log(`✅ Message sent to ${to}: "${text}"`);
      
      await loggingService.logOutgoing(to, text);
      return { success: true, data: response.data };
    } catch (error) {
      console.error(`🔴 FAILED to send message to ${to}.`);
      if (error.response) {
        console.error(`Error Details: ${error.response.data.error?.message}`);
      }
      return { success: false, error: error.message };
    }
  }

    /**
   * ✅ NEW FUNCTION
   * Sends an interactive message with reply buttons.
   * @param {string} to - The recipient's phone number.
   * @param {string} text - The message body.
   * @param {Array<object>} buttons - Array of button objects, e.g., [{ id: '1', title: 'Yes' }]
   */
  async sendInteractiveMessage(to, text, buttons) {
    if (!this.token) return { success: false, error: "WhatsApp service not configured." };

    const payload = {
      messaging_product: 'whatsapp',
      to: to,
      type: 'interactive',
      interactive: {
        type: 'button',
        body: { text: text },
        action: {
          buttons: buttons.map(btn => ({
            type: 'reply',
            reply: { id: btn.id, title: btn.title }
          }))
        }
      }
    };
    
    try {
      const response = await this.client.post('/messages', payload);
      console.log(`✅ Interactive message sent to ${to}: "${text}"`);
      await loggingService.logOutgoing(to, text); // Also log this message
      return { success: true, data: response.data };
    } catch (error) {
      console.error(`🔴 FAILED to send interactive message to ${to}.`);
      if (error.response) {
        console.error(`Error Details: ${error.response.data.error?.message}`);
      }
      return { success: false, error: error.message };
    }
  }

}

export default new WhatsAppService();

```

`backend/src/utils/dataSanitizer.js`

```javascript
// backend/src/utils/dataSanitizer.js
export const normalizeBloodGroup = (group) => {
  if (!group) return 'Unknown';
  
  // ✅ ADD THIS CHECK: Return 'Unknown' immediately if that's the input.
  if (group.toUpperCase() === 'UNKNOWN') {
    return 'Unknown';
  }

  const upperGroup = group.toUpperCase();
  let normalized = upperGroup.replace(/\s/g, '').replace('POSITIVE', '+').replace('NEGATIVE', '-');
  if (normalized.endsWith('POS')) normalized = normalized.replace('POS', '+');
  if (normalized.endsWith('NEG')) normalized = normalized.replace('NEG', '-');
  return normalized.slice(0, 5);
};

```

`backend/src/utils/distanceHelper.js`

```javascript
// backend/src/utils/distanceHelper.js
/**
 * Calculates distance between two lat/lng points in km using the Haversine formula.
 */
export const getDistanceInKm = (lat1, lon1, lat2, lon2) => {
    if ((lat1 == lat2) && (lon1 == lon2)) {
        return 0;
    }
    const R = 6371; // Radius of the earth in km
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a =
        0.5 - Math.cos(dLat) / 2 +
        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
        (1 - Math.cos(dLon)) / 2;
    return R * 2 * Math.asin(Math.sqrt(a));
};

```

`backend/src/utils/languageHelper.js`

```javascript
// backend/src/utils/languageHelper.js
import { franc } from 'franc';

// This utility uses a lightweight library to guess the language of a message.
export async function detectLanguage(text) {
  try {
    // franc returns a 3-letter ISO 639-3 code. 'und' means undetermined.
    const langCode = franc(text);
    if (langCode === 'und') {
      return null; // Could not determine language
    }
    // Map common 3-letter codes to 2-letter codes for simplicity
    const langMap = {
        'eng': 'en',
        'hin': 'hi', // Hindi
        'tel': 'te'  // Telugu
    };
    return langMap[langCode] || null;
  } catch (error) {
    console.error("Language detection error:", error);
    return null;
  }
}

```

`backend/src/utils/otpHelper.js`

```javascript
// backend/src/utils/otpHelper.js

/**
 * Generates a 4-digit numeric code for donors to reply with.
 * @returns {string} A 4-digit string.
 */
export const generateShortCode = () => {
  return Math.floor(1000 + Math.random() * 9000).toString();
};

/**
 * Generates a 6-digit numeric OTP for final confirmation.
 * @returns {string} A 6-digit string.
 */
export const generateOTP = () => {
  return Math.floor(100000 + Math.random() * 900000).toString();
};

```

`backend/src/utils/phoneHelper.js`

```javascript
// backend/src/utils/phoneHelper.js
export const normalizePhoneNumber = (phone) => {
  if (!phone || typeof phone !== 'string') return null;
  let digits = phone.replace(/\D/g, '');
  if (digits.startsWith('91') && digits.length === 12) {
    return `+${digits}`;
  } else if (digits.length === 10) {
    return `+91${digits}`;
  }
  return `+${digits}`;
};

```

`backend/src/utils/translationService.js`

```javascript
// backend/src/services/translationService.js
// In a real application, this would connect to a service like Google Translate.
// For this project, we are mocking the translation for a few specific phrases.
class TranslationService {
  async translateToEnglish(text) {
    if (text.includes("कैसे पंजीकरण") || text.includes("रक्तदान कैसे करें")) {
      console.log('Translation Mock: Detected Hindi registration query.');
      return "How can I register to donate blood?";
    }
    if (text.includes("నమోదు") || text.includes("ఎలా నమోదు")) {
        console.log('Translation Mock: Detected Telugu registration query.');
        return "How can I register to donate blood?";
    }
    // If no match is found, return the original text.
    return text;
  }
}

export default new TranslationService();

```

`code.txt`

```
`backend/.env`

```
# ----------------------------------
# SERVER CONFIGURATION
# ----------------------------------
PORT=3001

# ----------------------------------
# SECURITY
# ----------------------------------
# Generate a new random string from https://www.uuidgenerator.net/ and paste it here
JWT_SECRET="eb4db4a414678902613083784a04ec9de45570856d8ced1dbe6fdd4a545ff715"

# ----------------------------------
# DATABASE (CONNECTION POOLER)
# ----------------------------------
# Replace the ENTIRE line below with your Connection Pooler URI from Supabase
DATABASE_URL="postgresql://postgres.fapoilusnezdvfmbbxzr:RP6eThZoJhsCrxcH@aws-1-ap-south-1.pooler.supabase.com:6543/postgres"

# ----------------------------------
# THIRD-PARTY APIs
# ----------------------------------
# Paste your Gemini API key from Google AI Studio
GEMINI_API_KEY="AIzaSyCn1xTJRYjOH_Gl3hg5sOW0P9PUX2Ug76M"

# For the local Python service
ML_SERVICE_URL="http://localhost:8000"

# ----------------------------------
# WHATSAPP (FROM YOUR META APP)
# ----------------------------------
# # Paste your own credentials from your Meta for Developers App
# WHATSAPP_TOKEN="EAAY5A1aZB96obPX23B4JYBOvCLcGmQZBYUa5KCkZD"
# WHATSAPP_PHONE_NUMBER_ID="72954882"
# WHATSAPP_APP_SECRET="e9422b0185dc6"
# WHATSAPP_VERIFY_TOKEN="inquilab_bloodai-123-2025-hackathon"
# IMPORTANT: You MUST refresh this token from the Meta dashboard
WHATSAPP_TOKEN=EAAKgGM4v4XIBPZAWub733l9jxOBKl8XjdBzb88mS92kSY5OG0pmnmVFOOKAjhwK62PCJL0APqKkfNC3sRiAM5yCr2GXiturGhb60f4y4EhhAcjFQX7XrMLFjEofCOrCbFMpxXdED2b4uYAZCHZA5ZANsW9rLgswrtZBPVVhVVuIgI3WKjjJztL4PktUh3hy6gi4DXRz7YPCc5ipF8FbrQOghv6otlyrOtkVjQPkhPCMhiGX4ZD
WHATSAPP_PHONE_NUMBER_ID=767647326428922
WHATSAPP_BUSINESS_ACCOUNT_ID=761863289795347
WHATSAPP_APP_SECRET=a95b9edb36567664fbf7c9779e154021
WHATSAPP_VERIFY_TOKEN=bloodbridge-hackathon-2025-secret

# ----------------------------------
# DEMO & ADMIN
# ----------------------------------
ADMIN_DEMO_PHONE="+918000000000"
DEMO_VERIFIED_PHONE_NUMBERS="+917075899966"

```

`backend/server.js`

```javascript
// // backend/server.js

// // Import required dependencies
// import express from 'express'; // Express framework for building the server
// import cors from 'cors'; // Middleware for enabling CORS
// import morgan from 'morgan'; // Middleware for request logging
// import config from './src/config/config.js'; // Configuration settings
// import adminRoutes from './src/routes/adminRoutes.js'; // Admin dashboard routes
// import { verifyWebhook } from './src/middleware/verifyWebhook.js'; // Webhook signature verification
// import webhookController from './src/controllers/webhookController.js'; // Webhook handling controller
// import BridgeCoordinationService from './src/services/bridgeCoordinationService.js';

// // --- PHASE 1: PREDICTIVE ENGAGEMENT ---
// import cron from 'node-cron'; // Import the cron scheduler library
// import EngagementService from './src/services/engagementService.js'; // Import our new engagement service
// // --- END PHASE 1 ---

// // Initialize Express app
// const app = express();
// const PORT = process.env.PORT || 3001; // Use environment PORT or default to 3001

// // Middleware setup
// app.use(cors()); // Enable CORS for all routes
// app.use(morgan('tiny')); // Log HTTP requests in 'tiny' format

// // API and Health Routes
// app.get('/health', (req, res) => {
//   // Health check endpoint to verify server status
//   res.status(200).json({ status: 'healthy', now: new Date().toISOString() });
// });

// // Admin routes with JSON body parser
// app.use('/api/admin', express.json({ limit: '1mb' }), adminRoutes);

// // Webhook Routes
// app.get('/webhook', webhookController.verifyToken); // Handle Meta webhook verification (GET)

// app.post(
//   '/webhook',
//   express.json({
//     verify: (req, res, buf) => {
// req.rawBody = buf.toString();     }
//   }),
//   verifyWebhook, // This middleware will now use req.rawBody
//   webhookController.handleMessage // This controller will use the parsed req.body
// );

// // Global Error Handling
// app.use((err, req, res, next) => {
//   // Handle errors from middleware or routes
//   console.error('[ERROR HANDLER]', err.stack);
//   res.status(500).json({ message: 'An internal server error occurred.' });
// });

// // Handle unhandled promise rejections
// process.on('unhandledRejection', (reason) => {
//   console.error('Unhandled Rejection:', reason);
// });

// // Handle uncaught exceptions
// process.on('uncaughtException', (err) => {
//   console.error('Uncaught Exception:', err);
// });


// // --- PHASE 1: PREDICTIVE ENGAGEMENT SCHEDULER ---
// // This task is scheduled to run at 9:00 AM every day in the Asia/Kolkata timezone.
// // It will automatically find donors who are now eligible to donate again and send them a reminder.
// console.log('🕒 Cron job for eligibility reminders scheduled to run every day at 9:00 AM.');
// cron.schedule('0 9 * * *', () => {
//   console.log('⏰ It is 9:00 AM. Triggering the eligibility reminder cron job...');
//   // We create a new instance to ensure it's a fresh run
//   const engagementService = new EngagementService();
//   engagementService.sendEligibilityReminders();
// }, {
//   scheduled: true,
//   timezone: "Asia/Kolkata" // IMPORTANT: Set to your target timezone
// });

// console.log('🕒 Cron job for automatic bridge requests scheduled to run every day at 8:00 AM.');
// cron.schedule('0 8 * * *', () => {
//   console.log('⏰ It is 8:00 AM. Triggering automatic bridge requests...');
//   const bridgeService = new BridgeCoordinationService();
//   bridgeService.triggerAutomaticBridgeRequests();
// }, {
//   scheduled: true,
//   timezone: "Asia/Kolkata"
// });

// // '0 10 * * 0' means at minute 0, hour 10, on day-of-week 0 (Sunday).
// console.log('🕒 Cron job for inactive donor nudges scheduled to run every Sunday at 10:00 AM.');
// cron.schedule('0 10 * * 0', () => {
//     console.log('⏰ It is Sunday 10:00 AM. Triggering inactive donor nudge...');
//     const engagementService = new EngagementService();
//     engagementService.sendInactiveDonorNudges();
// }, {
//     scheduled: true,
//     timezone: "Asia/Kolkata"
// });
// // --- END PHASE 1 ---


// // Start the server
// app.listen(PORT, () => {
//   console.log(`✅ BloodBridge AI backend is running on port ${PORT}`);
// });


// backend/server.js

import express from 'express';
import cors from 'cors';
import morgan from 'morgan';
import apiRoutes from './src/routes/index.js'; // <-- IMPORT THE SINGLE UNIFIED ROUTER
import { verifyWebhook } from './src/middleware/verifyWebhook.js';
import webhookController from './src/controllers/webhookController.js';
import cron from 'node-cron';
import EngagementService from './src/services/engagementService.js';
import BridgeCoordinationService from './src/services/bridgeCoordinationService.js';

const app = express();
const PORT = process.env.PORT || 3001;

app.use(cors());
app.use(morgan('tiny'));
app.use(express.json({ limit: '1mb' }));

// --- API ROUTES ---
app.get('/health', (req, res) => res.status(200).json({ status: 'healthy' }));

// Mount the single unified router on the /api base path
app.use('/api', apiRoutes); // <-- USE THE SINGLE ROUTER

// --- WHATSAPP WEBHOOK ---
app.get('/webhook', webhookController.verifyToken);
app.post('/webhook', express.json({ verify: (req, res, buf) => { req.rawBody = buf.toString(); } }), verifyWebhook, webhookController.handleMessage);

// --- ERROR HANDLING & CRON JOBS ---
app.use((err, req, res, next) => { console.error('[ERROR HANDLER]', err.stack); res.status(500).json({ message: 'An internal server error occurred.' }); });
process.on('unhandledRejection', (reason) => { console.error('Unhandled Rejection:', reason); });
process.on('uncaughtException', (err) => { console.error('Uncaught Exception:', err); });
cron.schedule('0 9 * * *', () => new EngagementService().sendEligibilityReminders(), { scheduled: true, timezone: "Asia/Kolkata" });
cron.schedule('0 8 * * *', () => new BridgeCoordinationService().triggerAutomaticBridgeRequests(), { scheduled: true, timezone: "Asia/Kolkata" });
cron.schedule('0 10 * * 0', () => new EngagementService().sendInactiveDonorNudges(), { scheduled: true, timezone: "Asia/Kolkata" });

app.listen(PORT, () => console.log(`✅ BloodBridge AI backend is running on port ${PORT}`));

```

`backend/src/config/config.js`

```javascript
// backend/src/config/config.js
import 'dotenv/config'; // Loads variables from .env into process.env

// This object maps environment variables to a clean, accessible config object.
const config = {
    port: process.env.PORT,
    jwtSecret: process.env.JWT_SECRET,
    databaseUrl: process.env.DATABASE_URL,
    geminiApiKey: process.env.GEMINI_API_KEY,
    mlServiceUrl: process.env.ML_SERVICE_URL,
    whatsappToken: process.env.WHATSAPP_TOKEN,
    whatsappPhoneNumberId: process.env.WHATSAPP_PHONE_NUMBER_ID,
    whatsappAppSecret: process.env.WHATSAPP_APP_SECRET,
    whatsappVerifyToken: process.env.WHATSAPP_VERIFY_TOKEN,
    adminDemoPhone: process.env.ADMIN_DEMO_PHONE,
    demoVerifiedPhoneNumbers: process.env.DEMO_VERIFIED_PHONE_NUMBERS
};

// This validation step ensures the application fails fast if critical secrets are missing.
// It's a crucial security and stability feature.
const requiredConfig = ['port', 'jwtSecret', 'databaseUrl'];
const missingConfig = requiredConfig.filter(key => !config[key]);

if (missingConfig.length > 0) {
    console.error(`🔴 FATAL ERROR: Missing required environment variables: ${missingConfig.join(', ')}`);
    // Exit the application with an error code.
    process.exit(1);
}

export default config;

```

`backend/src/config/db.js`

```javascript
// backend/src/config/db.js
import { Pool } from 'pg';
import config from './config.js';

/**
 * Creates a new connection pool.
 * The pool manages multiple client connections to the database,
 * reusing them to improve performance and stability.
 */
const pool = new Pool({
  connectionString: config.databaseUrl,
});

/**
 * A helper function to execute a simple query.
 * @param {string} text - The SQL query string.
 * @param {Array} params - The parameters to pass to the query.
 * @returns {Promise<QueryResult>} The result from the database.
 */
const query = (text, params) => pool.query(text, params);

// We export the entire pool so we can use it for transactions later,
// and the query function for convenience.
const db = {
  query,
  pool,
};

export default db;

```

`backend/src/controllers/adminController.js`

```javascript
// // backend/src/controllers/adminController.js
// import jwt from 'jsonwebtoken';
// import config from '../config/config.js';
// import db from '../config/db.js';
// import bridgeService from '../services/bridgeService.js';
// import bridgeCoordinationService from '../services/bridgeCoordinationService.js'; 
// import emergencyService from '../services/emergencyService.js';

// /**
//  * Admin Login
//  */
// export const login = async (req, res) => {
//   const { phone, password } = req.body;
//   if (!phone || !password) {
//     return res.status(400).json({ message: 'Phone and password are required' });
//   }
//   try {
//     // Demo admin login (for prototype)
//     if (phone === config.adminDemoPhone && password === 'admin123') {
//       const token = jwt.sign({ phone, role: 'Admin' }, config.jwtSecret, { expiresIn: '8h' });
//       console.log(`Login successful for demo admin: ${phone}`);
//       return res.json({ token });
//     }
//     // In a real app, you would have hashed password validation here
//     const { rows } = await db.query(
//       'SELECT * FROM users WHERE phone = $1 AND role = $2',
//       [phone, 'Admin']
//     );
//     if (rows.length === 0 || rows[0].password !== password) {
//       console.warn('Login failed for phone:', phone);
//       return res.status(401).json({ message: 'Invalid credentials' });
//     }
//     const token = jwt.sign({ phone, role: 'Admin' }, config.jwtSecret, { expiresIn: '8h' });
//     console.log(`Login successful for user: ${phone}`);
//     return res.json({ token });

//   } catch (err) {
//     console.error('Login error:', { error: err.message, phone });
//     return res.status(500).json({ message: 'Server error during login' });
//   }
// };

// /**
//  * Create a Blood Bridge for a Patient
//  */
// export const createBridgeForPatient = async (req, res) => {
//   const { patientId } = req.params;
//   try {
//     const { rows: [patient] } = await db.query(
//       'SELECT * FROM patients WHERE id = $1',
//       [patientId]
//     );

//     if (!patient) {
//       return res.status(404).json({ message: 'Patient not found' });
//     }
//     if (patient.status === 'bridged') {
//       return res.status(400).json({ message: 'Patient already has a bridge.' });
//     }

//     const { rows: [bridge] } = await db.query(
//       'INSERT INTO blood_bridges (patient_id, name, blood_group, city) VALUES ($1, $2, $3, $4) RETURNING id',
//       [patient.id, `${patient.name}'s Bridge`, patient.blood_group, patient.city]
//     );

//     const result = await bridgeService.populateNewBridge(
//       bridge.id,
//       patient.city,
//       patient.blood_group,
//       patient.pincode
//     );

//     await db.query(
//       "UPDATE patients SET status = 'bridged' WHERE id = $1",
//       [patientId]
//     );
//     console.log(`ADMIN ACTION: Created and populated Bridge ${bridge.id} with ${result.count} members.`);
//     res.json({
//       success: true,
//       message: `Blood Bridge created and populated with ${result.count} top donors.`
//     });
//   } catch (error) {
//     console.error('Error creating bridge for patient:', error);
//     await db.query( "UPDATE patients SET status = 'pending_verification' WHERE id = $1", [patientId]);
//     res.status(500).json({ error: 'Failed to create and populate bridge.' });
//   }
// };

// /**
//  * Close Emergency Request
//  */
// export const closeEmergency = async (req, res) => {
//   const { requestId } = req.params;
//   try {
//     const { rowCount } = await db.query(
//       "UPDATE emergency_requests SET status = 'closed' WHERE id = $1 AND status = 'active'",
//       [requestId]
//     );
//     if (rowCount === 0) {
//       return res.status(404).json({ message: "Active request not found or already closed."})
//     }
//     console.log(`ADMIN ACTION: Closed emergency request ${requestId}`);
//     res.json({ success: true, message: 'Request successfully closed.' });
//   } catch (error) {
//     console.error(`Error closing emergency ${requestId}:`, error);
//     res.status(500).json({ error: 'Failed to close request.' });
//   }
// };

// /**
//  * Triggers a transfusion request for a patient in a Blood Bridge.requestBridgeTransfusion
//  */
// export const requestBridgeTransfusion = async (req, res) => {
//   const { bridgeId } = req.params;
//   try {
//     // Use the imported instance directly
//     const result = await bridgeCoordinationService.requestTransfusion(bridgeId);
//   // --- END OF FIX ---
//     console.log(`ADMIN ACTION: Triggered transfusion request for bridge ${bridgeId}`);
//     res.json(result);
//   } catch (error) {
//     console.error(`Error requesting bridge transfusion for ${bridgeId}:`, error);
//     res.status(500).json({ error: error.message || 'Failed to send bridge request.' });
//   }
// };

// /**
//  * Fetches the four main statistics for the StatCards on the dashboard.
//  */
// export const getDashboardStats = async (req, res) => {
//   try {
//     const [
//       { rows: [totalDonors] },
//       { rows: [activeDonors] },
//       { rows: [pendingPatients] },
//       { rows: [atRisk] }
//     ] = await Promise.all([
//       db.query("SELECT COUNT(*) as count FROM users WHERE user_type = 'donor'"),
//       db.query("SELECT COUNT(*) as count FROM users WHERE user_type = 'donor' AND availability_status = 'available'"),
//       db.query("SELECT COUNT(*) as count FROM patients WHERE status = 'pending_verification'"),
//       db.query("SELECT COUNT(*) as count FROM emergency_requests WHERE status = 'active'")
//     ]);
    
//     res.json({
//       total_donors: parseInt(totalDonors.count, 10),
//       active_donors: parseInt(activeDonors.count, 10),
//       pending_patients: parseInt(pendingPatients.count, 10),
//       patients_at_risk: parseInt(atRisk.count, 10),
//     });
//   } catch (error) {
//     console.error('Error fetching dashboard stats:', error);
//     res.status(500).json({ error: 'Failed to fetch dashboard stats.' });
//   }
// };

// /**
//  * Fetches the count of donors for each blood group for the chart.
//  */
// export const getBloodGroupStats = async (req, res) => {
//   try {
//     const { rows } = await db.query(
//       `SELECT blood_group, COUNT(*) as count 
//        FROM users 
//        WHERE user_type = 'donor' AND blood_group IS NOT NULL AND blood_group != 'Unknown'
//        GROUP BY blood_group 
//        ORDER BY blood_group`
//     );
//     res.json(rows);
//   } catch (error) {
//     console.error('Error fetching blood group stats:', error);
//     res.status(500).json({ error: 'Failed to fetch blood group stats.' });
//   }
// };

// /**
//  * Fetches patients with 'pending_verification' status for the Patients tab.
//  */

// export const getPatients = async (req, res) => {
//   try {
//     // --- THIS IS THE CORRECTED QUERY ---
//     // Instead of a risky subquery, we use a LEFT JOIN. This is safer and more efficient.
//     // It correctly handles the case where a patient has no bridge yet (member_count will be 0).
//     const query = `
//       SELECT 
//         p.id, p.name, p.phone, p.blood_group, p.city, p.status, p.condition,
//         p.last_transfusion_date, p.frequency_in_days,
//         p.last_transfusion_date + (p.frequency_in_days || ' days')::interval AS next_due_date,
//         COUNT(bm.id) as bridge_member_count
//       FROM 
//         patients p
//       LEFT JOIN 
//         blood_bridges bb ON p.id = bb.patient_id
//       LEFT JOIN 
//         bridge_members bm ON bb.id = bm.bridge_id
//       GROUP BY
//         p.id
//       ORDER BY 
//         p.created_at DESC
//     `;
//     // --- END OF CORRECTION ---
    
//     const { rows } = await db.query(query);
//     res.json(rows);
//   } catch (error) {
//     console.error('Error fetching patients:', error);
//     res.status(500).json({ error: 'Failed to fetch patients.' });
//   }
// };

// /**
//  * Fetches all 'active' emergencies for the Emergencies tab.
//  */
// export const getActiveEmergencies = async (req, res) => {
//   try {
//     const { rows } = await db.query(
//       "SELECT id, patient_name, blood_group, status, city FROM emergency_requests WHERE status = 'active' ORDER BY created_at DESC"
//     );
//     res.json(rows);
//   } catch (error) {
//     console.error('Error fetching active emergencies:', error);
//     res.status(500).json({ error: 'Failed to fetch active emergencies.' });
//   }
// };

// /**
//  * Fetches all created Blood Bridges for the Blood Bridges tab.
//  */
// export const getBloodBridges = async (req, res) => {
//     try {
//         const { rows } = await db.query(
//             `SELECT 
//                 bb.id, 
//                 bb.name, -- Select the bridge's name
//                 p.name as patient_name,
//                 COUNT(bm.id) as member_count -- Count the members in each bridge
//              FROM 
//                 blood_bridges bb
//              JOIN 
//                 patients p ON bb.patient_id = p.id
//              LEFT JOIN -- Use LEFT JOIN in case a bridge has 0 members
//                 bridge_members bm ON bb.id = bm.bridge_id
//              WHERE 
//                 bb.active = true
//              GROUP BY -- Required when using an aggregate function like COUNT
//                 bb.id, p.name
//              ORDER BY 
//                 p.name`
//         );
//         res.json(rows);
//     } catch (error) {
//         console.error('Error fetching blood bridges:', error);
//         res.status(500).json({ error: 'Failed to fetch blood bridges.' });
//     }
// };


// /**
//  * Fetches patients who are due for a transfusion.
//  * Logic: Finds patients where today's date is past their last transfusion + frequency.
//  */
// export const getDuePatients = async (req, res) => {
//   try {
//     const { rows } = await db.query(
//       `SELECT id, name, blood_group, city, last_transfusion_date, frequency_in_days
//        FROM patients
//        WHERE 
//          status = 'bridged' AND 
//          last_transfusion_date IS NOT NULL AND 
//          frequency_in_days IS NOT NULL AND
//          (last_transfusion_date + frequency_in_days * INTERVAL '1 day') <= NOW()`
//     );
//     res.json(rows);
//   } catch (error){
//     console.error('Error fetching due patients:', error);
//     res.status(500).json({ error: 'Failed to fetch due patients.' });
//   }
// };

// /**
//  * Fetches the top 10 donors for the gamification leaderboard.
//  */
// export const getLeaderboard = async (req, res) => {
//   try {
//     const { rows } = await db.query(
//       `SELECT name, gamification_points, city 
//        FROM users 
//        WHERE user_type = 'donor' 
//        ORDER BY gamification_points DESC 
//        LIMIT 10`
//     );
//     res.json(rows);
//   } catch (error) {
//     console.error('Error fetching leaderboard:', error);
//     res.status(500).json({ error: 'Failed to fetch leaderboard data.' });
//   }
// };

// // --- Other Endpoints (Placeholders for now) ---
// export const getConfig = async (req, res) => { res.json({ message: "Config placeholder" }); };
// export const getInboxMessages = async (req, res) => {
//   try {
//     // This query selects all messages that an admin has not yet marked as 'resolved'.
//     const { rows } = await db.query(
//       "SELECT id, user_phone, user_message, reason, created_at FROM inbox_messages WHERE status = 'pending' ORDER BY created_at ASC"
//     );
//     res.json(rows);
//   } catch (error) {
//     console.error('Error fetching inbox messages:', error);
//     res.status(500).json({ error: 'Failed to fetch inbox messages.' });
//   }
// };
// export const escalateEmergency = async (req, res) => {
//   const { requestId } = req.params;
//   try {
//     const result = await emergencyService.escalateRequest(requestId);
//     console.log(`ADMIN ACTION: Escalated emergency request ${requestId}`);
//     res.json(result);
//   } catch (error) {
//     console.error(`Error escalating emergency ${requestId}:`, error);
//     res.status(500).json({ error: error.message || 'Failed to escalate emergency.' });
//   }
// };
// export const resolveInboxMessage = async (req, res) => {
//   const { messageId } = req.params;
//   try {
//     const { rowCount } = await db.query(
//       "UPDATE inbox_messages SET status = 'resolved', resolved_at = NOW() WHERE id = $1 AND status = 'pending'",
//       [messageId]
//     );

//     if (rowCount === 0) {
//       return res.status(404).json({ message: "Pending message not found or it may have been already resolved." });
//     }

//     console.log(`ADMIN ACTION: Resolved inbox message ${messageId}`);
//     res.json({ success: true, message: 'Message marked as resolved.' });
//   } catch (error) {
//     console.error(`Error resolving inbox message ${messageId}:`, error);
//     res.status(500).json({ error: 'Failed to resolve message.' });
//   }
// };


// backend/src/controllers/adminController.js

import jwt from 'jsonwebtoken';
import config from '../config/config.js';
import db from '../config/db.js';
import bridgeService from '../services/bridgeService.js';
import bridgeCoordinationService from '../services/bridgeCoordinationService.js';
import emergencyService from '../services/emergencyService.js';

/**
 * FINAL UNIFIED MOCK LOGIN
 */
export const login = async (req, res) => {
  const { phone, password } = req.body;
  if (!phone || !password) {
    return res.status(400).json({ message: 'Phone and password are required' });
  }
  try {
    if (phone === config.adminDemoPhone && password === 'admin123') {
      const userPayload = { phone, role: 'Admin', name: 'Admin User' };
      const token = jwt.sign(userPayload, config.jwtSecret, { expiresIn: '8h' });
      return res.json({ token, user: userPayload });
    }
    if (phone === '+919876543210' && password === 'donor123') {
      const userPayload = { phone, role: 'Donor', name: 'Ravi Kumar' };
      const token = jwt.sign(userPayload, config.jwtSecret, { expiresIn: '8h' });
      return res.json({ token, user: userPayload });
    }
    if (phone === '+911234567890' && password === 'patient123') {
      const userPayload = { phone, role: 'Patient', name: 'Priya Sharma' };
      const token = jwt.sign(userPayload, config.jwtSecret, { expiresIn: '8h' });
      return res.json({ token, user: userPayload });
    }
    return res.status(401).json({ message: 'Invalid credentials. Please use the demo details.' });
  } catch (err) {
    console.error('Login error:', { error: err.message, phone });
    return res.status(500).json({ message: 'Server error during login' });
  }
};

/**
 * Public stats for the landing page.
 */
export const getPublicStats = async (req, res) => {
    try {
        const { rows: [stats] } = await db.query(`SELECT (SELECT COUNT(*) FROM users WHERE user_type = 'donor') AS total_donors, (SELECT COUNT(*) FROM users WHERE user_type = 'donor' AND availability_status = 'available') AS active_donors, (SELECT COUNT(DISTINCT patient_id) FROM blood_bridges) AS patients_helped`);
        res.json({
            total_donors: parseInt(stats.total_donors, 10) || 0,
            active_donors: parseInt(stats.active_donors, 10) || 0,
            patients_helped: parseInt(stats.patients_helped, 10) || 0,
        });
    } catch (error) {
        console.error('Error fetching public stats:', error);
        res.status(500).json({ total_donors: 1247, active_donors: 892, patients_helped: 156 });
    }
};

export const createBridgeForPatient = async (req, res) => {
  const { patientId } = req.params;
  try {
    const { rows: [patient] } = await db.query('SELECT * FROM patients WHERE id = $1', [patientId]);
    if (!patient) return res.status(404).json({ message: 'Patient not found' });
    if (patient.status === 'bridged') return res.status(400).json({ message: 'Patient already has a bridge.' });
    const { rows: [bridge] } = await db.query('INSERT INTO blood_bridges (patient_id, name, blood_group, city) VALUES ($1, $2, $3, $4) RETURNING id', [patient.id, `${patient.name}'s Bridge`, patient.blood_group, patient.city]);
    const result = await bridgeService.populateNewBridge(bridge.id, patient.city, patient.blood_group, patient.pincode);
    await db.query("UPDATE patients SET status = 'bridged' WHERE id = $1", [patientId]);
    res.json({ success: true, message: `Blood Bridge created and populated with ${result.count} top donors.` });
  } catch (error) {
    console.error('Error creating bridge for patient:', error);
    await db.query("UPDATE patients SET status = 'pending_verification' WHERE id = $1", [patientId]).catch(console.error);
    res.status(500).json({ error: 'Failed to create and populate bridge.' });
  }
};

export const closeEmergency = async (req, res) => {
  const { requestId } = req.params;
  try {
    const { rowCount } = await db.query("UPDATE emergency_requests SET status = 'closed' WHERE id = $1 AND status = 'active'", [requestId]);
    if (rowCount === 0) return res.status(404).json({ message: "Active request not found or already closed." });
    res.json({ success: true, message: 'Request successfully closed.' });
  } catch (error) {
    console.error(`Error closing emergency ${requestId}:`, error);
    res.status(500).json({ error: 'Failed to close request.' });
  }
};

export const requestBridgeTransfusion = async (req, res) => {
  const { bridgeId } = req.params;
  try {
    const result = await bridgeCoordinationService.requestTransfusion(bridgeId);
    res.json(result);
  } catch (error) {
    console.error(`Error requesting bridge transfusion for ${bridgeId}:`, error);
    res.status(500).json({ error: error.message || 'Failed to send bridge request.' });
  }
};

export const getDashboardStats = async (req, res) => {
    try {
        const [
            { rows: [totalDonors] }, { rows: [activeDonors] }, { rows: [patientsHelped] },
            { rows: [emergenciesResolved] }, { rows: [bloodUnits] }, { rows: [bridgesCreated] }
        ] = await Promise.all([
            db.query("SELECT COUNT(*) as count FROM users WHERE user_type = 'donor'"),
            db.query("SELECT COUNT(*) as count FROM users WHERE user_type = 'donor' AND availability_status = 'available'"),
            db.query("SELECT COUNT(DISTINCT patient_id) as count FROM blood_bridges"),
            db.query("SELECT COUNT(*) as count FROM emergency_requests WHERE status IN ('fulfilled', 'closed')"),
            db.query("SELECT SUM(donations_confirmed) as count FROM users WHERE user_type = 'donor'"),
            db.query("SELECT COUNT(*) as count FROM blood_bridges")
        ]);
        res.json({
            total_donors: parseInt(totalDonors.count, 10) || 0,
            active_donors: parseInt(activeDonors.count, 10) || 0,
            patients_helped: parseInt(patientsHelped.count, 10) || 0,
            emergencies_resolved: parseInt(emergenciesResolved.count, 10) || 0,
            blood_units_donated: parseInt(bloodUnits.count, 10) || 0,
            bridges_created: parseInt(bridgesCreated.count, 10) || 0,
        });
    } catch (error) {
        console.error('Error fetching dashboard stats:', error);
        res.status(500).json({ error: 'Failed to fetch dashboard stats.' });
    }
};

export const getBloodGroupStats = async (req, res) => {
  try {
    const { rows } = await db.query(`SELECT blood_group, COUNT(*)::int as donors FROM users WHERE user_type = 'donor' AND blood_group IS NOT NULL AND blood_group != 'Unknown' GROUP BY blood_group ORDER BY blood_group`);
    const totalDonors = rows.reduce((sum, row) => sum + row.donors, 0);
    const dataWithPercentage = rows.map(row => ({...row, percentage: totalDonors > 0 ? parseFloat(((row.donors / totalDonors) * 100).toFixed(1)) : 0 }));
    res.json(dataWithPercentage);
  } catch (error) {
    console.error('Error fetching blood group stats:', error);
    res.status(500).json({ error: 'Failed to fetch blood group stats.' });
  }
};

export const getPatients = async (req, res) => {
  try {
    const query = `SELECT id, name, phone, blood_group, city as location, status, condition FROM patients ORDER BY created_at DESC`;
    const { rows } = await db.query(query);
    res.json(rows);
  } catch (error) {
    console.error('Error fetching patients:', error);
    res.status(500).json({ error: 'Failed to fetch patients.' });
  }
};

/**
 * CORRECTED: Fetches all 'active' emergencies.
 * Removes the non-existent column and provides a default value for 'urgency'.
 */
export const getActiveEmergencies = async (req, res) => {
  try {
    const { rows } = await db.query(
      "SELECT id, patient_name, blood_group, city as location, status, created_at, 'high' as urgency FROM emergency_requests WHERE status = 'active' ORDER BY created_at DESC"
    );
    res.json(rows);
  } catch (error) {
    console.error('Error fetching active emergencies:', error);
    res.status(500).json({ error: 'Failed to fetch active emergencies.' });
  }
};

export const getBloodBridges = async (req, res) => {
    try {
        const { rows } = await db.query(`SELECT bb.id, bb.name, p.name as patient_name, COUNT(bm.id) as member_count FROM blood_bridges bb JOIN patients p ON bb.patient_id = p.id LEFT JOIN bridge_members bm ON bb.id = bm.bridge_id WHERE bb.active = true GROUP BY bb.id, p.name ORDER BY p.name`);
        res.json(rows);
    } catch (error) {
        console.error('Error fetching blood bridges:', error);
        res.status(500).json({ error: 'Failed to fetch blood bridges.' });
    }
};

export const getDuePatients = async (req, res) => {
  try {
    const { rows } = await db.query(`SELECT id, name, blood_group, city, last_transfusion_date, frequency_in_days FROM patients WHERE status = 'bridged' AND last_transfusion_date IS NOT NULL AND frequency_in_days IS NOT NULL AND (last_transfusion_date + frequency_in_days * INTERVAL '1 day') <= NOW()`);
    res.json(rows);
  } catch (error){
    console.error('Error fetching due patients:', error);
    res.status(500).json({ error: 'Failed to fetch due patients.' });
  }
};

export const getLeaderboard = async (req, res) => {
  try {
    const { rows } = await db.query(`SELECT name, city as location, donations_confirmed as donations, blood_group, gamification_points as points FROM users WHERE user_type = 'donor' ORDER BY gamification_points DESC, donations_confirmed DESC LIMIT 10`);
    const rankedData = rows.map((row, index) => ({ rank: index + 1, ...row }));
    res.json(rankedData);
  } catch (error) {
    console.error('Error fetching leaderboard:', error);
    res.status(500).json({ error: 'Failed to fetch leaderboard data.' });
  }
};

export const getInboxMessages = async (req, res) => {
  try {
    const { rows } = await db.query("SELECT id, user_phone, user_message as message, reason as subject, created_at as timestamp, 'high' as priority, 'flagged' as status, 'general' as category FROM inbox_messages WHERE status = 'pending' ORDER BY created_at ASC");
    res.json(rows);
  } catch (error) {
    console.error('Error fetching inbox messages:', error);
    res.status(500).json({ error: 'Failed to fetch inbox messages.' });
  }
};

export const escalateEmergency = async (req, res) => {
  const { requestId } = req.params;
  try {
    const result = await emergencyService.escalateRequest(requestId);
    res.json(result);
  } catch (error) {
    console.error(`Error escalating emergency ${requestId}:`, error);
    res.status(500).json({ error: error.message || 'Failed to escalate emergency.' });
  }
};

export const resolveInboxMessage = async (req, res) => {
  const { messageId } = req.params;
  try {
    const { rowCount } = await db.query("UPDATE inbox_messages SET status = 'resolved', resolved_at = NOW() WHERE id = $1 AND status = 'pending'",[messageId]);
    if (rowCount === 0) return res.status(404).json({ message: "Pending message not found or it may have been already resolved." });
    res.json({ success: true, message: 'Message marked as resolved.' });
  } catch (error) {
    console.error(`Error resolving inbox message ${messageId}:`, error);
    res.status(500).json({ error: 'Failed to resolve message.' });
  }
};

export const getConfig = async (req, res) => {
  res.json({ version: "1.0.0", system_status: "ok" });
};

export const getDonorDashboard = async (req, res) => {
  try {
    const { phone } = req.user;
    const { rows: [donor] } = await db.query(`SELECT id, name, phone, blood_group, city, gamification_points AS points, streak_count AS streak FROM users WHERE phone = $1 AND user_type = 'Donor'`, [phone]);
    if (!donor) return res.status(404).json({ message: "Donor not found." });
    
    const dashboardData = {
      ...donor, donations_completed: 12, next_donation: 'January 25, 2025', level: 'Blood Guardian', impact_lives_saved: 5,
      badges: [
        { id: 'b1', name: 'First Donation', icon: 'award', unlocked: true },
        { id: 'b2', name: 'Regular Donor', icon: 'heart', unlocked: true },
        { id: 'b3', name: 'Monthly Hero', icon: 'calendar', unlocked: true },
        { id: 'b4', name: 'Life Saver', icon: 'shield', unlocked: false }
      ]
    };
    res.json(dashboardData);
  } catch (error) {
    console.error('Error fetching donor dashboard:', error);
    res.status(500).json({ error: 'Failed to fetch donor dashboard.' });
  }
};

export const getPatientDashboard = async (req, res) => {
  try {
    const { phone } = req.user;
    const { rows: [patient] } = await db.query(`SELECT id, name, blood_group, condition, status, last_transfusion_date, frequency_in_days FROM patients WHERE phone = $1`, [phone]);
    if (!patient) return res.status(404).json({ message: "Patient not found." });

    const dashboardData = {
      ...patient, age: 14, bridge_status: patient.status === 'bridged' ? 'Connected' : 'Not Connected', health_score: 85, connected_donors: 3,
      last_transfusion: patient.last_transfusion_date ? new Date(patient.last_transfusion_date).toLocaleDateString('en-IN') : 'N/A',
      next_transfusion: patient.frequency_in_days ? `In ${patient.frequency_in_days} days` : 'N/A',
      upcoming_appointments: [
        { type: 'Blood Transfusion', doctor: 'Dr. Amit Sharma', date: 'January 25, 2025 - 10:00 AM' },
        { type: 'Regular Checkup', doctor: 'Dr. Priya Verma', date: 'February 2, 2025 - 2:30 PM' }
      ]
    };
    res.json(dashboardData);
  } catch (error) {
    console.error('Error fetching patient dashboard:', error);
    res.status(500).json({ error: 'Failed to fetch patient dashboard.' });
  }
};

```

`backend/src/controllers/webhookController.js`

```javascript
// backend/src/controllers/webhookController.js

// Import required dependencies
import config from '../config/config.js';
import db from '../config/db.js';
import emergencyService from '../services/emergencyService.js';
import registrationService from '../services/registrationService.js';
import responseService from '../services/responseService.js';
import patientService from '../services/patientService.js';
import donorPreferenceService from '../services/donorPreferenceService.js';
import aiRouterService from '../services/aiRouterService.js';
import faqService from '../services/faqService.js';
import gamificationService from '../services/gamificationService.js';
import whatsappService from '../services/whatsappService.js';
import bridgeService from '../services/bridgeService.js';
import { normalizePhoneNumber } from '../utils/phoneHelper.js';
import { detectLanguage } from '../utils/languageHelper.js';
import translationService from '../utils/translationService.js';
import { triggerInactiveDonorNudges, triggerAutomaticBridgeRequests } from '../services/schedulerService.js';
import loggingService from '../services/loggingService.js';

/**
 * Handles the GET request from Meta for webhook verification.
 */
const verifyToken = (req, res) => {
  const mode = req.query['hub.mode'];
  const token = req.query['hub.verify_token'];
  const challenge = req.query['hub.challenge'];

  if (mode === 'subscribe' && token === config.whatsappVerifyToken) {
    console.log('✅ Webhook verified successfully!');
    return res.status(200).send(challenge);
  }

  console.warn('Webhook verification failed. Make sure your verify token is correct.');
  res.status(403).send('Verification failed');
};

/**
 * Processes a single, validated incoming WhatsApp message.
 */
const processMessage = async (messageData) => {
  const from = normalizePhoneNumber(messageData.from);

  // --- PRIORITY 0: Handle Non-Text Message Types ---
  if (messageData.type === 'interactive' && messageData.interactive.type === 'button_reply') {
    const buttonId = messageData.interactive.button_reply.id;
    console.log(`--- Interactive Reply --- From: ${from}, Button ID: ${buttonId}`);
    if (buttonId.startsWith('join_bridge_')) {
      await bridgeService.addDonorToBridge(buttonId.replace('join_bridge_', ''));
      await whatsappService.sendTextMessage(from, "Thank you for joining a Blood Bridge! You are now part of a dedicated life-saving team. ❤️");
    } else if (buttonId.startsWith('decline_bridge_')) {
      await whatsappService.sendTextMessage(from, "No problem! We appreciate you being a regular donor and will keep you in mind for general requests.");
    }
    return;
  }
  
  if (messageData.type === 'location') {
    console.log(`--- Location Message --- From: ${from}`);
    await emergencyService.handleLocationReply(from, messageData.location);
    return;
  }

  if (messageData.type !== 'text') {
    console.log(`Ignoring non-text message of type '${messageData.type}' from ${from}.`);
    return;
  }

  // --- Text Message Processing ---
  let userMessage = messageData.text.body.trim();
  
  const detectedLang = await detectLanguage(userMessage);
  if (detectedLang && detectedLang !== 'en') {
      userMessage = await translationService.translateToEnglish(userMessage);
  }
  
  const lowerUserMessage = userMessage.toLowerCase();
  console.log(`--- Processing Message --- From: ${from}, Processed Message: "${userMessage}"`);
  await loggingService.logIncoming(from, userMessage);

  // --- PRIORITY 1: Rigid Commands & State-Based Replies ---
  
  // Smart parser for the multi-line donor registration format
  const registrationDetailsMatch = userMessage.match(/(?:name|full name):\s*(?<name>.+)\s*city:\s*(?<city>.+)\s*blood group:\s*(?<blood_group>.+)/is);
  if (registrationDetailsMatch) {
    console.log(`✅ Message handled by: Donor Registration Details Parser.`);
    await registrationService.completeDonorRegistration(from, registrationDetailsMatch.groups);
    return;
  }
  
  // Keyword match for DONOR registration
  const isDonorRequest = lowerUserMessage.includes('donor') || lowerUserMessage.includes('donate');
  if (lowerUserMessage.includes('register') && isDonorRequest && !lowerUserMessage.includes('patient')) {
    console.log(`✅ Message handled by: Donor Registration keyword.`);
    await registrationService.handleNewDonor({}, from);
    return;
  }

  // Keyword match for PATIENT registration
  if ((lowerUserMessage.includes('register') && lowerUserMessage.includes('patient')) || lowerUserMessage.includes('help for a thalassemia patient')) {
    console.log(`✅ Message handled by: Patient Registration keyword.`);
    await patientService.handleNewPatient({}, from);
    return;
  }

  // Conversational flows and standard replies
  if (await patientService.processOnboardingReply(userMessage, from)) return;
  if (lowerUserMessage === 'apply' && await patientService.startApplication(from)) return;
  if (/^\d{6}$/.test(userMessage)) { await responseService.verifyOTPAndConfirm(from, userMessage); return; }
  if (lowerUserMessage === 'no') { await responseService.handleSimpleDecline(from); return; }
  const responseMatch = userMessage.match(/^(?:YES)\s+(\d{4})$/i);
  if (responseMatch) { await responseService.handleDonorReplyWithShortCode(from, responseMatch[1]); return; }
  if (lowerUserMessage === 'yes') {
    const { rows: [userWithCode] } = await db.query("SELECT last_request_short_code FROM users WHERE phone = $1", [from]);
    if (userWithCode && userWithCode.last_request_short_code) {
        await responseService.handleDonorReplyWithShortCode(from, userWithCode.last_request_short_code);
        return;
    }
  }

  // Demo commands
  if (lowerUserMessage.startsWith('/demo')) {
    console.log('DEMO MODE ACTIVATED');
    if (lowerUserMessage === '/demo nudge') {
        await triggerInactiveDonorNudges();
        await whatsappService.sendTextMessage(from, `🎬 Executed Inactive Donor Nudge.`);
    } else if (lowerUserMessage === '/demo bridge_request') {
        await triggerAutomaticBridgeRequests();
        await whatsappService.sendTextMessage(from, `🎬 Executed Automatic Bridge Requests.`);
    } else {
        await whatsappService.sendTextMessage(from, `Unknown demo command.`);
    }
    return;
  }

  // --- PRIORITY 2: AI-Powered Intent Routing (with context) ---
  console.log(`No direct keyword match found. Routing to AI with conversation context...`);
  const { rows: [user] } = await db.query('SELECT role FROM users WHERE phone = $1', [from]);
  const userRole = user ? user.role : 'Unregistered';
  
  const { rows: historyRows } = await db.query(
    `SELECT message, response FROM conversations WHERE user_phone = $1 ORDER BY created_at DESC LIMIT 3`,
    [from]
  );
  
  const chatHistory = historyRows.reverse().flatMap(row => [
    { role: 'user', parts: [{ text: row.message }] },
    ...(row.response ? [{ role: 'model', parts: [{ text: row.response }] }] : [])
  ]);

  const route = await aiRouterService.routeMessageWithContext(userMessage, userRole, chatHistory);
  
  if (route && route.tool) {
    console.log(`AI routed to tool: ${route.tool}`);
    switch (route.tool) {
      case 'handle_emergency_request':
        await emergencyService.handleEmergencyRequest(userMessage, from);
        break;
      case 'handle_donor_registration':
        await registrationService.handleNewDonor(route.params, from);
        break;
      case 'handle_patient_onboarding':
        await patientService.handleNewPatient(route.params, from);
        break;
      case 'get_my_dashboard': {
        const statusMessage = await gamificationService.getDonorStatus(from);
        await whatsappService.sendTextMessage(from, statusMessage);
        break;
      }
      case 'get_leaderboard': {
        const leaderboardMessage = await gamificationService.getLeaderboardMessage(from);
        await whatsappService.sendTextMessage(from, leaderboardMessage);
        break;
      }
      case 'handle_join_bridge_request': {
        const msg = await bridgeService.addDonorToBridgeByPhone(from);
        await whatsappService.sendTextMessage(from, msg);
        break;
      }
      case 'handle_snooze_request':
        await donorPreferenceService.handleSnooze(from, route.params);
        break;
      default:
        await faqService.handleFaq(userMessage, from);
        break;
    }
    return;
  }

  // --- PRIORITY 3: Final Fallback ---
  console.log(`AI did not select a tool. Handling as a general FAQ.`);
  await faqService.handleFaq(userMessage, from);
};

/**
 * The main entry point for the /webhook POST request.
 */
const handleMessage = async (req, res) => {
  res.sendStatus(200);

  try {
    const messageData = req.body.entry?.[0]?.changes?.[0]?.value?.messages?.[0];
    if (!messageData) {
      return;
    }

    const messageId = messageData.id;
    const { rows } = await db.query('SELECT 1 FROM processed_messages WHERE message_id = $1', [messageId]);
    if (rows.length > 0) {
      console.warn(`Duplicate message ignored: ${messageId}`);
      return;
    }
    
    await db.query('INSERT INTO processed_messages(message_id) VALUES($1)', [messageId]);
    await processMessage(messageData);

  } catch (error) {
    console.error('CRITICAL ERROR in handleMessage:', {
      message: error.message,
      stack: error.stack,
    });
  }
};

export default {
  verifyToken,
  handleMessage,
};

```

`backend/src/middleware/authMiddleware.js`

```javascript
// backend/src/middleware/authMiddleware.js
import jwt from 'jsonwebtoken';
import config from '../config/config.js';

// ✅ The function must be declared as a constant named 'authMiddleware'
const authMiddleware = (req, res, next) => {
  const authHeader = req.headers.authorization;

  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ message: 'Authorization token is missing or malformed' });
  }

  const token = authHeader.split(' ')[1];
  try {
    const decoded = jwt.verify(token, config.jwtSecret);
    req.user = decoded;
    next();
  } catch (error) {
    console.error("JWT Verification Error:", error.message);
    return res.status(401).json({ message: 'Invalid or expired token' });
  }
};

// ✅ This line then exports that constant
export default authMiddleware;

```

`backend/src/middleware/checkRole.js`

```javascript
// backend/src/middleware/checkRole.js

const checkRole = (roles) => {
  return (req, res, next) => {
    if (!req.user || !req.user.role) {
      return res.status(403).json({ message: 'Forbidden: No role assigned' });
    }
    const userRole = req.user.role;
    if (roles.includes(userRole)) {
      return next();
    }
    return res.status(403).json({ message: 'Forbidden: Insufficient permissions' });
  };
};

export default checkRole; // <-- CORRECTED LINE

```

`backend/src/middleware/verifyWebhook.js`

```javascript
// backend/src/middleware/verifyWebhook.js
import crypto from 'crypto';
import config from '../config/config.js';

/**
 * Middleware to verify WhatsApp webhook POST requests.
 * - Skips signature verification for GET (used by Meta for challenge verification).
 * - Validates signature for POST requests to ensure authenticity.
 */
export const verifyWebhook = (req, res, next) => {
  // Allow GET requests (Meta verification step) to pass through.
  if (req.method === 'GET') {
    return next();
  }

  // Get the signature from the request header.
  const signature = req.headers['x-hub-signature-256'];
  if (!signature) {
    console.warn('Signature missing for POST webhook');
    return res.status(401).json({ message: 'Signature missing' });
  }

  // --- THIS IS THE CORRECTED SECTION ---
  // Create an HMAC (Hash-based Message Authentication Code) using sha256.
  // We use the `whatsappAppSecret` as the key.
  const hmac = crypto.createHmac('sha256', config.whatsappAppSecret);

  // We MUST use the raw request body string that we saved earlier in server.js.
  // Using `req.body` here will fail because it's already parsed JSON.
  hmac.update(req.rawBody);
  const expectedSignature = `sha256=${hmac.digest('hex')}`;
  // --- END OF CORRECTION ---

  // Compare the signature from Meta with the one we calculated.
  // We use a timing-safe comparison to enhance security.
  // An invalid signature means the request might be forged.
  if (!crypto.timingSafeEqual(Buffer.from(signature), Buffer.from(expectedSignature))) {
    console.warn('Signature mismatch for POST webhook. Check your WHATSAPP_APP_SECRET.');
    return res.status(401).json({ message: 'Invalid signature' });
  }

  // If the signatures match, the request is authentic. Proceed to the next middleware.
  next();
};

```

`backend/src/routes/index.js`

```javascript
// backend/src/routes/index.js

import express from 'express';
import {
  login, getPublicStats, createBridgeForPatient, closeEmergency, requestBridgeTransfusion,
  getDashboardStats, getBloodGroupStats, getPatients, getActiveEmergencies,
  getBloodBridges, getDuePatients, getLeaderboard, getInboxMessages,
  escalateEmergency, resolveInboxMessage, getConfig,
  getDonorDashboard, getPatientDashboard
} from '../controllers/adminController.js';
import authMiddleware from '../middleware/authMiddleware.js';
import checkRole from '../middleware/checkRole.js';

const router = express.Router();

// --- PUBLIC ROUTES ---
router.post('/admin/login', login);
router.get('/public/stats', getPublicStats);

// --- AUTHENTICATION MIDDLEWARE ---
// All routes defined below this line will require a valid token.
router.use(authMiddleware);

// --- ADMIN-ONLY ROUTES ---
router.get('/admin/stats', checkRole(['Admin']), getDashboardStats);
router.get('/admin/stats/blood-groups', checkRole(['Admin']), getBloodGroupStats);
router.get('/admin/patients', checkRole(['Admin']), getPatients);
router.get('/admin/emergencies', checkRole(['Admin']), getActiveEmergencies);
router.get('/admin/leaderboard', checkRole(['Admin']), getLeaderboard);
router.get('/admin/inbox', checkRole(['Admin']), getInboxMessages);
router.post('/admin/patients/:patientId/create-bridge', checkRole(['Admin']), createBridgeForPatient);
router.post('/admin/emergencies/:requestId/close', checkRole(['Admin']), closeEmergency);
router.post('/admin/emergencies/:requestId/escalate', checkRole(['Admin']), escalateEmergency);

// --- DONOR PORTAL ROUTE ---
router.get('/donor/dashboard', checkRole(['Donor', 'Admin']), getDonorDashboard);

// --- PATIENT PORTAL ROUTE ---
router.get('/patient/dashboard', checkRole(['Patient', 'Admin']), getPatientDashboard);

export default router;

```

`backend/src/services/aiRouterService.js`

```javascript
// backend/src/services/aiRouterService.js
import { GoogleGenerativeAI } from '@google/generative-ai';
import { TOOL_DEFINITIONS } from './aiTools.js'; // ✅ This import MUST be in this file.
import config from '../config/config.js';

class AIRouterService {
  constructor() {
    if (!config.geminiApiKey) {
      throw new Error("GEMINI_API_KEY is not set.");
    }
    this.genAI = new GoogleGenerativeAI(config.geminiApiKey);
    this.model = this.genAI.getGenerativeModel({
      model: 'gemini-1.5-flash-latest',
      // This line now works because TOOL_DEFINITIONS is correctly imported above.
      tools: { functionDeclarations: TOOL_DEFINITIONS }
    });
  }

  // ✅ This is the complete, context-aware version of this function.
  async routeMessageWithContext(userMessage, userRole, chatHistory = []) {
    const systemPrompt = `You are "Bridge AI", an AI assistant. Your goal is to understand the user's message in the context of the conversation and call the appropriate function. The user's role is "${userRole}".`;
    
    const fullHistory = [
      { role: "user", parts: [{ text: systemPrompt }] },
      { role: "model", parts: [{ text: "Understood." }] },
      ...chatHistory
    ];
    
    try {
      const chat = this.model.startChat({ history: fullHistory });
      const result = await chat.sendMessage(userMessage);
      const call = result.response.functionCalls()?.[0];
      
      if (call) {
        console.log(`AI decided to call tool: ${call.name} with params:`, call.args);
        return { tool: call.name, params: call.args };
      }
      console.log("AI did not call a specific tool for this message.");
      return null;
    } catch (error) {
      console.error('Error routing message with Gemini:', error.message);
      return null;
    }
  }
}

export default new AIRouterService();

```

`backend/src/services/aiTools.js`

```javascript
// backend/src/services/aiTools.js

/**
 * TOOL_DEFINITIONS is a manifest of functions the Gemini AI can call.
 * The descriptions are critical, as they tell the AI *when* to use each tool.
 */
export const TOOL_DEFINITIONS = [
  {
    name: 'handle_emergency_request',
    description: `Use for any urgent, one-time blood request. The message may contain details like blood group, city, or hospital.`,
    parameters: {
      type: 'object',
      properties: {
        patient_name: { type: 'string', description: 'Name of the patient needing blood. If not mentioned, use "Unknown".' },
        blood_group: { type: 'string', description: 'The blood group needed, like A+, O-, AB+.' },
        city: { type: 'string', description: 'The city where the hospital is located.' }
      },
      required: ['blood_group', 'city']
    }
  },
  {
    // ✅ UPDATED: This tool can now extract parameters from a detailed message.
    name: 'handle_patient_onboarding',
    description: `Use when a user wants to register a PATIENT for long-term support. This is for long-term care, not one-time emergencies. Extract the patient's name, city, and blood group if provided.`,
    parameters: {
      type: 'object',
      properties: {
        patient_name: { type: 'string', description: 'The name of the patient. Default to "the patient" if not specified.' },
        city: { type: 'string', description: 'The city where the patient needs support.' },
        blood_group: { type: 'string', description: "The patient's blood group." }
      },
      required: [] // Parameters are optional, the bot can ask for them if missing.
    }
  },
  {
    // ✅ This description is now more specific to donors.
    name: 'handle_donor_registration',
    description: `Use when a user wants to register as a DONOR or makes a generic registration request like "register me" or "create an account". Key phrases are "I want to donate", "register me as a donor", or "sign me up". Do NOT use this tool if the user mentions "patient".`,
    parameters: {
      type: 'object',
      properties: {
        name: { type: 'string', description: 'Full name of the new donor. Default to "Unknown".' },
        blood_group: { type: 'string', description: 'The blood group of the person. Default to "Unknown".' },
        city: { type: 'string', description: 'The city where the donor lives. Default to "Unknown".' }
      },
      required: []
    }
  },
  {
    name: 'handle_join_bridge_request',
    description: `Use when an EXISTING registered donor specifically asks to join a "Blood Bridge". This is a rotational system for supporting a specific patient.`,
    parameters: { 
      type: 'object', 
      properties: {}
    }
  },

  {
    name: 'handle_snooze_request',
    description: 'Use when a donor wants to temporarily pause notifications. It can understand durations like "a month", "10 days", "2 weeks".',
    parameters: {
      type: 'object',
      properties: {
        duration: { type: 'integer', description: 'The number value for the duration (e.g., 10 for "10 days").' },
        unit: { type: 'string', enum: ['day', 'week', 'month'], description: 'The unit of time for the snooze.' }
      },
      required: ['duration', 'unit']
    }
  },
  {
    name: 'get_my_dashboard',
    description: 'Use this when a registered donor asks for their personal status, points, badges, or "mydashboard".',
    parameters: {
      type: 'object',
      properties: {},
      required: []
    }
  },
  {
    name: 'get_leaderboard',
    description: 'Use this when a user asks to see the "leaderboard", "top donors", or "rankings".',
    parameters: {
      type: 'object',
      properties: {},
      required: []
    }
  },
];

```

`backend/src/services/bridgeCoordinationService.js`

```javascript
// backend/src/services/bridgeCoordinationService.js
import db from '../config/db.js';
import whatsappService from './whatsappService.js';
import { generateShortCode } from '../utils/otpHelper.js';

class BridgeCoordinationService {
  async requestTransfusion(bridgeId) {
    const { rows: [bridge] } = await db.query(
      `SELECT bb.*, p.name as patient_name
       FROM blood_bridges bb
       JOIN patients p ON bb.patient_id = p.id
       WHERE bb.id = $1`,
      [bridgeId]
    );
    if (!bridge) throw new Error(`Blood Bridge with ID ${bridgeId} not found.`);

    // --- NEW LOGIC: PREVENT DUPLICATE REQUESTS ---
    if (bridge.active_request_id) {
      throw new Error(`Request failed: Patient ${bridge.patient_name} already has an active bridge request.`);
    }
    // --- END NEW LOGIC ---

    const { rows: members } = await db.query(
      // Find the next donor who is currently 'available'
      `SELECT u.id, u.name, u.phone
       FROM bridge_members bm
       JOIN users u ON bm.donor_id = u.id
       WHERE bm.bridge_id = $1 AND bm.status = 'active' AND u.availability_status = 'available'
       ORDER BY bm.position ASC`,
      [bridgeId]
    );

    if (members.length === 0) {
      // This is a "Bridge Failure" scenario. We need to escalate.
      // For now, we'll throw an error that the admin will see.
      // In Task 4 (Escalation), we will automate this.
      throw new Error(`No available donors found in the bridge for ${bridge.patient_name}. Please escalate to a general emergency.`);
    }

    const donorToNotify = members[0]; // The SQL query now only returns available donors in order

    const shortCode = generateShortCode();
    // Create the request and get its ID back
    const { rows: [newRequest] } = await db.query(
      `INSERT INTO emergency_requests (patient_name, blood_group, city, requested_by_phone, short_code, request_type, bridge_id, units_needed)
       VALUES ($1, $2, $3, 'system', $4, 'bridge', $5, 1) RETURNING id;`,
      [bridge.patient_name, bridge.blood_group, bridge.city, shortCode, bridge.id]
    );

    // --- NEW LOGIC: LINK THE ACTIVE REQUEST TO THE BRIDGE ---
    await db.query(
        'UPDATE public.blood_bridges SET active_request_id = $1 WHERE id = $2',
        [newRequest.id, bridgeId]
    );
    // --- END NEW LOGIC ---

    const message = `Hi ${donorToNotify.name}, it's your turn in the Blood Bridge for patient *${bridge.patient_name}*.\n\nYour help is needed for their scheduled transfusion. Please reply with *YES ${shortCode}* to confirm your availability.`;
    await whatsappService.sendTextMessage(donorToNotify.phone, message);

    return { success: true, message: `Successfully notified ${donorToNotify.name} for patient ${bridge.patient_name}.` };
  }
  
  async rotateBridge(bridgeId, client = db) {
    // This function now does two things: rotates the position AND clears the active request ID.
    const { rows: [bridge] } = await client.query('SELECT rotation_position FROM blood_bridges WHERE id = $1', [bridgeId]);
    const { rows: [{ count }] } = await client.query('SELECT COUNT(*) FROM bridge_members WHERE bridge_id = $1 AND status = \'active\'', [bridgeId]);

    if (!bridge || count === '0') {
      console.error(`Cannot rotate bridge ${bridgeId}: Bridge or members not found.`);
      return;
    }

    const totalMembers = parseInt(count, 10);
    // We use the current position to find the next one, ensuring rotation
    const currentPositionInList = (bridge.rotation_position - 1);
    const nextPosition = (currentPositionInList % totalMembers) + 1;

    // Update bridge: clear active request and set new rotation position
    await client.query(
      'UPDATE blood_bridges SET rotation_position = $1, active_request_id = NULL WHERE id = $2',
      [nextPosition, bridgeId]
    );
    console.log(`Blood Bridge ${bridgeId} rotated successfully to position ${nextPosition} and cleared active request.`);
  }  // In backend/src/services/bridgeCoordinationService.js, inside the class

  /**
   * Finds all bridged patients who are due for a transfusion and initiates the request.
   * This is designed to be run automatically by a scheduler.
   */
  async triggerAutomaticBridgeRequests() {
    console.log('CRON JOB: Checking for due bridge patients...');
    try {
      // 1. Find all patients who are bridged and due for a transfusion today or in the past.
      const { rows: duePatients } = await db.query(
        `SELECT p.id, p.name, bb.id as bridge_id
         FROM patients p
         JOIN blood_bridges bb ON p.id = bb.patient_id
         WHERE 
           p.status = 'bridged' AND 
           p.last_transfusion_date IS NOT NULL AND 
           p.frequency_in_days IS NOT NULL AND
           (p.last_transfusion_date + p.frequency_in_days * INTERVAL '1 day') <= NOW() AND
           bb.active_request_id IS NULL -- IMPORTANT: Only trigger if there isn't one already active
        `
      );

      if (duePatients.length === 0) {
        console.log('CRON JOB: No patients are due for an automatic bridge request today.');
        return;
      }

      console.log(`CRON JOB: Found ${duePatients.length} patient(s) due for transfusion. Initiating requests...`);

      // 2. Loop through each due patient and call the existing requestTransfusion function.
      for (const patient of duePatients) {
        console.log(`CRON JOB: Initiating request for patient ${patient.name} (Bridge ID: ${patient.bridge_id})`);
        try {
          // We reuse the same logic that the admin dashboard button uses.
          await this.requestTransfusion(patient.bridge_id);
        } catch (error) {
          console.error(`CRON JOB: Failed to initiate request for bridge ${patient.bridge_id}. Reason: ${error.message}`);
          // In a production system, you might send an alert to an admin here.
        }
      }
    } catch (error) {
      console.error("CRITICAL ERROR in cron job triggerAutomaticBridgeRequests:", error);
    }
  }

/**
 * Finds all bridged patients who are due for a transfusion and initiates the request.
 * This is designed to be run automatically by a scheduler.
 */
async triggerAutomaticBridgeRequests() {
  console.log('CRON JOB: Checking for due bridge patients...');
  try {
    // 1. Find all patients who are bridged and due for a transfusion today or in the past.
    const { rows: duePatients } = await db.query(
      `SELECT p.id, p.name, bb.id as bridge_id
       FROM patients p
       JOIN blood_bridges bb ON p.id = bb.patient_id
       WHERE 
         p.status = 'bridged' AND 
         p.last_transfusion_date IS NOT NULL AND 
         p.frequency_in_days IS NOT NULL AND
         (p.last_transfusion_date + p.frequency_in_days * INTERVAL '1 day') <= NOW() AND
         bb.active_request_id IS NULL -- IMPORTANT: Only trigger if there isn't one already active
      `
    );

    if (duePatients.length === 0) {
      console.log('CRON JOB: No patients are due for an automatic bridge request today.');
      return;
    }

    console.log(`CRON JOB: Found ${duePatients.length} patient(s) due for transfusion. Initiating requests...`);

    // 2. Loop through each due patient and call the existing requestTransfusion function.
    for (const patient of duePatients) {
      console.log(`CRON JOB: Initiating request for patient ${patient.name} (Bridge ID: ${patient.bridge_id})`);
      try {
        // We reuse the same logic that the admin dashboard button uses.
        await this.requestTransfusion(patient.bridge_id);
      } catch (error) {
        console.error(`CRON JOB: Failed to initiate request for bridge ${patient.bridge_id}. Reason: ${error.message}`);
        // In a production system, you might send an alert to an admin here.
      }
    }
  } catch (error) {
    console.error("CRITICAL ERROR in cron job triggerAutomaticBridgeRequests:", error);
  }
}
}

export default new BridgeCoordinationService();

```

`backend/src/services/bridgeService.js`

```javascript
// backend/src/services/bridgeService.js
import db from '../config/db.js';
import { normalizePhoneNumber } from '../utils/phoneHelper.js';

class BridgeService {
  /**
   * Finds the best active bridge for a new donor to join based on city and blood group.
   * "Best" is defined as the bridge with the fewest members, to ensure balance.
   */
  async findBestBridgeForDonor(city, bloodGroup) {
    const query = `
      SELECT bb.id, bb.name FROM blood_bridges bb
      LEFT JOIN bridge_members bm ON bb.id = bm.bridge_id
      WHERE bb.city ILIKE $1 AND bb.blood_group = $2 AND bb.active = true
      GROUP BY bb.id, bb.name
      HAVING COUNT(bm.id) < 10 -- Only consider bridges that are not full
      ORDER BY COUNT(bm.id) ASC, bb.created_at ASC -- Prioritize the least full, oldest bridge
      LIMIT 1;
    `;
    const { rows: [bestBridge] } = await db.query(query, [`%${city}%`, bloodGroup]);
    return bestBridge;
  }

  /**
   * Adds a donor to the best available bridge.
   * @param {string} donorId - The UUID of the donor to add.
   */
  async addDonorToBridge(donorId) {
    try {
      const { rows: [donor] } = await db.query('SELECT city, blood_group FROM users WHERE id = $1', [donorId]);
      if (!donor) throw new Error('Donor not found.');
      
      const bridge = await this.findBestBridgeForDonor(donor.city, donor.blood_group);
      if (!bridge) {
        console.log(`No active bridge with available space found for ${donor.city}/${donor.blood_group}.`);
        return { success: true, status: 'no_bridge_found' };
      }

      await db.query(
        "INSERT INTO bridge_members(bridge_id, donor_id, position) VALUES($1, $2, (SELECT COALESCE(MAX(position), 0) + 1 FROM bridge_members WHERE bridge_id = $1)) ON CONFLICT DO NOTHING",
        [bridge.id, donorId]
      );

      console.log(`Successfully added donor ${donorId} to bridge: ${bridge.name} (${bridge.id}).`);
      return { success: true, status: 'added_to_bridge' };
    } catch (error) {
      console.error('Error adding donor to bridge:', error);
      return { success: false, error };
    }
  }

  /**
   * Handles a request from a donor to join a bridge via their phone number.
   */
  async addDonorToBridgeByPhone(donorPhone) {
    const sanitizedPhone = normalizePhoneNumber(donorPhone);
    try {
      const { rows: [donor] } = await db.query('SELECT id, name, city, blood_group FROM users WHERE phone = $1', [sanitizedPhone]);
      if (!donor) {
        return "It looks like you're not registered yet. Please register first!";
      }
     
      const { rows: [existingMember] } = await db.query('SELECT id FROM bridge_members WHERE donor_id = $1', [donor.id]);
      if (existingMember) {
        return `Thank you, ${donor.name}! You are already a valued member of a Blood Bridge.`;
      }
      const bridge = await this.findBestBridgeForDonor(donor.city, donor.blood_group);
      if (!bridge) {
        return `Thank you for your interest, ${donor.name}! We don't have a Blood Bridge matching your profile right now, but we'll notify you when one becomes available.`;
      }
      await db.query(
        "INSERT INTO bridge_members(bridge_id, donor_id, position) VALUES($1, $2, (SELECT COALESCE(MAX(position), 0) + 1 FROM bridge_members WHERE bridge_id = $1)) ON CONFLICT DO NOTHING",
        [bridge.id, donor.id]
      );
     
      return `Welcome to ${bridge.name}! You are now part of a dedicated life-saving team. ❤️`;
    } catch (error) {
      console.error('Error adding donor to bridge by phone:', error);
      return 'Sorry, we encountered an error. Please try again later.';
    }
  }

  /**
   * Populates a newly created bridge with the best-matched donors from the general pool.
   */
  async populateNewBridge(bridgeId, city, bloodGroup, pincode) {
    try {
      console.log(`Populating bridge ${bridgeId} for city: ${city}, blood group: ${bloodGroup}, pincode: ${pincode}`);
      const { rows: bestDonors } = await db.query(
        'SELECT donor_id, final_score FROM find_donors_for_bridge($1, $2, $3, $4)',
        [city, bloodGroup, pincode, 8]
      );
      
      if (!bestDonors || bestDonors.length === 0) {
        console.warn(`No donors found for bridge ${bridgeId}`);
        return { success: true, count: 0 };
      }

      const insertQueries = bestDonors.map((donor, index) =>
        db.query(
          'INSERT INTO bridge_members(bridge_id, donor_id, position) VALUES($1, $2, $3)',
          [bridgeId, donor.donor_id, index + 1]
        )
      );

      await Promise.all(insertQueries);
      console.log(`Successfully populated bridge ${bridgeId} with ${bestDonors.length} donors`);
      return { success: true, count: bestDonors.length };
    } catch (error) {
      console.error(`Error populating bridge ${bridgeId}:`, {
        error: error.message, city, bloodGroup, pincode,
      });
      throw new Error(`Failed to populate bridge: ${error.message}`);
    }
  }
}

export default new BridgeService(); 

```

`backend/src/services/donorPreferenceService.js`

```javascript
// backend/src/services/donorPreferenceService.js
import db from '../config/db.js';
import whatsappService from './whatsappService.js';

class DonorPreferenceService {
  /**
   * Sets a snooze period for a donor, pausing notifications.
   * @param {string} phone - The donor's phone number.
   * @param {object} params - Parameters from the AI, e.g., { duration: 1, unit: 'week' }.
   */
  async handleSnooze(phone, params) {
    const { duration = 15, unit = 'day' } = params; // Default to 15 days if AI provides no params
    
    try {
      const interval = `${duration} ${unit}`;
      const { rows: [user] } = await db.query(
        "UPDATE users SET snooze_until = NOW() + $1::interval WHERE phone = $2 RETURNING snooze_until",
        [interval, phone]
      );

      if (user && user.snooze_until) {
        const snoozeDate = new Date(user.snooze_until).toLocaleDateString('en-IN');
        const message = `Got it. I've paused all non-critical notifications for you until ${snoozeDate}. We'll reach out again after that. Thank you for being a donor!`;
        await whatsappService.sendTextMessage(phone, message);
      }
    } catch (error) {
      console.error(`Error setting snooze for ${phone}:`, error);
      await whatsappService.sendTextMessage(phone, "I'm sorry, I encountered an error while setting your preferences.");
    }
  }

  /**
   * Sets the Do Not Disturb (DND) status for a donor, permanently stopping notifications.
   * @param {string} phone - The donor's phone number.
   */
  async handleDnd(phone) {
    try {
      await db.query(
        "UPDATE users SET dnd_status = true, availability_status = 'unavailable' WHERE phone = $1",
        [phone]
      );
      const message = "You have been unsubscribed from all future notifications. We're sad to see you go, but we respect your decision. If you ever change your mind, just send 'Register' to sign up again.";
      await whatsappService.sendTextMessage(phone, message);
    } catch (error) {
      console.error(`Error setting DND for ${phone}:`, error);
      await whatsappService.sendTextMessage(phone, "I'm sorry, I encountered an error while updating your DND status.");
    }
  }
}

export default new DonorPreferenceService();

```

`backend/src/services/emergencyService.js`

```javascript
// backend/src/services/emergencyService.js
import db from '../config/db.js';
import whatsappService from './whatsappService.js';
import aiRouterService from './aiRouterService.js';
import mlService from './mlService.js';
import geocodingService from './geocodingService.js';
import { getDistanceInKm } from '../utils/distanceHelper.js';
import { normalizeBloodGroup } from '../utils/dataSanitizer.js';
import { normalizePhoneNumber } from '../utils/phoneHelper.js';

const VALID_BLOOD_GROUPS = ['A+', 'A-', 'B+', 'B-', 'O+', 'O-', 'AB+', 'AB-'];
const activeTimeouts = new Map();

class EmergencyService {
  async handleEmergencyRequest(userMessage, requesterPhone) {
    const sanitizedPhone = normalizePhoneNumber(requesterPhone);
    try {
      const route = await aiRouterService.routeMessageWithContext(userMessage, 'Unregistered');
      if (route && route.tool === 'handle_emergency_request' && route.params.blood_group && route.params.city) {
        console.log("AI successfully extracted details:", route.params);
        await this.createEmergencyRequest(route.params, sanitizedPhone);
      } else {
        console.log('AI could not extract necessary details. Prompting user.');
        const followupMessage = "I understand this is an emergency. To find a donor, please provide the patient's blood group (e.g., A+, O-) and the city where the hospital is located.";
        await whatsappService.sendTextMessage(sanitizedPhone, followupMessage);
      }
    } catch (error) {
      console.error('CRITICAL ERROR in handleEmergencyRequest:', error);
      await whatsappService.sendTextMessage(requesterPhone, 'We could not process your request due to a system error.');
    }
  }  

  async createEmergencyRequest(params, requesterPhone) {
    const { 
      patient_name = 'Unknown', 
      blood_group, 
      city, 
      hospital_name = 'Unknown', 
      units_needed = 1
    } = params;
    try {
      const normalizedBG = normalizeBloodGroup(blood_group);
      if (!VALID_BLOOD_GROUPS.includes(normalizedBG)) {
        const validationErrorMessage = `Sorry, "${blood_group}" is not a recognized blood group. Please use a valid one (e.g., O+, AB-).`;
        await whatsappService.sendTextMessage(requesterPhone, validationErrorMessage);
        return;
      }
      
      const coords = await geocodingService.getCoords(hospital_name, city, null).catch(err => {
        console.error("Geocoding service failed, but continuing without coordinates.", err);
        return null;
      });

      const shortCode = Math.floor(1000 + Math.random() * 9000).toString();

      const { rows: [request] } = await db.query(
        `INSERT INTO emergency_requests (patient_name, blood_group, city, hospital_name, requested_by_phone, short_code, latitude, longitude, units_needed)
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING *;`,
        [patient_name, normalizedBG, city, hospital_name, requesterPhone, shortCode, coords?.latitude, coords?.longitude, units_needed]
      );
      
      console.log(`Successfully created emergency request ID: ${request.id}`);
      await whatsappService.sendTextMessage(requesterPhone, `✅ Emergency request active! We are now running a hyperlocal search for *${patient_name}*.`);
      
      await this.findAndNotifyDonors(request);
    } catch (error) {
      console.error('CRITICAL ERROR creating emergency request in database:', error);
      await whatsappService.sendTextMessage(requesterPhone, 'We could not process your request due to a system error.');
    }
  }
  
  async findAndNotifyDonors(request) {
    const TIMEOUT_IN_MINUTES = 2;
    const { id: requestId, requested_by_phone } = request;
    
    try {
      // 1. Find all donors who have already been contacted for this request.
      const { rows: notifiedDonors } = await db.query(
        'SELECT donor_id FROM donor_responses WHERE request_id = $1',
        [requestId]
      );
      const excludedDonorIds = notifiedDonors.map(d => d.donor_id);

      // 2. Find the next best available donors.
      let topScoredDonors = await this.findAndRankGeneralDonors(request.blood_group, request.city, excludedDonorIds);

      // 3. Handle the case where no donors are left.
      if (topScoredDonors.length === 0) {
        console.warn(`Search complete for request ${requestId}: No new donors found.`);
        const alertMessage = `⚠️ We have contacted all available donors in our network for *${request.patient_name}*. This request has been flagged for admin review.`;
        await whatsappService.sendTextMessage(requested_by_phone, alertMessage);
        await db.query("INSERT INTO inbox_messages (user_phone, user_message, reason) VALUES ($1, $2, $3)", [requested_by_phone, `Donor search exhausted for patient ${request.patient_name}`, 'Donor Search Exhausted']);
        return;
      }

      // 4. Select only the single best donor from the list.
      const bestDonor = topScoredDonors[0];
      
      const notificationMessage = 
          `🚨 URGENT: A patient needs your help!\n\n` +
          `Patient: *${request.patient_name}*\n` +
          `Blood Group: *${request.blood_group}*\n` +
          `Location: ${request.hospital_name}, ${request.city}\n\n` +
          `To confirm you can donate, please reply with: *YES ${request.short_code}*\n\n` +
          `If you are unable to help, please reply "NO" so we can find another hero quickly.`;
        
      // 5. Log the attempt and send the message to the single best donor.
      await db.query(`INSERT INTO donor_responses (donor_id, request_id, response) VALUES ($1, $2, 'pending') ON CONFLICT (donor_id, request_id) DO UPDATE SET response = 'pending'`, [bestDonor.id, requestId]);
      await db.query('UPDATE users SET notifications_received = notifications_received + 1 WHERE id = $1', [bestDonor.id]);
      await whatsappService.sendTextMessage(bestDonor.phone, notificationMessage);
      
      // 6. Inform the requester and set the automatic escalation timeout.
      const adminMessage = `✅ Search ongoing... Notifying the best match: *${bestDonor.name}*. If they don't respond in ${TIMEOUT_IN_MINUTES} minutes, we will contact the next donor.`;
      await whatsappService.sendTextMessage(requested_by_phone, adminMessage);

      const timeoutId = setTimeout(() => {
        console.log(`[TIMEOUT] Donor ${bestDonor.name} did not respond for request ${requestId}. Escalating...`);
        this.findNextDonorForRequest(requestId);
      }, TIMEOUT_IN_MINUTES * 60 * 1000);

      activeTimeouts.set(requestId.toString(), timeoutId);

    } catch (error) {
      console.error(`CRITICAL ERROR in findAndNotifyDonors for request ${requestId}:`, error);
      await whatsappService.sendTextMessage(requested_by_phone, 'We encountered a system error while searching for donors. Our team has been notified.');
    }
  }

  async findNextDonorForRequest(requestId) {
    console.log(`[ESCALATION] Finding next donor batch for request ${requestId}`);
    this.clearEmergencyTimeout(requestId);
    const { rows: [requestInfo] } = await db.query(`SELECT * FROM emergency_requests WHERE id = $1`, [requestId]);
    
    if (requestInfo && requestInfo.status === 'active') {
      await this.findAndNotifyDonors(requestInfo);
    } else {
      console.warn(`[ESCALATION] Not proceeding for request ${requestId}, status is '${requestInfo ? requestInfo.status : 'NOT FOUND'}'`);
    }
  }

  async escalateRequest(requestId) {
    const BATCH_SIZE = 10;
    try {
      const { rows: [request] } = await db.query(
          'SELECT * FROM emergency_requests WHERE id = $1 AND status = \'active\'',
          [requestId]
      );
      if (!request) {
          throw new Error('Active emergency request not found.');
      }

      const { rows: notifiedDonors } = await db.query(
          'SELECT donor_id FROM donor_responses WHERE request_id = $1',
          [requestId]
      );
      const excludedDonorIds = notifiedDonors.map(d => d.donor_id);
      console.log(`Escalating request ${requestId}. Excluding ${excludedDonorIds.length} already-notified donor(s).`);
      
      const nextDonors = await this.findAndRankGeneralDonors(
          request.blood_group,
          request.city,
          excludedDonorIds
      );
      if (nextDonors.length === 0) {
          throw new Error('No additional available donors found in the network for this request.');
      }

      const batchToNotify = nextDonors.slice(0, BATCH_SIZE);
      const notificationPromises = batchToNotify.map(async (donor) => {
          try {
              const notificationMessage = `🚨 URGENT (Escalated): You are a top match for an emergency!\n\nPatient *${request.patient_name}* needs your help (${request.blood_group}).\n\nReply *YES ${request.short_code}* to help.`;
              
              await db.query(`INSERT INTO donor_responses (donor_id, request_id, response) VALUES ($1, $2, 'pending') ON CONFLICT (donor_id, request_id) DO NOTHING;`, [donor.id, requestId]);
              const result = await whatsappService.sendTextMessage(donor.phone, notificationMessage);
              
              if(result.success) {
                  await db.query('UPDATE users SET notifications_received = notifications_received + 1 WHERE id = $1', [donor.id]);
              }
          } catch (err) {
              console.error(`Failed to notify donor ${donor.id} for request ${requestId}:`, err.message);
          }
      });

      await Promise.all(notificationPromises);
      const adminMessage = `✅ Escalation successful. Notified a batch of ${batchToNotify.length} new top-ranked donors.`;
      await whatsappService.sendTextMessage(request.requested_by_phone, adminMessage);
      
      return { success: true, message: `Successfully escalated request and notified ${batchToNotify.length} new donors.` };
    } catch (error) {
      console.error(`CRITICAL ERROR during escalation for request ${requestId}:`, error);
      throw error;
    }
  }
  
  clearEmergencyTimeout(requestId) {
    if (activeTimeouts.has(requestId.toString())) {
      clearTimeout(activeTimeouts.get(requestId.toString()));
      activeTimeouts.delete(requestId.toString());
      console.log(`[TIMEOUT CLEARED] Timeout for request ${requestId} has been stopped.`);
    }
  }

  async findAndRankGeneralDonors(bloodGroup, city, excludedDonorIds = []) {
    const { rows: availableDonors } = await db.query(
      `SELECT id, name, phone, last_donation, notifications_received, donations_confirmed, streak_count, latitude, longitude
       FROM users
       WHERE user_type = 'donor' AND blood_group = $1 AND city ILIKE $2
         AND availability_status = 'available' AND dnd_status = false
         AND (snooze_until IS NULL OR snooze_until < NOW())
         AND id NOT IN (SELECT unnest($3::uuid[]))
       LIMIT 50;`,
      [normalizeBloodGroup(bloodGroup), city, excludedDonorIds]
    );
    if (!availableDonors || availableDonors.length === 0) return [];
    
    const scoringPromises = availableDonors.map(donor => mlService.scoreSingleDonor(donor));
    const results = await Promise.allSettled(scoringPromises);
    
    const scoredDonors = availableDonors.map((donor, index) => {
        const score = results[index].status === 'fulfilled' ? results[index].value.final_score : 0;
        return { ...donor, final_score: score };
    });
    
    scoredDonors.sort((a, b) => b.final_score - a.final_score);
    return scoredDonors;
  }
}

export default new EmergencyService();

```

`backend/src/services/engagementService.js`

```javascript
// backend/src/services/engagementService.js
import db from '../config/db.js';
import whatsappService from './whatsappService.js';

class EngagementService {
  /**
   * Finds donors whose 90-day cooldown period has ended and reminds them
   * that they are now eligible to donate again.
   */
  async sendEligibilityReminders() {
    console.log('CRON JOB: Running sendEligibilityReminders...');
    try {
      // 1. Find all donors who are ready to be re-activated.
      // - Their cooldown must have expired (cooldown_until <= NOW()).
      // - Their status must currently be 'unavailable' (from their last donation).
      // - They must not have opted out of all notifications (dnd_status = false).
      const { rows: eligibleDonors } = await db.query(
        `SELECT id, name, phone
         FROM users
         WHERE user_type = 'donor'
           AND availability_status = 'unavailable'
           AND dnd_status = false
           AND cooldown_until <= NOW()`
      );

      if (eligibleDonors.length === 0) {
        console.log('CRON JOB: No donors are newly eligible today.');
        return;
      }

      console.log(`CRON JOB: Found ${eligibleDonors.length} newly eligible donors. Preparing to send reminders.`);

      // 2. Prepare all the database updates.
      // We will collect all the user IDs to update their status in a single efficient query.
      const donorIdsToUpdate = eligibleDonors.map(donor => donor.id);
      const updatePromise = db.query(
        "UPDATE users SET availability_status = 'available' WHERE id = ANY($1::uuid[])",
        [donorIdsToUpdate]
      );

      // 3. Prepare all the WhatsApp messages.
      // We will send messages concurrently for maximum speed.
      const messagePromises = eligibleDonors.map(donor => {
        const message = `Hi ${donor.name}! 👋\n\nGreat news! Your 90-day waiting period is over, and you are now eligible to save a life again.\n\nYour status has been updated to "Available". Thank you for being a vital part of the BloodBridge community! ❤️`;
        return whatsappService.sendTextMessage(donor.phone, message);
      });

      // 4. Execute all promises (database updates and messages).
      // Promise.allSettled is used so that if one message fails, it doesn't stop the others.
      const results = await Promise.allSettled([updatePromise, ...messagePromises]);

      // 5. Log the results for monitoring.
      let successCount = 0;
      results.forEach((result, index) => {
        if (result.status === 'fulfilled') {
          if (index > 0) successCount++; // Don't count the DB update as a message
        } else {
          console.error(`CRON JOB: Failed to process reminder for donor ID ${donorIdsToUpdate[index - 1]}:`, result.reason);
        }
      });
      console.log(`CRON JOB: Successfully sent ${successCount} eligibility reminders.`);
      console.log(`CRON JOB: Updated ${donorIdsToUpdate.length} donors to 'available' status.`);

    } catch (error) {
      console.error('CRITICAL ERROR in cron job sendEligibilityReminders:', error);
    }
  }

  /**
   * Finds active, eligible donors who have not donated in a long time
   * and sends them a personalized re-engagement message.
   */
  async sendInactiveDonorNudges() {
    console.log('CRON JOB: Running Inactive Donor Nudge...');
    try {
      // 1. Find donors who are available but haven't donated in over 6 months (180 days).
      const { rows: inactiveDonors } = await db.query(
        `SELECT id, name, phone 
         FROM users
         WHERE 
           user_type = 'donor' AND
           availability_status = 'available' AND
           dnd_status = false AND
           (snooze_until IS NULL OR snooze_until < NOW()) AND
           (last_donation IS NULL OR last_donation < NOW() - INTERVAL '180 days')`
      );

      if (inactiveDonors.length === 0) {
        console.log('CRON JOB: No inactive donors to nudge this week.');
        return;
      }

      console.log(`CRON JOB: Found ${inactiveDonors.length} inactive donors. Sending nudges...`);
      for (const donor of inactiveDonors) {
        const nudgeMessage = `Hi ${donor.name}! We miss you. Patients in your area are still in need of heroes like you. We hope you'll consider donating again soon. Your support makes a huge difference!`;
        await whatsappService.sendTextMessage(donor.phone, nudgeMessage);
        // Add a small delay to avoid spamming the WhatsApp API
        await new Promise(resolve => setTimeout(resolve, 500));
      }
    } catch (error) {
      console.error("CRITICAL ERROR in cron job sendInactiveDonorNudges:", error);
    }
  }
}

export default new EngagementService(); 

```

`backend/src/services/faqService.js`

```javascript
// backend/src/services/faqService.js
import db from '../config/db.js';
import whatsappService from './whatsappService.js';
import mlService from './mlService.js';
import { GoogleGenerativeAI } from '@google/generative-ai'; // ✅ ADDED: Import Google AI SDK
import config from '../config/config.js'; // ✅ ADDED: Import config for API key

// ✅ ADDED: Initialize the generative model for dynamic answers
const genAI = new GoogleGenerativeAI(config.geminiApiKey);
const generativeModel = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" });

const SENSITIVE_KEYWORDS = ['problem', 'pain', 'issue', 'bad', 'reaction', 'scared', 'help me', 'confused', 'afraid'];

class FaqService {
  async handleFaq(query, phone) {
    const disclaimer = "\n\n_Disclaimer: This is automated information. For medical advice, please consult a doctor._";
    try {
      // 1. First, try the RAG system for a precise, pre-written answer.
      const ragResponse = await mlService.client.post('/generate-faq-answer', { query });

      if (ragResponse.data && ragResponse.data.source_found) {
        console.log(`RAG HIT: Found a precise answer for "${query}".`);
        await whatsappService.sendTextMessage(phone, ragResponse.data.answer + disclaimer);
        // We can stop here because we found a perfect answer.
        return;
      }

      // 2. ✅ NEW: If RAG fails, fallback to the generative model with live data.
      console.log(`RAG MISS: Falling back to generative model with live data for "${query}".`);
      
      let contextString = 'You are a helpful and compassionate assistant for BloodBridge AI. Answer the user\'s question concisely.';
      const lowerQuery = query.toLowerCase();

      // Check for keywords and inject live data into the context.
      if (lowerQuery.includes('patient') || lowerQuery.includes('support')) {
        const { rows } = await db.query("SELECT COUNT(*) as count FROM patients WHERE status = 'bridged'");
        const patientCount = rows[0].count;
        if (patientCount > 0) {
          contextString += ` IMPORTANT CONTEXT: We are currently supporting ${patientCount} long-term patients.`;
        }
      } else if (lowerQuery.includes('donor') || lowerQuery.includes('donors')) {
        const { rows } = await db.query("SELECT COUNT(*) as count FROM users WHERE user_type = 'donor' AND availability_status = 'available'");
        const donorCount = rows[0].count;
        if (donorCount > 0) {
          contextString += ` IMPORTANT CONTEXT: We have ${donorCount} active and eligible donors ready to help.`;
        }
      }
      
      // 3. Generate the dynamic answer using the context.
      const prompt = `${contextString}\n\nUser's Question: "${query}"`;
      const result = await generativeModel.generateContent(prompt);
      const response = await result.response;
      const aiText = response.text();

      await whatsappService.sendTextMessage(phone, aiText + disclaimer);

      // 4. Finally, check for sensitive keywords.
     if (SENSITIVE_KEYWORDS.some(keyword => lowerQuery.includes(keyword))) {
        console.log(`Sensitive keyword detected in "${query}". Escalating to admin inbox.`);
        await db.query( "INSERT INTO inbox_messages (user_phone, user_message, reason) VALUES ($1, $2, $3)", [phone, query, 'Sensitive Keyword Detected']);
        const escalationMessage = "It sounds like you might have a specific concern. I have notified an NGO volunteer, and they will contact you on this number shortly.";
        setTimeout(() => { whatsappService.sendTextMessage(phone, escalationMessage); }, 1500);
      }

    } catch (error) {
      console.error("Error calling FAQ service:", error.message);
      const fallbackMessage = "Thank you for your question. An NGO volunteer will get back to you shortly.";
      await whatsappService.sendTextMessage(phone, fallbackMessage);
    }
  }
}

export default new FaqService();

```

`backend/src/services/gamificationService.js`

```javascript
// backend/src/services/gamificationService.js
import db from '../config/db.js';
import whatsappService from './whatsappService.js';

const ACHIEVEMENTS = {
  FIRST_REGISTRATION: { name: 'Community Hero', points: 50, emoji: '❤️' },
  EMERGENCY_RESPONSE: { name: 'Life Saver', points: 100, emoji: '🚨' },
};

class GamificationService {
   async awardPoints(userId, event, userPhone) {
    const achievement = ACHIEVEMENTS[event];
    if (!achievement) return;

    try {
      // Add points to the user's total score.
      const { rows: [user] } = await db.query(
        "UPDATE users SET gamification_points = gamification_points + $1 WHERE id = $2 RETURNING gamification_points",
        [achievement.points, userId]
      );

      if (!user) throw new Error("User not found or update failed.");

      // Log this specific achievement in the achievements table.
      await db.query(
        "INSERT INTO achievements(user_id, badge_type, points_awarded) VALUES($1, $2, $3)",
        [userId, achievement.name, achievement.points]
      );

      // Send a notification to the user.
      const notification = `🏆 Achievement Unlocked! 🏆\n\nYou've earned the *${achievement.name}* badge ${achievement.emoji} and received *${achievement.points} points*!\n\nYour new total is *${user.gamification_points} points*.`;
      await whatsappService.sendTextMessage(userPhone, notification);
    } catch (error) {
      console.error(`Error in awardPoints for user ${userId}:`, error);
    }
  } 

  /**
   * ✅ UPDATED: Fetches and formats a complete status report for a donor,
   * including their availability status.
   */
  async getDonorStatus(phone) {
    try {
      // Query now includes availability_status and cooldown_until
      const { rows: [user] } = await db.query(
        'SELECT id, name, gamification_points, last_donation, availability_status, cooldown_until FROM users WHERE phone = $1',
        [phone]
      );
      if (!user) {
        return "It looks like you're not registered as a donor yet. Reply with 'I want to register' to get started!";
      }
      
      const { rows: [rankData] } = await db.query(
        'SELECT count(*) FROM users WHERE user_type = \'donor\' AND gamification_points > $1',
        [user.gamification_points]
      );
      const rank = parseInt(rankData.count) + 1;

      // Format the availability status for the user
      let availabilityMessage = 'Available ✅';
      if (user.availability_status === 'unavailable' && user.cooldown_until) {
        const cooldownDate = new Date(user.cooldown_until).toLocaleDateString('en-IN');
        availabilityMessage = `On Cooldown until ${cooldownDate} ⏳`;
      } else if (user.availability_status !== 'available') {
        availabilityMessage = 'Not Available ❌';
      }

      let statusMessage = `*📊 Your Donor Dashboard 📊*\n\n`;
      statusMessage += `*Name:* ${user.name}\n`;
      statusMessage += `*Status:* ${availabilityMessage}\n`; // Add the status line
      statusMessage += `*Points:* ${user.gamification_points} 🏅\n`;
      statusMessage += `*Current Rank:* #${rank} of all our heroes\n`;
      statusMessage += `*Last Donation:* ${user.last_donation ? new Date(user.last_donation).toLocaleDateString('en-IN') : 'N/A'}`;
      
      return statusMessage;
    } catch (error) {
      console.error(`Error in getDonorStatus for phone ${phone}:`, error);
      return "Sorry, I couldn't fetch your status at this time. Please try again later.";
    }
  }

  /**
   * ✅ UPDATED: Fetches the Top 5 donors AND the requesting user's rank.
   */
  async getLeaderboardMessage(phone) {
    try {
      // Query 1: Get the Top 5 donors
      const { rows: topDonors } = await db.query(
        `SELECT name, gamification_points FROM users 
         WHERE user_type = 'donor' AND gamification_points > 0
         ORDER BY gamification_points DESC LIMIT 5`
      );

      if (topDonors.length === 0) {
        return "The leaderboard is empty right now, but the next donation could change that!";
      }

      // Query 2: Get the current user's rank
      const { rows: [userRankData] } = await db.query(
        `SELECT count(*) FROM users WHERE user_type = 'donor' AND gamification_points > (
           SELECT gamification_points FROM users WHERE phone = $1
         )`,
        [phone]
      );
      const userRank = parseInt(userRankData.count) + 1;

      // Format the message
      let leaderboardMessage = "🏆 *Top 5 Blood Warriors* 🏆\n\n";
      const medals = ['🥇', '🥈', '🥉', '4.', '5.'];
      topDonors.forEach((donor, index) => {
        leaderboardMessage += `${medals[index]} *${donor.name}* (${donor.gamification_points} points)\n`;
      });
      leaderboardMessage += `\n*Your Rank:* #${userRank}`;

      return leaderboardMessage;
    } catch (error) {
      console.error('Error fetching leaderboard for chatbot:', error);
      return "Sorry, I couldn't fetch the leaderboard right now.";
    }
  }
}

export default new GamificationService();

```

`backend/src/services/geocodingService.js`

```javascript
// backend/src/services/geocodingService.js
import axios from 'axios';

class GeocodingService {
    async getCoords(address, city, pincode) {
        if (!address && !pincode) return null;
        const query = `${address || ''}, ${city || ''}, ${pincode || ''}`;
        const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}`;
        try {
            const response = await axios.get(url, {
                headers: { 'User-Agent': 'BloodBridgeAI/1.0 (tech@bloodbridge.org)' }
            });
            if (response.data && response.data.length > 0) {
                const { lat, lon } = response.data[0];
                return { latitude: parseFloat(lat), longitude: parseFloat(lon) };
            }
            return null;
        } catch (error) {
            console.error('Error calling Geocoding API:', error.message);
            return null;
        }
    }
}

export default new GeocodingService();

```

`backend/src/services/loggingService.js`

```javascript
// backend/src/services/loggingService.js
import db from '../config/db.js';

class LoggingService {
  /**
   * Logs an incoming message and now includes the user's phone number directly.
   */
  async logIncoming(phone, message) {
    try {
      // Find the user's ID to maintain the relationship, but also store the phone number.
      const { rows: [user] } = await db.query(
        'SELECT id FROM users WHERE phone = $1',
        [phone]
      );
      const userId = user ? user.id : null;

      // Insert the incoming message, user_id, and the user_phone into the table.
      await db.query(
        'INSERT INTO conversations (user_id, user_phone, message) VALUES ($1, $2, $3)',
        [userId, phone, message]
      );
    } catch (error) {
      console.error('Error logging incoming message to DB:', error);
    }
  }

  /**
   * Logs an outgoing message by finding the last message from a specific phone number.
   */
  async logOutgoing(phone, response) {
    try {
      // Find the last conversation from this user's phone number that doesn't have a response yet
      // and update it with the bot's reply. This is more direct than looking up the user ID first.
      await db.query(
        `UPDATE conversations 
         SET response = $1 
         WHERE id = (
           SELECT id FROM conversations 
           WHERE user_phone = $2 AND response IS NULL 
           ORDER BY created_at DESC 
           LIMIT 1
         )`,
        [response, phone]
      );
    } catch (error) {
      console.error('Error logging outgoing message to DB:', error);
    }
  }
}

export default new LoggingService();

```

`backend/src/services/mlService.js`

```javascript
// backend/src/services/mlService.js
import axios from 'axios';
import db from '../config/db.js';
import config from '../config/config.js';

const CACHE_DURATION_HOURS = 6;

class MLService {
    constructor() {
        this.client = axios.create({
            baseURL: config.mlServiceUrl,
            timeout: 8000,
        });
    }

    /**
     * Scores a single donor, using a cached score if available and not stale.
     */
    async scoreSingleDonor(donor) {
        // Check for a fresh score in the cache first.
        const { rows: [cachedData] } = await db.query(
            "SELECT last_ml_score, score_cached_at FROM users WHERE id = $1",
            [donor.id]
        );

        if (cachedData && cachedData.last_ml_score && cachedData.score_cached_at) {
            const cacheAgeHours = (new Date() - new Date(cachedData.score_cached_at)) / (1000 * 60 * 60);
            if (cacheAgeHours < CACHE_DURATION_HOURS) {
                console.log(`CACHE HIT: Using cached score for donor ${donor.id}`);
                return { final_score: cachedData.last_ml_score };
            }
        }

        console.log(`CACHE MISS: Calling ML service for donor ${donor.id}`);
        try {
            // If no fresh cache, call the Python ML service.
            const response = await this.client.post('/score-donor', {
                donor_id: donor.id,
                last_donation_date: donor.last_donation,
                streak_count: donor.streak_count || 0,
                notifications_received: donor.notifications_received || 0,
                donations_confirmed: donor.donations_confirmed || 0
            });
            
            const newScore = response.data.final_score;

            // Update the cache in the database with the new score.
            db.query(
                "UPDATE users SET last_ml_score = $1, score_cached_at = NOW() WHERE id = $2",
                [newScore, donor.id]
            ).catch(err => console.error(`Failed to cache ML score for donor ${donor.id}:`, err));

            return { final_score: newScore };

        } catch (error) {
            console.error(`🔴 ML Service Error for donor ${donor.id}:`, error.message);
            throw error; // Re-throw the error to be handled by the calling service.
        }
    }
}

export default new MLService();

```

`backend/src/services/patientService.js`

```javascript
// backend/src/services/patientService.js
import db from '../config/db.js';
import whatsappService from './whatsappService.js';
import { normalizeBloodGroup } from '../utils/dataSanitizer.js';
import { normalizePhoneNumber } from '../utils/phoneHelper.js';

class PatientService {
  /**
   * Handles the initial message from a potential patient.
   * Creates a pending record and asks them to opt-in by replying "APPLY".
   */
  async handleNewPatient(params, phone) {
    const sanitizedPhone = normalizePhoneNumber(phone);
    try {
      const { rows: [existingPatient] } = await db.query("SELECT id FROM patients WHERE phone = $1", [sanitizedPhone]);
      if (existingPatient) {
        await whatsappService.sendTextMessage(sanitizedPhone, `Welcome back! Our records show this number is already associated with a patient. An admin will be in touch shortly.`);
        return;
      }

      const { patient_name, city, blood_group } = params;

      // PATH 1: AI extracted details for a one-shot registration (Passes REG-04)
      if (patient_name && city && blood_group) {
        const normalizedBG = normalizeBloodGroup(blood_group);
        await db.query(
          `INSERT INTO patients (name, phone, blood_group, city, status)
           VALUES ($1, $2, $3, $4, 'pending_verification')`,
          [patient_name, sanitizedPhone, normalizedBG, city]
        );
        const finalMessage = `Thank you! We have received the initial information for *${patient_name}*.\n\nAn admin from our team has been notified and will contact you on this number to verify the details.`;
        await whatsappService.sendTextMessage(sanitizedPhone, finalMessage);
      } 
      // PATH 2: Details are missing, fall back to the conversational flow.
      else {
        await db.query(
          `INSERT INTO patients (name, phone, blood_group, city, status)
           VALUES ('Awaiting Input', $1, 'N/A', 'N/A', 'pending_opt_in') ON CONFLICT (phone) DO NOTHING;`,
          [sanitizedPhone]
        );
        await whatsappService.sendTextMessage(sanitizedPhone, `Thank you for reaching out. To begin your application for our Blood Bridge support program, please reply with: *APPLY*`);
      }
    } catch (error) {
      console.error('Error in handleNewPatient:', error);
      await whatsappService.sendTextMessage(sanitizedPhone, 'Sorry, we encountered an error logging your request.');
    }
  }
  
  
  /**
   * Starts the conversational form after the user replies "APPLY".
   */
  async startApplication(phone) {
      const { rows: [patient] } = await db.query("SELECT id FROM patients WHERE phone = $1 AND status = 'pending_opt_in'", [phone]);
      if (!patient) return false;

      await db.query("UPDATE patients SET status = 'pending_details' WHERE id = $1", [patient.id]);
      await this.continueOnboarding(patient.id, phone);
      return true;
  }

  /**
   * The "state machine" that asks the next question based on what info is missing.
   */
  async continueOnboarding(patientId, phone) {
    const { rows: [patient] } = await db.query("SELECT * FROM patients WHERE id = $1", [patientId]);
    if (!patient) return;

    if (patient.name === 'Awaiting Input') {
      await whatsappService.sendTextMessage(phone, "Great! Let's begin.\n\nFirst, what is the patient's full name?");
      return;
    }
    if (patient.blood_group === 'N/A') {
      await whatsappService.sendTextMessage(phone, `Thank you. What is ${patient.name}'s blood group? (e.g., O+, AB-)`);
      return;
    }
    if (patient.city === 'N/A') {
      await whatsappService.sendTextMessage(phone, `Got it. In which city does the patient receive treatment?`);
      return;
    }

    // All details are collected.
    await db.query("UPDATE patients SET status = 'pending_verification' WHERE id = $1", [patientId]);
    const finalMessage = `Thank you! We have all the initial information we need for *${patient.name}*.\n\nAn admin has been notified and will contact you on this number to verify the details.`;
    await whatsappService.sendTextMessage(phone, finalMessage);
  }

  /**
   * Processes a user's reply during the conversational form.
   */
  async processOnboardingReply(message, phone) {
    const { rows: [patient] } = await db.query("SELECT * FROM patients WHERE phone = $1 AND status = 'pending_details'", [phone]);
    if (!patient) return false;

    let columnToUpdate = null;
    let valueToUpdate = message;
    
    if (patient.name === 'Awaiting Input') columnToUpdate = 'name';
    else if (patient.blood_group === 'N/A') {
      columnToUpdate = 'blood_group';
      valueToUpdate = normalizeBloodGroup(message);
    } else if (patient.city === 'N/A') columnToUpdate = 'city';
    
    if (columnToUpdate) {
        await db.query(`UPDATE patients SET ${columnToUpdate} = $1 WHERE id = $2`, [valueToUpdate, patient.id]);
        
        // Ask the next question after a short delay
        setTimeout(() => { this.continueOnboarding(patient.id, phone); }, 500);
        return true;
    }
    return false;
  }
}

export default new PatientService();

```

`backend/src/services/registrationService.js`

```javascript
// backend/src/services/registrationService.js
import db from '../config/db.js';
import whatsappService from './whatsappService.js';
import gamificationService from './gamificationService.js';
import { normalizePhoneNumber } from '../utils/phoneHelper.js';
import { normalizeBloodGroup } from '../utils/dataSanitizer.js';

class RegistrationService {
  /**
   * ✅ REWRITTEN: A single, intelligent function to handle all donor registration.
   */
    async handleNewDonor(params, phone) {
    const sanitizedPhone = normalizePhoneNumber(phone);
    try {
      const { rows: [existingUser] } = await db.query(
        "SELECT id, name, registration_status FROM users WHERE phone = $1", 
        [sanitizedPhone]
      );

      if (existingUser && existingUser.registration_status === 'completed') {
        await whatsappService.sendTextMessage(sanitizedPhone, `Welcome back, ${existingUser.name}! You are already registered.`);
        return;
      }

      const { name, city, blood_group } = params;

      // CASE 1: The AI successfully extracted the details from the user's message.
      if (name && name !== 'Unknown' && city && city !== 'Unknown' && blood_group && blood_group !== 'Unknown') {
        const normalizedBG = normalizeBloodGroup(blood_group);
        
        const { rows: [newUser] } = await db.query(
          `INSERT INTO users(name, city, blood_group, phone, user_type, registration_status, role)
           VALUES($1, $2, $3, $4, 'donor', 'completed', 'Emergency Donor')
           ON CONFLICT (phone) DO UPDATE SET 
             name = EXCLUDED.name, city = EXCLUDED.city, blood_group = EXCLUDED.blood_group, 
             registration_status = 'completed', role = 'Emergency Donor'
           RETURNING *;`,
          [name.trim(), city.trim(), normalizedBG, sanitizedPhone]
        );

        const successMessage = `✅ Registration Complete!\n\nWelcome, ${newUser.name}! You are now a registered Blood Warrior in ${newUser.city}.`;
        await whatsappService.sendTextMessage(sanitizedPhone, successMessage);
        await gamificationService.awardPoints(newUser.id, 'FIRST_REGISTRATION', sanitizedPhone);

        // ✅ NEW LOGIC: Send the interactive prompt to join a bridge.
        const bridgeQuestion = `Would you like to join a "Blood Bridge"?\n\nThis is a dedicated group of donors who support a specific patient with regular transfusions.`;
        const buttons = [
            { id: `join_bridge_${newUser.id}`, title: "Yes, sign me up!" },
            { id: `decline_bridge_${newUser.id}`, title: "Maybe later" }
        ];
        
        // Use a small delay so messages arrive in the correct order
        setTimeout(() => {
            whatsappService.sendInteractiveMessage(sanitizedPhone, bridgeQuestion, buttons);
        }, 1500); // 1.5 second delay

        return;
      }

      // CASE 2: The AI determined the user wants to register but couldn't find the details.
      const followupMessage = 
        "Great! To get you registered as a donor, please reply with your Name, City, and Blood Group.";
      
      await whatsappService.sendTextMessage(sanitizedPhone, followupMessage);

    } catch (error) {
      console.error('Critical error in handleNewDonor:', error);
      await whatsappService.sendTextMessage(sanitizedPhone, 'We encountered an error during registration.');
    }
  }
}

export default new RegistrationService();

```

`backend/src/services/responseService.js`

```javascript
// backend/src/services/responseService.js
import db from '../config/db.js';
import whatsappService from './whatsappService.js';
import { generateOTP } from '../utils/otpHelper.js';
import gamificationService from './gamificationService.js';
import bridgeService from './bridgeService.js';
import BridgeCoordinationService from './bridgeCoordinationService.js';
import emergencyService from './emergencyService.js';

class ResponseService {
    /**
     * Handles the donor's initial reply (e.g., "YES 1234").
     * It validates the code and sends back a 6-digit OTP to verify.
     */
    async handleDonorReplyWithShortCode(donorPhone, shortCode) {
        try {
            const { rows: [request] } = await db.query(`SELECT id FROM emergency_requests WHERE short_code = $1 AND status = 'active'`, [shortCode]);
            if (!request) {
                await whatsappService.sendTextMessage(donorPhone, `Sorry, we couldn't find an active request with code ${shortCode}. It may have been fulfilled.`);
                return;
            }

            const { rows: [user] } = await db.query(`SELECT id FROM users WHERE phone = $1`, [donorPhone]);
            if (!user) {
                await whatsappService.sendTextMessage(donorPhone, "We couldn't find your registration. Please register first.");
                return;
            }

            const otp = generateOTP();
            await db.query(
                `INSERT INTO donor_responses (donor_id, request_id, response, otp, otp_expires_at)
                 VALUES ($1, $2, 'pending', $3, NOW() + INTERVAL '10 minutes')
                 ON CONFLICT (donor_id, request_id) DO UPDATE SET response = 'pending', otp = $3, otp_expires_at = NOW() + INTERVAL '10 minutes';`,
                [user.id, request.id, otp]
            );

            const otpMessage = `Thank you for your quick response! To finalize your confirmation, please reply with *only* the following 6-digit code:\n\n*${otp}*`;
            await whatsappService.sendTextMessage(donorPhone, otpMessage);
        } catch (error) {
            console.error('Error in handleDonorReplyWithShortCode:', error);
            await whatsappService.sendTextMessage(donorPhone, "There was a system error processing your reply.");
        }
    }

    /**
     * Verifies the 6-digit OTP and finalizes the donation confirmation.
     * This function uses a database transaction to ensure all updates succeed or none do.
     */

      async handleSimpleDecline(donorPhone) {
    try {
      const { rows: [user] } = await db.query('SELECT id FROM users WHERE phone = $1', [donorPhone]);
      if (!user) return; // User not registered, do nothing.

      // Find the last active request this donor was notified for.
      const { rows: [lastRequest] } = await db.query(
        `SELECT r.id FROM emergency_requests r 
         JOIN donor_responses dr ON r.id = dr.request_id
         WHERE dr.donor_id = $1 AND r.status = 'active' AND dr.response = 'pending'
         ORDER BY dr.created_at DESC LIMIT 1;`,
        [user.id]
      );
      
      if (lastRequest) {
        // Mark their response as 'declined'.
        await db.query(
          "UPDATE donor_responses SET response = 'declined' WHERE donor_id = $1 AND request_id = $2",
          [user.id, lastRequest.id]
        );
        
        await whatsappService.sendTextMessage(donorPhone, "Thank you for letting us know. We will contact the next available donor immediately.");
        
        // Immediately trigger the escalation to the next batch.
        emergencyService.findNextDonorForRequest(lastRequest.id);
      } else {
        await whatsappService.sendTextMessage(donorPhone, "Thank you for your response. There are no active requests pending for you at this moment.");
      }
    } catch (error) {
      console.error("Error handling simple decline:", error);
    }
  }
    // In responseService.js
async verifyOTPAndConfirm(donorPhone, otp) {
    const client = await db.pool.connect();
    try {
        await client.query('BEGIN');

        const { rows: [response] } = await client.query(
            // Add request_type and bridge_id to the SELECT statement
            `SELECT dr.id, dr.request_id, u.name as donor_name, u.id as donor_id, 
                    er.patient_name, er.requested_by_phone, er.request_type, er.bridge_id
             FROM donor_responses dr JOIN users u ON dr.donor_id = u.id JOIN emergency_requests er ON dr.request_id = er.id
             WHERE u.phone = $1 AND dr.otp = $2 AND dr.otp_expires_at > NOW() AND dr.response = 'pending' FOR UPDATE;`,
            [donorPhone, otp]
        );

        if (!response) {
            await whatsappService.sendTextMessage(donorPhone, "Invalid or expired OTP. Please try the 'YES [code]' step again.");
            await client.query('ROLLBACK');
            return;
        }

        // Perform all database updates
        await client.query(`UPDATE users SET last_donation = NOW(), availability_status = 'unavailable', cooldown_until = NOW() + INTERVAL '90 days', donations_confirmed = donations_confirmed + 1, streak_count = streak_count + 1 WHERE id = $1`, [response.donor_id]);
        await client.query("UPDATE donor_responses SET response = 'accepted', confirmed_at = NOW(), otp = NULL WHERE id = $1", [response.id]);
        await client.query("UPDATE emergency_requests SET status = 'fulfilled' WHERE id = $1", [response.request_id]);
        
        // --- NEW LOGIC: ROTATE THE BRIDGE IF APPLICABLE ---
        // We pass the active transaction client to the rotation function
        if (response.request_type === 'bridge' && response.bridge_id) {
            await bridgeCoordinationService.rotateBridge(response.bridge_id, client);
        }
        // --- END NEW LOGIC ---

        await client.query('COMMIT');

        // Send confirmations and award points
        const donorConfirmationMessage = `✅ Confirmed! Thank you, ${response.donor_name}!\n\nYour donation for *${response.patient_name}* is confirmed. Please coordinate with the hospital. You are a true hero!`;
        await whatsappService.sendTextMessage(donorPhone, donorConfirmationMessage);

        if (response.requested_by_phone && response.requested_by_phone !== 'system') {
            const requesterUpdate = `✅ Good News! A donor has been confirmed for your request for *${response.patient_name}*.`;
            await whatsappService.sendTextMessage(response.requested_by_phone, requesterUpdate);
        }
        gamificationService.awardPoints(response.donor_id, 'EMERGENCY_RESPONSE', donorPhone);

    } catch (error) {
        await client.query('ROLLBACK');
        console.error("Error verifying OTP:", error);
        await whatsappService.sendTextMessage(donorPhone, "A system error occurred during OTP verification.");
    } finally {
        client.release();
    }
}
}

export default new ResponseService();

```

`backend/src/services/schedulerService.js`

```javascript
// backend/src/services/schedulerService.js
import cron from 'node-cron';
// ✅ FIX: Import the already-created INSTANCES of the services
import engagementService from './engagementService.js';
import bridgeCoordinationService from './bridgeCoordinationService.js';

// ✅ FIX: Use the imported instances directly in these functions
export const triggerEligibilityReminders = () => {
  console.log('MANUAL TRIGGER: Running eligibility reminders...');
  return engagementService.sendEligibilityReminders();
};

export const triggerAutomaticBridgeRequests = () => {
  console.log('MANUAL TRIGGER: Running automatic bridge requests...');
  return bridgeCoordinationService.triggerAutomaticBridgeRequests();
};

export const triggerInactiveDonorNudges = () => {
  console.log('MANUAL TRIGGER: Running inactive donor nudges...');
  return engagementService.sendInactiveDonorNudges();
};

class SchedulerService {
  start() {
    console.log('🕒 Cron job for eligibility reminders scheduled to run every day at 9:00 AM.');
    cron.schedule('0 9 * * *', triggerEligibilityReminders, { timezone: "Asia/Kolkata" });
    
    console.log('🕒 Cron job for automatic bridge requests scheduled to run every day at 8:00 AM.');
    cron.schedule('0 8 * * *', triggerAutomaticBridgeRequests, { timezone: "Asia/Kolkata" });
    
    console.log('🕒 Cron job for inactive donor nudges scheduled to run every Sunday at 10:00 AM.');
    cron.schedule('0 10 * * 0', triggerInactiveDonorNudges, { timezone: "Asia/Kolkata" });
  }
}

export const Scheduler = new SchedulerService();

```

`backend/src/services/whatsappService.js`

```javascript
// backend/src/services/whatsappService.js
import axios from 'axios';
import config from '../config/config.js';
import loggingService from './loggingService.js';

class WhatsAppService {
  constructor() {
    this.token = config.whatsappToken;
    this.phoneNumberId = config.whatsappPhoneNumberId;
    if (!this.token || !this.phoneNumberId) {
      console.warn('WhatsApp token or Phone Number ID are missing. Messages will not be sent.');
    }

    this.client = axios.create({
      baseURL: `https://graph.facebook.com/v18.0/${this.phoneNumberId}`,
      headers: {
        'Authorization': `Bearer ${this.token}`,
        'Content-Type': 'application/json'
      }
    });
  }
  async sendTextMessage(to, text) {
    if (!this.token) return { success: false, error: "WhatsApp service not configured." };

    const payload = {
      messaging_product: 'whatsapp',
      to: to,
      type: 'text',
      text: { body: text }
    };

    try {
      const response = await this.client.post('/messages', payload);
      
      // ✅ MODIFIED LINE: This now prints the message content to the console.
      console.log(`✅ Message sent to ${to}: "${text}"`);
      
      await loggingService.logOutgoing(to, text);
      return { success: true, data: response.data };
    } catch (error) {
      console.error(`🔴 FAILED to send message to ${to}.`);
      if (error.response) {
        console.error(`Error Details: ${error.response.data.error?.message}`);
      }
      return { success: false, error: error.message };
    }
  }

    /**
   * ✅ NEW FUNCTION
   * Sends an interactive message with reply buttons.
   * @param {string} to - The recipient's phone number.
   * @param {string} text - The message body.
   * @param {Array<object>} buttons - Array of button objects, e.g., [{ id: '1', title: 'Yes' }]
   */
  async sendInteractiveMessage(to, text, buttons) {
    if (!this.token) return { success: false, error: "WhatsApp service not configured." };

    const payload = {
      messaging_product: 'whatsapp',
      to: to,
      type: 'interactive',
      interactive: {
        type: 'button',
        body: { text: text },
        action: {
          buttons: buttons.map(btn => ({
            type: 'reply',
            reply: { id: btn.id, title: btn.title }
          }))
        }
      }
    };
    
    try {
      const response = await this.client.post('/messages', payload);
      console.log(`✅ Interactive message sent to ${to}: "${text}"`);
      await loggingService.logOutgoing(to, text); // Also log this message
      return { success: true, data: response.data };
    } catch (error) {
      console.error(`🔴 FAILED to send interactive message to ${to}.`);
      if (error.response) {
        console.error(`Error Details: ${error.response.data.error?.message}`);
      }
      return { success: false, error: error.message };
    }
  }

}

export default new WhatsAppService();

```

`backend/src/utils/dataSanitizer.js`

```javascript
// backend/src/utils/dataSanitizer.js
export const normalizeBloodGroup = (group) => {
  if (!group) return 'Unknown';
  
  // ✅ ADD THIS CHECK: Return 'Unknown' immediately if that's the input.
  if (group.toUpperCase() === 'UNKNOWN') {
    return 'Unknown';
  }

  const upperGroup = group.toUpperCase();
  let normalized = upperGroup.replace(/\s/g, '').replace('POSITIVE', '+').replace('NEGATIVE', '-');
  if (normalized.endsWith('POS')) normalized = normalized.replace('POS', '+');
  if (normalized.endsWith('NEG')) normalized = normalized.replace('NEG', '-');
  return normalized.slice(0, 5);
};

```

`backend/src/utils/distanceHelper.js`

```javascript
// backend/src/utils/distanceHelper.js
/**
 * Calculates distance between two lat/lng points in km using the Haversine formula.
 */
export const getDistanceInKm = (lat1, lon1, lat2, lon2) => {
    if ((lat1 == lat2) && (lon1 == lon2)) {
        return 0;
    }
    const R = 6371; // Radius of the earth in km
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a =
        0.5 - Math.cos(dLat) / 2 +
        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
        (1 - Math.cos(dLon)) / 2;
    return R * 2 * Math.asin(Math.sqrt(a));
};

```

`backend/src/utils/languageHelper.js`

```javascript
// backend/src/utils/languageHelper.js
import { franc } from 'franc';

// This utility uses a lightweight library to guess the language of a message.
export async function detectLanguage(text) {
  try {
    // franc returns a 3-letter ISO 639-3 code. 'und' means undetermined.
    const langCode = franc(text);
    if (langCode === 'und') {
      return null; // Could not determine language
    }
    // Map common 3-letter codes to 2-letter codes for simplicity
    const langMap = {
        'eng': 'en',
        'hin': 'hi', // Hindi
        'tel': 'te'  // Telugu
    };
    return langMap[langCode] || null;
  } catch (error) {
    console.error("Language detection error:", error);
    return null;
  }
}

```

`backend/src/utils/otpHelper.js`

```javascript
// backend/src/utils/otpHelper.js

/**
 * Generates a 4-digit numeric code for donors to reply with.
 * @returns {string} A 4-digit string.
 */
export const generateShortCode = () => {
  return Math.floor(1000 + Math.random() * 9000).toString();
};

/**
 * Generates a 6-digit numeric OTP for final confirmation.
 * @returns {string} A 6-digit string.
 */
export const generateOTP = () => {
  return Math.floor(100000 + Math.random() * 900000).toString();
};

```

`backend/src/utils/phoneHelper.js`

```javascript
// backend/src/utils/phoneHelper.js
export const normalizePhoneNumber = (phone) => {
  if (!phone || typeof phone !== 'string') return null;
  let digits = phone.replace(/\D/g, '');
  if (digits.startsWith('91') && digits.length === 12) {
    return `+${digits}`;
  } else if (digits.length === 10) {
    return `+91${digits}`;
  }
  return `+${digits}`;
};

```

`backend/src/utils/translationService.js`

```javascript
// backend/src/services/translationService.js
// In a real application, this would connect to a service like Google Translate.
// For this project, we are mocking the translation for a few specific phrases.
class TranslationService {
  async translateToEnglish(text) {
    if (text.includes("कैसे पंजीकरण") || text.includes("रक्तदान कैसे करें")) {
      console.log('Translation Mock: Detected Hindi registration query.');
      return "How can I register to donate blood?";
    }
    if (text.includes("నమోదు") || text.includes("ఎలా నమోదు")) {
        console.log('Translation Mock: Detected Telugu registration query.');
        return "How can I register to donate blood?";
    }
    // If no match is found, return the original text.
    return text;
  }
}

export default new TranslationService();

```

`code.txt`

```

```

`frontend/.env`

```
REACT_APP_BACKEND_URL=http://localhost:3001
#WDS_SOCKET_PORT=443

```

`frontend/craco.config.js`

```javascript
// Load configuration from environment or config file
const path = require('path');

// Environment variable overrides
const config = {
  disableHotReload: process.env.DISABLE_HOT_RELOAD === 'true',
};

module.exports = {
  webpack: {
    alias: {
      '@': path.resolve(__dirname, 'src'),
    },
    configure: (webpackConfig) => {
      
      // Disable hot reload completely if environment variable is set
      if (config.disableHotReload) {
        // Remove hot reload related plugins
        webpackConfig.plugins = webpackConfig.plugins.filter(plugin => {
          return !(plugin.constructor.name === 'HotModuleReplacementPlugin');
        });
        
        // Disable watch mode
        webpackConfig.watch = false;
        webpackConfig.watchOptions = {
          ignored: /.*/, // Ignore all files
        };
      } else {
        // Add ignored patterns to reduce watched directories
        webpackConfig.watchOptions = {
          ...webpackConfig.watchOptions,
          ignored: [
            '**/node_modules/**',
            '**/.git/**',
            '**/build/**',
            '**/dist/**',
            '**/coverage/**',
            '**/public/**',
          ],
        };
      }
      
      return webpackConfig;
    },
  },
};

```

`frontend/postcss.config.js`

```javascript
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

```

`frontend/public/index.html`

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="BloodBridge AI - Thalassemia-Free India 2030"
    />
    <title>BloodBridge AI</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

```

`frontend/src/App.css`

```css
.App-logo {
    height: 40vmin;
    pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
    .App-logo {
        animation: App-logo-spin infinite 20s linear;
    }
}

.App-header {
    background-color: #0f0f10;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    font-size: calc(10px + 2vmin);
    color: white;
}

.App-link {
    color: #61dafb;
}

@keyframes App-logo-spin {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

```

`frontend/src/App.js`

```javascript
// import React from "react";
// import "./App.css";
// import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
// import { AuthProvider, useAuth } from "./context/AuthContext";
// import Header from "./components/common/Header";
// import Landing from "./pages/Landing";
// import Login from "./pages/Login";
// import AdminPortal from "./pages/AdminPortal";
// import DonorPortal from "./pages/DonorPortal";
// import PatientPortal from "./pages/PatientPortal";
// import LoadingSpinner from "./components/common/LoadingSpinner";

// // Protected Route Component
// const ProtectedRoute = ({ children, allowedRoles }) => {
//   const { user, loading } = useAuth();

//   if (loading) {
//     return (
//       <div className="min-h-screen flex items-center justify-center bg-red-50">
//         <div className="flex flex-col items-center gap-4">
//           <LoadingSpinner size="xl" />
//           <p className="text-lg text-gray-600">Loading BloodBridge AI...</p>
//         </div>
//       </div>
//     );
//   }

//   if (!user) {
//     return <Navigate to="/login" replace />;
//   }

//   if (allowedRoles && !allowedRoles.includes(user.role)) {
//     return <Navigate to="/" replace />;
//   }

//   return children;
// };

// function AppContent() {
//   const { loading } = useAuth();

//   if (loading) {
//     return (
//       <div className="min-h-screen flex items-center justify-center bg-red-50">
//         <div className="flex flex-col items-center gap-4">
//           <LoadingSpinner size="xl" />
//           <p className="text-lg text-gray-600">Initializing BloodBridge AI...</p>
//         </div>
//       </div>
//     );
//   }

//   return (
//     <div className="App min-h-screen bg-gray-50">
//       <Header />
//       <Routes>
//         <Route path="/" element={<Landing />} />
//         <Route path="/login" element={<Login />} />
//         <Route
//           path="/admin"
//           element={
//             <ProtectedRoute allowedRoles={['admin']}>
//               <AdminPortal />
//             </ProtectedRoute>
//           }
//         />
//         <Route
//           path="/donor"
//           element={
//             <ProtectedRoute allowedRoles={['donor']}>
//               <DonorPortal />
//             </ProtectedRoute>
//           }
//         />
//         <Route
//           path="/patient"
//           element={
//             <ProtectedRoute allowedRoles={['patient']}>
//               <PatientPortal />
//             </ProtectedRoute>
//           }
//         />
//         <Route path="*" element={<Navigate to="/" replace />} />
//       </Routes>
//     </div>
//   );
// }

// function App() {
//   return (
//     <BrowserRouter>
//       <AuthProvider>
//         <AppContent />
//       </AuthProvider>
//     </BrowserRouter>
//   );
// }

// export default App;

// frontend/src/App.js

import React from "react";
import "./App.css";
import { BrowserRouter, Routes, Route, Navigate, Outlet } from "react-router-dom";
import { AuthProvider, useAuth } from "./context/AuthContext";
import Header from "./components/common/Header";
import Landing from "./pages/Landing";
import Login from "./pages/Login";
import AdminPortal from "./pages/AdminPortal";
import DonorPortal from "./pages/DonorPortal";
import PatientPortal from "./pages/PatientPortal";
import LoadingSpinner from "./components/common/LoadingSpinner";

/**
 * NEW: A Protected Layout Component
 * This component checks for authentication and role.
 * If checks pass, it renders the child route (e.g., AdminPortal).
 * If not, it redirects to the login page.
 */
const ProtectedRoute = ({ allowedRoles }) => {
  const { user, loading } = useAuth();

  // Show a loading spinner while the app is checking for a stored user session
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-red-50">
        <div className="flex flex-col items-center gap-4">
          <LoadingSpinner size="xl" />
          <p className="text-lg text-gray-600">Verifying Session...</p>
        </div>
      </div>
    );
  }

  // If not loading and no user, redirect to login
  if (!user) {
    return <Navigate to="/login" replace />;
  }
  
  // If there's a user but their role is not in the allowed list, redirect to home
  if (allowedRoles && !allowedRoles.includes(user.role)) {
    return <Navigate to="/" replace />;
  }

  // If all checks pass, render the child component (the specific dashboard)
  return <Outlet />;
};

function AppContent() {
  return (
    <div className="App min-h-screen bg-gray-50">
      <Header />
      <Routes>
        {/* Public Routes */}
        <Route path="/" element={<Landing />} />
        <Route path="/login" element={<Login />} />

        {/* Protected Admin Route */}
        <Route element={<ProtectedRoute allowedRoles={['Admin']} />}>
          <Route path="/admin" element={<AdminPortal />} />
        </Route>
        
        {/* Protected Donor Route */}
        <Route element={<ProtectedRoute allowedRoles={['Donor']} />}>
          <Route path="/donor" element={<DonorPortal />} />
        </Route>

        {/* Protected Patient Route */}
        <Route element={<ProtectedRoute allowedRoles={['Patient']} />}>
          <Route path="/patient" element={<PatientPortal />} />
        </Route>

        {/* Fallback Route */}
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
    </div>
  );
}

function App() {
  return (
    <BrowserRouter>
      <AuthProvider>
        <AppContent />
      </AuthProvider>
    </BrowserRouter>
  );
}

export default App;

```

`frontend/src/components/admin/AnalyticsTab.jsx`

```javascript
import React from 'react';
import { Card } from '../ui/card';
import { Users, Heart, Activity, TrendingUp, Award, AlertTriangle } from 'lucide-react';
import StatsCards from './StatsCards';
import BloodGroupChart from './BloodGroupChart';
import LeaderboardTable from './LeaderboardTable';

const AnalyticsTab = ({ stats, leaderboard, bloodGroupStats }) => {
  return (
    <div className="space-y-8">
      {/* Stats Overview */}
      <StatsCards stats={stats} />

      {/* Charts and Leaderboard */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Blood Group Distribution */}
        <BloodGroupChart data={bloodGroupStats} />

        {/* Top Donors Leaderboard */}
        <LeaderboardTable data={leaderboard} />
      </div>

      {/* Mission Progress */}
      <Card className="p-6 bg-gradient-to-r from-red-50 to-red-100 border-red-200">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-xl font-bold text-red-800 mb-2">Thalassemia-Free India 2030</h3>
            <p className="text-red-700 mb-4">
              Progress towards creating sustainable blood bridges for all thalassemia patients
            </p>
            <div className="flex items-center gap-6">
              <div className="text-center">
                <div className="text-2xl font-bold text-red-800">{stats?.bridges_created || 0}</div>
                <div className="text-sm text-red-600">Bridges Created</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-red-800">{stats?.patients_helped || 0}</div>
                <div className="text-sm text-red-600">Lives Transformed</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-red-800">89%</div>
                <div className="text-sm text-red-600">Success Rate</div>
              </div>
            </div>
          </div>
          <div className="text-right">
            <div className="w-20 h-20 bg-red-200 rounded-full flex items-center justify-center mb-2">
              <Heart className="w-10 h-10 text-red-600" />
            </div>
            <div className="text-sm text-red-600 font-medium">Mission Control</div>
          </div>
        </div>
        
        {/* Progress Bar */}
        <div className="mt-6">
          <div className="flex justify-between text-sm text-red-700 mb-2">
            <span>Progress to 2030 Goal</span>
            <span>67%</span>
          </div>
          <div className="w-full bg-red-200 rounded-full h-3">
            <div className="bg-red-600 h-3 rounded-full animate-pulse" style={{ width: '67%' }}></div>
          </div>
        </div>
      </Card>
    </div>
  );
};

export default AnalyticsTab;

```

`frontend/src/components/admin/BloodGroupChart.jsx`

```javascript
import React from 'react';
import { Card } from '../ui/card';
import { BarChart3 } from 'lucide-react';

const BloodGroupChart = ({ data }) => {
  const maxDonors = Math.max(...data.map(item => item.donors));

  return (
    <Card className="p-6">
      <div className="flex items-center gap-2 mb-6">
        <BarChart3 className="w-5 h-5 text-gray-600" />
        <h3 className="text-lg font-semibold text-gray-900">Blood Group Distribution</h3>
      </div>
      
      <div className="space-y-4">
        {data.map((item, index) => (
          <div key={index} className="flex items-center justify-between">
            <div className="flex items-center gap-3 min-w-0 flex-1">
              <div className="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center">
                <span className="text-sm font-bold text-red-700">{item.blood_group}</span>
              </div>
              <div className="flex-1 min-w-0">
                <div className="flex items-center justify-between mb-1">
                  <span className="text-sm font-medium text-gray-900">{item.blood_group}</span>
                  <span className="text-sm text-gray-500">{item.donors} donors</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div
                    className="bg-red-500 h-2 rounded-full transition-all duration-500"
                    style={{ width: `${(item.donors / maxDonors) * 100}%` }}
                  ></div>
                </div>
              </div>
              <div className="text-sm font-semibold text-gray-700 min-w-[40px] text-right">
                {item.percentage}%
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="mt-6 pt-4 border-t border-gray-200">
        <div className="flex justify-between text-sm text-gray-600">
          <span>Total Registered Donors</span>
          <span className="font-semibold">
            {data.reduce((sum, item) => sum + item.donors, 0).toLocaleString()}
          </span>
        </div>
      </div>
    </Card>
  );
};

export default BloodGroupChart;

```

`frontend/src/components/admin/EmergencyCenter.jsx`

```javascript
import React, { useState } from 'react';
import { Card } from '../ui/card';
import { Button } from '../ui/button';
import { Badge } from '../ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '../ui/dialog';
import { AlertTriangle, Clock, Phone, MapPin, Droplets, CheckCircle, TrendingUp } from 'lucide-react';
import { adminAPI } from '../../lib/api';
import LoadingSpinner from '../common/LoadingSpinner';

const EmergencyCenter = ({ emergencies, onRefetch }) => {
  const [loading, setLoading] = useState(false);
  const [actionType, setActionType] = useState('');
  const [selectedEmergency, setSelectedEmergency] = useState(null);
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);

  const handleCloseEmergency = async (emergencyId) => {
    setLoading(true);
    try {
      await adminAPI.closeEmergency(emergencyId);
      setShowConfirmDialog(false);
      setSelectedEmergency(null);
      onRefetch();
    } catch (error) {
      console.error('Error closing emergency:', error);
      alert('Failed to close emergency. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleEscalateEmergency = async (emergencyId) => {
    setLoading(true);
    try {
      await adminAPI.escalateEmergency(emergencyId);
      setShowConfirmDialog(false);
      setSelectedEmergency(null);
      onRefetch();
    } catch (error) {
      console.error('Error escalating emergency:', error);
      alert('Failed to escalate emergency. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const getUrgencyColor = (urgency) => {
    switch (urgency) {
      case 'critical':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'high':
        return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getUrgencyIcon = (urgency) => {
    switch (urgency) {
      case 'critical':
        return <AlertTriangle className="w-4 h-4 text-red-600 animate-pulse" />;
      case 'high':
        return <AlertTriangle className="w-4 h-4 text-orange-600" />;
      case 'medium':
        return <Clock className="w-4 h-4 text-yellow-600" />;
      default:
        return <Clock className="w-4 h-4 text-gray-600" />;
    }
  };

  const openConfirmDialog = (emergency, action) => {
    setSelectedEmergency(emergency);
    setActionType(action);
    setShowConfirmDialog(true);
  };

  return (
    <div className="space-y-8">
      {/* Emergency Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="p-4 bg-red-50 border-red-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-red-600">Critical</p>
              <p className="text-2xl font-bold text-red-700">
                {emergencies.filter(e => e.urgency === 'critical').length}
              </p>
            </div>
            <AlertTriangle className="w-8 h-8 text-red-500" />
          </div>
        </Card>

        <Card className="p-4 bg-orange-50 border-orange-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-orange-600">High</p>
              <p className="text-2xl font-bold text-orange-700">
                {emergencies.filter(e => e.urgency === 'high').length}
              </p>
            </div>
            <AlertTriangle className="w-8 h-8 text-orange-500" />
          </div>
        </Card>

        <Card className="p-4 bg-green-50 border-green-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-green-600">Active</p>
              <p className="text-2xl font-bold text-green-700">
                {emergencies.filter(e => e.status === 'active').length}
              </p>
            </div>
            <Clock className="w-8 h-8 text-green-500" />
          </div>
        </Card>

        <Card className="p-4 bg-blue-50 border-blue-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-blue-600">Response Time</p>
              <p className="text-2xl font-bold text-blue-700">12m</p>
            </div>
            <TrendingUp className="w-8 h-8 text-blue-500" />
          </div>
        </Card>
      </div>

      {/* Active Emergencies */}
      <div>
        <div className="flex items-center gap-2 mb-6">
          <AlertTriangle className="w-5 h-5 text-red-600" />
          <h2 className="text-xl font-semibold text-gray-900">Active Emergencies</h2>
          <Badge className="bg-red-100 text-red-800">{emergencies.length}</Badge>
        </div>

        {emergencies.length === 0 ? (
          <Card className="p-8 text-center">
            <CheckCircle className="w-12 h-12 text-green-500 mx-auto mb-4" />
            <p className="text-gray-600">No active emergencies</p>
          </Card>
        ) : (
          <div className="space-y-4">
            {emergencies.map((emergency) => (
              <Card
                key={emergency.id}
                className={`p-6 hover:shadow-lg transition-all duration-300 ${
                  emergency.urgency === 'critical' ? 'border-red-300 bg-red-50' : ''
                }`}
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center gap-3 mb-3">
                      {getUrgencyIcon(emergency.urgency)}
                      <Badge className={`${getUrgencyColor(emergency.urgency)} border`}>
                        {emergency.urgency.toUpperCase()}
                      </Badge>
                      <Badge className="bg-gray-100 text-gray-800">
                        {emergency.status}
                      </Badge>
                    </div>

                    <h3 className="text-lg font-semibold text-gray-900 mb-2">
                      {emergency.patient_name}
                    </h3>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                      <div className="space-y-2">
                        <div className="flex items-center gap-2 text-sm">
                          <Droplets className="w-4 h-4 text-red-500" />
                          <span className="text-gray-600">Blood Group:</span>
                          <span className="font-medium">{emergency.blood_group}</span>
                        </div>
                        <div className="flex items-center gap-2 text-sm">
                          <MapPin className="w-4 h-4 text-blue-500" />
                          <span className="text-gray-600">Location:</span>
                          <span className="font-medium">{emergency.location}</span>
                        </div>
                      </div>
                      
                      <div className="space-y-2">
                        <div className="flex items-center gap-2 text-sm">
                          <Clock className="w-4 h-4 text-orange-500" />
                          <span className="text-gray-600">Time Elapsed:</span>
                          <span className="font-medium">{emergency.time_elapsed}</span>
                        </div>
                        <div className="flex items-center gap-2 text-sm">
                          <Phone className="w-4 h-4 text-green-500" />
                          <span className="text-gray-600">Contact:</span>
                          <span className="font-medium">{emergency.contact}</span>
                        </div>
                      </div>
                    </div>

                    <div className="bg-gray-50 p-3 rounded-lg mb-4">
                      <p className="text-sm text-gray-700">
                        <strong>Required:</strong> {emergency.required_units} units
                      </p>
                      <p className="text-sm text-gray-700 mt-1">
                        <strong>Description:</strong> {emergency.description}
                      </p>
                    </div>
                  </div>

                  <div className="flex flex-col gap-2 ml-4">
                    <Button
                      size="sm"
                      onClick={() => openConfirmDialog(emergency, 'escalate')}
                      className="bg-orange-600 hover:bg-orange-700 text-white whitespace-nowrap"
                    >
                      <TrendingUp className="w-4 h-4 mr-1" />
                      Escalate
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => openConfirmDialog(emergency, 'close')}
                      className="border-green-600 text-green-600 hover:bg-green-50 whitespace-nowrap"
                    >
                      <CheckCircle className="w-4 h-4 mr-1" />
                      Close
                    </Button>
                  </div>
                </div>
              </Card>
            ))}
          </div>
        )}
      </div>

      {/* Confirmation Dialog */}
      <Dialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              {actionType === 'escalate' ? (
                <>
                  <TrendingUp className="w-5 h-5 text-orange-600" />
                  Escalate Emergency
                </>
              ) : (
                <>
                  <CheckCircle className="w-5 h-5 text-green-600" />
                  Close Emergency
                </>
              )}
            </DialogTitle>
          </DialogHeader>
          <div className="py-6">
            {selectedEmergency && (
              <div className="space-y-4">
                <div className="text-center">
                  <div className={`w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4 ${
                    actionType === 'escalate' ? 'bg-orange-100' : 'bg-green-100'
                  }`}>
                    {actionType === 'escalate' ? (
                      <TrendingUp className="w-8 h-8 text-orange-600" />
                    ) : (
                      <CheckCircle className="w-8 h-8 text-green-600" />
                    )}
                  </div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">
                    {selectedEmergency.patient_name}
                  </h3>
                  <p className="text-gray-600 text-sm">
                    {selectedEmergency.blood_group} • {selectedEmergency.location}
                  </p>
                </div>
                
                <div className={`p-4 rounded-lg text-center ${
                  actionType === 'escalate' ? 'bg-orange-50' : 'bg-green-50'
                }`}>
                  <p className={`text-sm mb-4 ${
                    actionType === 'escalate' ? 'text-orange-700' : 'text-green-700'
                  }`}>
                    {actionType === 'escalate'
                      ? 'This will escalate the emergency to critical level and notify all available donors immediately.'
                      : 'Are you sure you want to close this emergency? This action cannot be undone.'
                    }
                  </p>
                  
                  <div className="flex justify-center gap-3">
                    <Button
                      variant="outline"
                      onClick={() => setShowConfirmDialog(false)}
                      disabled={loading}
                    >
                      Cancel
                    </Button>
                    <Button
                      onClick={() => 
                        actionType === 'escalate'
                          ? handleEscalateEmergency(selectedEmergency.id)
                          : handleCloseEmergency(selectedEmergency.id)
                      }
                      disabled={loading}
                      className={
                        actionType === 'escalate'
                          ? 'bg-orange-600 hover:bg-orange-700'
                          : 'bg-green-600 hover:bg-green-700'
                      }
                    >
                      {loading ? (
                        <>
                          <LoadingSpinner size="sm" className="mr-2" />
                          Processing...
                        </>
                      ) : (
                        actionType === 'escalate' ? 'Escalate' : 'Close Emergency'
                      )}
                    </Button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default EmergencyCenter;

```

`frontend/src/components/admin/InboxTab.jsx`

```javascript
import React, { useState } from 'react';
import { Card } from '../ui/card';
import { Button } from '../ui/button';
import { Badge } from '../ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '../ui/dialog';
import { MessageSquare, Clock, User, Stethoscope, Users, CheckCircle, Flag } from 'lucide-react';
import { adminAPI } from '../../lib/api';
import LoadingSpinner from '../common/LoadingSpinner';

const InboxTab = ({ messages, onRefetch }) => {
  const [loading, setLoading] = useState(false);
  const [selectedMessage, setSelectedMessage] = useState(null);
  const [showMessageDialog, setShowMessageDialog] = useState(false);

  const handleResolveMessage = async (messageId) => {
    setLoading(true);
    try {
      await adminAPI.resolveMessage(messageId);
      setShowMessageDialog(false);
      setSelectedMessage(null);
      onRefetch();
    } catch (error) {
      console.error('Error resolving message:', error);
      alert('Failed to resolve message. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const getSenderIcon = (senderType) => {
    switch (senderType) {
      case 'patient':
        return <Users className="w-4 h-4 text-green-600" />;
      case 'doctor':
        return <Stethoscope className="w-4 h-4 text-blue-600" />;
      case 'donor':
        return <User className="w-4 h-4 text-purple-600" />;
      default:
        return <MessageSquare className="w-4 h-4 text-gray-600" />;
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'critical':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'high':
        return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getCategoryColor = (category) => {
    switch (category) {
      case 'medical':
        return 'bg-red-50 text-red-700';
      case 'appointment':
        return 'bg-blue-50 text-blue-700';
      case 'emergency':
        return 'bg-orange-50 text-orange-700';
      case 'general':
        return 'bg-gray-50 text-gray-700';
      default:
        return 'bg-gray-50 text-gray-700';
    }
  };

  const flaggedMessages = messages.filter(m => m.status === 'flagged');
  const resolvedMessages = messages.filter(m => m.status === 'resolved');

  return (
    <div className="space-y-8">
      {/* Inbox Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="p-4 bg-red-50 border-red-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-red-600">Flagged</p>
              <p className="text-2xl font-bold text-red-700">{flaggedMessages.length}</p>
            </div>
            <Flag className="w-8 h-8 text-red-500" />
          </div>
        </Card>

        <Card className="p-4 bg-orange-50 border-orange-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-orange-600">Critical</p>
              <p className="text-2xl font-bold text-orange-700">
                {messages.filter(m => m.priority === 'critical').length}
              </p>
            </div>
            <MessageSquare className="w-8 h-8 text-orange-500" />
          </div>
        </Card>

        <Card className="p-4 bg-green-50 border-green-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-green-600">Resolved</p>
              <p className="text-2xl font-bold text-green-700">{resolvedMessages.length}</p>
            </div>
            <CheckCircle className="w-8 h-8 text-green-500" />
          </div>
        </Card>

        <Card className="p-4 bg-blue-50 border-blue-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-blue-600">Response Time</p>
              <p className="text-2xl font-bold text-blue-700">2.5h</p>
            </div>
            <Clock className="w-8 h-8 text-blue-500" />
          </div>
        </Card>
      </div>

      {/* Flagged Messages */}
      <div>
        <div className="flex items-center gap-2 mb-6">
          <Flag className="w-5 h-5 text-red-600" />
          <h2 className="text-xl font-semibold text-gray-900">Flagged Messages</h2>
          <Badge className="bg-red-100 text-red-800">{flaggedMessages.length}</Badge>
        </div>

        {flaggedMessages.length === 0 ? (
          <Card className="p-8 text-center">
            <CheckCircle className="w-12 h-12 text-green-500 mx-auto mb-4" />
            <p className="text-gray-600">No flagged messages</p>
          </Card>
        ) : (
          <div className="space-y-4">
            {flaggedMessages.map((message) => (
              <Card
                key={message.id}
                className="p-6 hover:shadow-lg transition-all duration-300 cursor-pointer"
                onClick={() => {
                  setSelectedMessage(message);
                  setShowMessageDialog(true);
                }}
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center gap-3 mb-3">
                      {getSenderIcon(message.sender_type)}
                      <Badge className={getPriorityColor(message.priority)}>
                        {message.priority.toUpperCase()}
                      </Badge>
                      <Badge className={getCategoryColor(message.category)}>
                        {message.category}
                      </Badge>
                      <div className="flex items-center gap-1 text-sm text-gray-500">
                        <Clock className="w-3 h-3" />
                        {message.timestamp}
                      </div>
                    </div>

                    <h3 className="text-lg font-semibold text-gray-900 mb-2">
                      {message.subject}
                    </h3>

                    <div className="flex items-center gap-2 mb-3">
                      <span className="text-sm text-gray-600">From:</span>
                      <span className="font-medium text-gray-900">{message.sender_name}</span>
                      <span className="text-sm text-gray-500">({message.sender_type})</span>
                    </div>

                    <p className="text-gray-700 text-sm line-clamp-2">
                      {message.message}
                    </p>
                  </div>

                  <div className="flex flex-col gap-2 ml-4">
                    <Button
                      size="sm"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleResolveMessage(message.id);
                      }}
                      className="bg-green-600 hover:bg-green-700 text-white whitespace-nowrap"
                      disabled={loading}
                    >
                      {loading ? (
                        <LoadingSpinner size="sm" />
                      ) : (
                        <>
                          <CheckCircle className="w-4 h-4 mr-1" />
                          Resolve
                        </>
                      )}
                    </Button>
                  </div>
                </div>
              </Card>
            ))}
          </div>
        )}
      </div>

      {/* Message Detail Dialog */}
      <Dialog open={showMessageDialog} onOpenChange={setShowMessageDialog}>
        <DialogContent className="sm:max-w-2xl">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <MessageSquare className="w-5 h-5 text-blue-600" />
              Message Details
            </DialogTitle>
          </DialogHeader>
          <div className="py-6">
            {selectedMessage && (
              <div className="space-y-6">
                {/* Message Header */}
                <div className="border-b border-gray-200 pb-4">
                  <div className="flex items-center gap-3 mb-3">
                    {getSenderIcon(selectedMessage.sender_type)}
                    <Badge className={getPriorityColor(selectedMessage.priority)}>
                      {selectedMessage.priority.toUpperCase()}
                    </Badge>
                    <Badge className={getCategoryColor(selectedMessage.category)}>
                      {selectedMessage.category}
                    </Badge>
                  </div>
                  
                  <h3 className="text-xl font-semibold text-gray-900 mb-2">
                    {selectedMessage.subject}
                  </h3>
                  
                  <div className="flex items-center justify-between text-sm text-gray-600">
                    <div className="flex items-center gap-4">
                      <span><strong>From:</strong> {selectedMessage.sender_name}</span>
                      <span><strong>Type:</strong> {selectedMessage.sender_type}</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <Clock className="w-3 h-3" />
                      {selectedMessage.timestamp}
                    </div>
                  </div>
                </div>

                {/* Message Content */}
                <div className="bg-gray-50 p-4 rounded-lg">
                  <p className="text-gray-800 leading-relaxed">
                    {selectedMessage.message}
                  </p>
                </div>

                {/* Actions */}
                <div className="flex justify-end gap-3 pt-4 border-t border-gray-200">
                  <Button
                    variant="outline"
                    onClick={() => setShowMessageDialog(false)}
                  >
                    Close
                  </Button>
                  <Button
                    onClick={() => handleResolveMessage(selectedMessage.id)}
                    disabled={loading}
                    className="bg-green-600 hover:bg-green-700"
                  >
                    {loading ? (
                      <>
                        <LoadingSpinner size="sm" className="mr-2" />
                        Resolving...
                      </>
                    ) : (
                      <>
                        <CheckCircle className="w-4 h-4 mr-2" />
                        Mark as Resolved
                      </>
                    )}
                  </Button>
                </div>
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default InboxTab;

```

`frontend/src/components/admin/LeaderboardTable.jsx`

```javascript
import React from 'react';
import { Card } from '../ui/card';
import { Trophy, Medal, Award, Star } from 'lucide-react';

const LeaderboardTable = ({ data }) => {
  const getRankIcon = (rank) => {
    switch (rank) {
      case 1:
        return <Trophy className="w-5 h-5 text-yellow-500" />;
      case 2:
        return <Medal className="w-5 h-5 text-gray-400" />;
      case 3:
        return <Award className="w-5 h-5 text-orange-500" />;
      default:
        return <Star className="w-5 h-5 text-blue-500" />;
    }
  };

  const getRankBg = (rank) => {
    switch (rank) {
      case 1:
        return 'bg-yellow-50 border-yellow-200';
      case 2:
        return 'bg-gray-50 border-gray-200';
      case 3:
        return 'bg-orange-50 border-orange-200';
      default:
        return 'bg-blue-50 border-blue-200';
    }
  };

  return (
    <Card className="p-6">
      <div className="flex items-center gap-2 mb-6">
        <Trophy className="w-5 h-5 text-yellow-500" />
        <h3 className="text-lg font-semibold text-gray-900">Top Donors Leaderboard</h3>
      </div>
      
      <div className="space-y-3">
        {data.map((donor, index) => (
          <div
            key={donor.rank}
            className={`p-4 rounded-lg border-2 transition-all duration-300 hover:shadow-md ${getRankBg(donor.rank)}`}
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="flex items-center justify-center w-8 h-8">
                  {getRankIcon(donor.rank)}
                </div>
                <div>
                  <div className="font-semibold text-gray-900">{donor.name}</div>
                  <div className="text-sm text-gray-600">{donor.location}</div>
                </div>
              </div>
              
              <div className="text-right">
                <div className="flex items-center gap-4">
                  <div className="text-center">
                    <div className="text-lg font-bold text-gray-900">{donor.donations}</div>
                    <div className="text-xs text-gray-500">donations</div>
                  </div>
                  <div className="text-center">
                    <div className="text-sm font-semibold text-blue-600">{donor.blood_group}</div>
                    <div className="text-xs text-gray-500">blood type</div>
                  </div>
                  <div className="text-center">
                    <div className="text-lg font-bold text-green-600">{donor.points}</div>
                    <div className="text-xs text-gray-500">points</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="mt-6 pt-4 border-t border-gray-200 text-center">
        <p className="text-sm text-gray-600">
          Recognizing our community heroes who make the biggest impact
        </p>
      </div>
    </Card>
  );
};

export default LeaderboardTable;

```

`frontend/src/components/admin/PatientManagement.jsx`

```javascript
import React, { useState } from 'react';
import { Card } from '../ui/card';
import { Button } from '../ui/button';
import { Badge } from '../ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '../ui/dialog';
import { Users, Clock, AlertCircle, CheckCircle, Link, Heart } from 'lucide-react';
import { adminAPI } from '../../lib/api';
import LoadingSpinner from '../common/LoadingSpinner';

const PatientManagement = ({ patients, onRefetch }) => {
  const [loading, setLoading] = useState(false);
  const [showCreateBridge, setShowCreateBridge] = useState(false);
  const [selectedPatient, setSelectedPatient] = useState(null);

  const pendingPatients = patients.filter(p => p.status === 'pending_verification');
  const bridgedPatients = patients.filter(p => p.status === 'bridged');
  const urgentPatients = patients.filter(p => p.status === 'urgent');

  const handleCreateBridge = async (patientId) => {
    setLoading(true);
    try {
      await adminAPI.createBridge(patientId);
      setShowCreateBridge(false);
      setSelectedPatient(null);
      onRefetch();
    } catch (error) {
      console.error('Error creating bridge:', error);
      alert('Failed to create bridge. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'pending_verification':
        return <Clock className="w-4 h-4 text-yellow-600" />;
      case 'bridged':
        return <CheckCircle className="w-4 h-4 text-green-600" />;
      case 'urgent':
        return <AlertCircle className="w-4 h-4 text-red-600" />;
      default:
        return <Users className="w-4 h-4 text-gray-600" />;
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'pending_verification':
        return 'bg-yellow-100 text-yellow-800';
      case 'bridged':
        return 'bg-green-100 text-green-800';
      case 'urgent':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const PatientCard = ({ patient, showBridgeButton = false }) => (
    <Card className="p-6 hover:shadow-lg transition-all duration-300">
      <div className="flex items-start justify-between mb-4">
        <div className="flex items-center gap-3">
          <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
            <Users className="w-6 h-6 text-blue-600" />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-gray-900">{patient.name}</h3>
            <p className="text-sm text-gray-600">Age {patient.age} • {patient.blood_group}</p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          {getStatusIcon(patient.status)}
          <Badge className={getStatusColor(patient.status)}>
            {patient.status.replace('_', ' ')}
          </Badge>
        </div>
      </div>

      <div className="space-y-2 mb-4">
        <div className="flex justify-between text-sm">
          <span className="text-gray-600">Location:</span>
          <span className="font-medium">{patient.location}</span>
        </div>
        <div className="flex justify-between text-sm">
          <span className="text-gray-600">Condition:</span>
          <span className="font-medium">{patient.condition}</span>
        </div>
        {patient.hemoglobin_level && (
          <div className="flex justify-between text-sm">
            <span className="text-gray-600">Hemoglobin:</span>
            <span className={`font-medium ${patient.hemoglobin_level < 7 ? 'text-red-600' : 'text-green-600'}`}>
              {patient.hemoglobin_level} g/dL
            </span>
          </div>
        )}
        {patient.next_due_date && (
          <div className="flex justify-between text-sm">
            <span className="text-gray-600">Next Due:</span>
            <span className="font-medium">{patient.next_due_date}</span>
          </div>
        )}
        {patient.bridge_donors && patient.bridge_donors.length > 0 && (
          <div className="flex justify-between text-sm">
            <span className="text-gray-600">Bridge Donors:</span>
            <span className="font-medium text-green-600">{patient.bridge_donors.length} connected</span>
          </div>
        )}
      </div>

      {showBridgeButton && (
        <Button
          onClick={() => {
            setSelectedPatient(patient);
            setShowCreateBridge(true);
          }}
          className="w-full bg-blue-600 hover:bg-blue-700 text-white"
        >
          <Link className="w-4 h-4 mr-2" />
          Create Blood Bridge
        </Button>
      )}
    </Card>
  );

  return (
    <div className="space-y-8">
      {/* Pending Verification */}
      <div>
        <div className="flex items-center gap-2 mb-6">
          <Clock className="w-5 h-5 text-yellow-600" />
          <h2 className="text-xl font-semibold text-gray-900">Pending Verification</h2>
          <Badge className="bg-yellow-100 text-yellow-800">{pendingPatients.length}</Badge>
        </div>
        
        {pendingPatients.length === 0 ? (
          <Card className="p-8 text-center">
            <CheckCircle className="w-12 h-12 text-green-500 mx-auto mb-4" />
            <p className="text-gray-600">No patients pending verification</p>
          </Card>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {pendingPatients.map((patient) => (
              <PatientCard key={patient.id} patient={patient} showBridgeButton={true} />
            ))}
          </div>
        )}
      </div>

      {/* Urgent Cases */}
      {urgentPatients.length > 0 && (
        <div>
          <div className="flex items-center gap-2 mb-6">
            <AlertCircle className="w-5 h-5 text-red-600" />
            <h2 className="text-xl font-semibold text-gray-900">Urgent Cases</h2>
            <Badge className="bg-red-100 text-red-800">{urgentPatients.length}</Badge>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {urgentPatients.map((patient) => (
              <PatientCard key={patient.id} patient={patient} showBridgeButton={true} />
            ))}
          </div>
        </div>
      )}

      {/* Bridged Patients Monitor */}
      <div>
        <div className="flex items-center gap-2 mb-6">
          <Heart className="w-5 h-5 text-green-600" />
          <h2 className="text-xl font-semibold text-gray-900">Active Blood Bridges</h2>
          <Badge className="bg-green-100 text-green-800">{bridgedPatients.length}</Badge>
        </div>
        
        {bridgedPatients.length === 0 ? (
          <Card className="p-8 text-center">
            <Users className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <p className="text-gray-600">No active blood bridges yet</p>
          </Card>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {bridgedPatients.map((patient) => (
              <PatientCard key={patient.id} patient={patient} />
            ))}
          </div>
        )}
      </div>

      {/* Create Bridge Confirmation Dialog */}
      <Dialog open={showCreateBridge} onOpenChange={setShowCreateBridge}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Link className="w-5 h-5 text-blue-600" />
              Create Blood Bridge
            </DialogTitle>
          </DialogHeader>
          <div className="py-6">
            {selectedPatient && (
              <div className="space-y-4">
                <div className="text-center">
                  <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <Heart className="w-8 h-8 text-blue-600" />
                  </div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">
                    {selectedPatient.name}
                  </h3>
                  <p className="text-gray-600 text-sm">
                    Age {selectedPatient.age} • {selectedPatient.blood_group} • {selectedPatient.condition}
                  </p>
                </div>
                
                <div className="bg-blue-50 p-4 rounded-lg text-center">
                  <p className="text-sm text-blue-700 mb-4">
                    Creating a blood bridge will connect this patient with 3-5 compatible donors
                    for regular, coordinated blood supply management.
                  </p>
                  
                  <div className="flex justify-center gap-3">
                    <Button
                      variant="outline"
                      onClick={() => setShowCreateBridge(false)}
                      disabled={loading}
                    >
                      Cancel
                    </Button>
                    <Button
                      onClick={() => handleCreateBridge(selectedPatient.id)}
                      disabled={loading}
                      className="bg-blue-600 hover:bg-blue-700"
                    >
                      {loading ? (
                        <>
                          <LoadingSpinner size="sm" className="mr-2" />
                          Creating...
                        </>
                      ) : (
                        'Create Bridge'
                      )}
                    </Button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default PatientManagement;

```

`frontend/src/components/admin/StatsCards.jsx`

```javascript
import React from 'react';
import { Card } from '../ui/card';
import { Users, Heart, Activity, TrendingUp, Award, AlertTriangle } from 'lucide-react';

const StatsCards = ({ stats }) => {
  const statItems = [
    {
      title: 'Total Donors',
      value: stats?.total_donors || 0,
      icon: Users,
      color: 'bg-blue-500',
      bgColor: 'bg-blue-50',
      textColor: 'text-blue-700',
      change: '+12%'
    },
    {
      title: 'Lives Helped',
      value: stats?.patients_helped || 0,
      icon: Heart,
      color: 'bg-red-500',
      bgColor: 'bg-red-50',
      textColor: 'text-red-700',
      change: '+8%'
    },
    {
      title: 'Active Donors',
      value: stats?.active_donors || 0,
      icon: Activity,
      color: 'bg-green-500',
      bgColor: 'bg-green-50',
      textColor: 'text-green-700',
      change: '+15%'
    },
    {
      title: 'Blood Units',
      value: stats?.blood_units_donated || 0,
      icon: TrendingUp,
      color: 'bg-purple-500',
      bgColor: 'bg-purple-50',
      textColor: 'text-purple-700',
      change: '+22%'
    },
    {
      title: 'Bridges Created',
      value: stats?.bridges_created || 0,
      icon: Award,
      color: 'bg-orange-500',
      bgColor: 'bg-orange-50',
      textColor: 'text-orange-700',
      change: '+18%'
    },
    {
      title: 'Emergencies Resolved',
      value: stats?.emergencies_resolved || 0,
      icon: AlertTriangle,
      color: 'bg-indigo-500',
      bgColor: 'bg-indigo-50',
      textColor: 'text-indigo-700',
      change: '+5%'
    }
  ];

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {statItems.map((item, index) => {
        const IconComponent = item.icon;
        return (
          <Card
            key={index}
            className={`p-6 ${item.bgColor} border-0 hover:shadow-lg transition-all duration-300 transform hover:scale-105`}
          >
            <div className="flex items-center justify-between">
              <div>
                <p className={`text-sm font-medium ${item.textColor} opacity-80`}>
                  {item.title}
                </p>
                <p className={`text-3xl font-bold ${item.textColor} mt-1`}>
                  {item.value.toLocaleString()}
                </p>
                <div className="flex items-center mt-2">
                  <TrendingUp className="w-4 h-4 text-green-500 mr-1" />
                  <span className="text-sm text-green-600 font-medium">{item.change}</span>
                  <span className="text-sm text-gray-500 ml-1">from last month</span>
                </div>
              </div>
              <div className={`w-12 h-12 ${item.color} rounded-lg flex items-center justify-center`}>
                <IconComponent className="w-6 h-6 text-white" />
              </div>
            </div>
          </Card>
        );
      })}
    </div>
  );
};

export default StatsCards;

```

`frontend/src/components/common/Header.jsx`

```javascript
// import React from 'react';
// import { Link, useLocation, useNavigate } from 'react-router-dom';
// import { Button } from '../ui/button';
// import { Heart, LogOut, User, Shield, Users, Activity } from 'lucide-react';
// import { useAuth } from '../../context/AuthContext';

// const Header = () => {
//   const { user, logout } = useAuth();
//   const location = useLocation();
//   const navigate = useNavigate();

//   const handleLogout = () => {
//     logout();
//     navigate('/');
//   };

//   const getNavigation = () => {
//     if (!user) {
//       return (
//         <div className="flex items-center gap-4">
//           <Link to="/login">
//             <Button variant="outline" className="border-red-600 text-red-600 hover:bg-red-50">
//               Login
//             </Button>
//           </Link>
//         </div>
//       );
//     }

//     const commonNav = (
//       <div className="flex items-center gap-4">
//         <div className="flex items-center gap-2 text-gray-700">
//           <User className="w-4 h-4" />
//           <span className="font-medium">{user.name || user.phone}</span>
//           <span className="text-sm text-gray-500 capitalize flex items-center gap-1">
//             {user.role === 'admin' && <Shield className="w-3 h-3" />}
//             {user.role === 'donor' && <Users className="w-3 h-3" />}
//             {user.role === 'patient' && <Activity className="w-3 h-3" />}
//             ({user.role})
//           </span>
//         </div>
//         <Button
//           variant="outline"
//           size="sm"
//           onClick={handleLogout}
//           className="border-gray-300 text-gray-600 hover:bg-gray-50"
//         >
//           <LogOut className="w-4 h-4 mr-2" />
//           Logout
//         </Button>
//       </div>
//     );

//     return commonNav;
//   };

//   return (
//     <header className="bg-white border-b border-gray-200 sticky top-0 z-40 shadow-sm">
//       <div className="container mx-auto px-6">
//         <div className="flex items-center justify-between h-16">
//           {/* Logo */}
//           <Link to="/" className="flex items-center gap-3 group">
//             <div className="w-10 h-10 bg-red-600 rounded-lg flex items-center justify-center group-hover:bg-red-700 transition-colors">
//               <Heart className="w-6 h-6 text-white" />
//             </div>
//             <div>
//               <div className="font-bold text-lg text-gray-900">BloodBridge</div>
//               <div className="text-xs text-red-600 font-medium">AI</div>
//             </div>
//           </Link>

//           {/* Navigation based on user role */}
//           {user && (
//             <nav className="hidden md:flex items-center gap-6">
//               <Link
//                 to="/"
//                 className={`text-sm font-medium transition-colors duration-200 ${
//                   location.pathname === '/'
//                     ? 'text-red-600'
//                     : 'text-gray-600 hover:text-red-600'
//                 }`}
//               >
//                 Home
//               </Link>

//               {user.role === 'admin' && (
//                 <Link
//                   to="/admin"
//                   className={`text-sm font-medium transition-colors duration-200 flex items-center gap-1 ${
//                     location.pathname.startsWith('/admin')
//                       ? 'text-red-600'
//                       : 'text-gray-600 hover:text-red-600'
//                   }`}
//                 >
//                   <Shield className="w-4 h-4" />
//                   Admin Portal
//                 </Link>
//               )}

//               {user.role === 'donor' && (
//                 <Link
//                   to="/donor"
//                   className={`text-sm font-medium transition-colors duration-200 flex items-center gap-1 ${
//                     location.pathname.startsWith('/donor')
//                       ? 'text-red-600'
//                       : 'text-gray-600 hover:text-red-600'
//                   }`}
//                 >
//                   <Users className="w-4 h-4" />
//                   Donor Portal
//                 </Link>
//               )}

//               {user.role === 'patient' && (
//                 <Link
//                   to="/patient"
//                   className={`text-sm font-medium transition-colors duration-200 flex items-center gap-1 ${
//                     location.pathname.startsWith('/patient')
//                       ? 'text-red-600'
//                       : 'text-gray-600 hover:text-red-600'
//                   }`}
//                 >
//                   <Activity className="w-4 h-4" />
//                   Patient Portal
//                 </Link>
//               )}
//             </nav>
//           )}

//           {/* User Actions */}
//           {getNavigation()}
//         </div>
//       </div>
//     </header>
//   );
// };

// export default Header;


// frontend/src/components/common/Header.jsx

import React from 'react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import { Button } from '../ui/button';
import { Heart, LogOut, User, Shield, Users, Activity } from 'lucide-react';
import { useAuth } from '../../context/AuthContext';

const Header = () => {
  const { user, logout } = useAuth();
  const location = useLocation();
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    navigate('/');
  };

  const getNavigation = () => {
    if (!user) {
      return (
        <div className="flex items-center gap-4">
          <Link to="/login">
            <Button variant="outline" className="border-red-600 text-red-600 hover:bg-red-50">
              Login
            </Button>
          </Link>
        </div>
      );
    }

    return (
      <div className="flex items-center gap-4">
        <div className="flex items-center gap-2 text-gray-700">
          <User className="w-4 h-4" />
          <span className="font-medium">{user.name || user.phone}</span>
          <span className="text-sm text-gray-500 capitalize flex items-center gap-1">
            ({user.role})
          </span>
        </div>
        <Button
          variant="outline"
          size="sm"
          onClick={handleLogout}
          className="border-gray-300 text-gray-600 hover:bg-gray-50"
        >
          <LogOut className="w-4 h-4 mr-2" />
          Logout
        </Button>
      </div>
    );
  };

  return (
    <header className="bg-white border-b border-gray-200 sticky top-0 z-40 shadow-sm">
      <div className="container mx-auto px-6">
        <div className="flex items-center justify-between h-16">
          {/* Logo */}
          <Link to="/" className="flex items-center gap-3 group">
            <div className="w-10 h-10 bg-red-600 rounded-lg flex items-center justify-center group-hover:bg-red-700 transition-colors">
              <Heart className="w-6 h-6 text-white" />
            </div>
            <div>
              <div className="font-bold text-lg text-gray-900">BloodBridge</div>
              <div className="text-xs text-red-600 font-medium">AI</div>
            </div>
          </Link>

          {/* Navigation Links shown only when logged in */}
          {user && (
            <nav className="hidden md:flex items-center gap-6">
              <Link to="/" className={`text-sm font-medium transition-colors duration-200 ${ location.pathname === '/' ? 'text-red-600' : 'text-gray-600 hover:text-red-600'}`}>
                Home
              </Link>
              {/* CORRECTED: Conditionally render the correct dashboard link based on role */}
              {user.role === 'Admin' && (
                <Link to="/admin" className={`text-sm font-medium transition-colors duration-200 flex items-center gap-1 ${ location.pathname.startsWith('/admin') ? 'text-red-600' : 'text-gray-600 hover:text-red-600'}`}>
                  <Shield className="w-4 h-4" /> Admin Portal
                </Link>
              )}
              {user.role === 'Donor' && (
                <Link to="/donor" className={`text-sm font-medium transition-colors duration-200 flex items-center gap-1 ${ location.pathname.startsWith('/donor') ? 'text-red-600' : 'text-gray-600 hover:text-red-600'}`}>
                  <Users className="w-4 h-4" /> Donor Portal
                </Link>
              )}
              {user.role === 'Patient' && (
                <Link to="/patient" className={`text-sm font-medium transition-colors duration-200 flex items-center gap-1 ${ location.pathname.startsWith('/patient') ? 'text-red-600' : 'text-gray-600 hover:text-red-600'}`}>
                  <Activity className="w-4 h-4" /> Patient Portal
                </Link>
              )}
            </nav>
          )}

          {/* User Actions (Login/Logout) */}
          {getNavigation()}
        </div>
      </div>
    </header>
  );
};

export default Header;

```

`frontend/src/components/common/LoadingSpinner.jsx`

```javascript
import React from 'react';
import { Loader2 } from 'lucide-react';

const LoadingSpinner = ({ size = 'default', className = '' }) => {
  const sizeClasses = {
    sm: 'w-4 h-4',
    default: 'w-6 h-6',
    lg: 'w-8 h-8',
    xl: 'w-12 h-12'
  };

  return (
    <div className={`flex items-center justify-center ${className}`}>
      <Loader2 className={`animate-spin text-red-600 ${sizeClasses[size]}`} />
    </div>
  );
};

export default LoadingSpinner;

```

`frontend/src/components/common/WhatsAppButton.jsx`

```javascript
import React, { useState } from 'react';
import { MessageCircle, X, CheckCircle, Users, Activity } from 'lucide-react';
import { Button } from '../ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '../ui/dialog';

const WhatsAppButton = () => {
  const [showModal, setShowModal] = useState(false);

  return (
    <>
      {/* Fixed WhatsApp Button */}
      <div className="fixed bottom-6 right-6 z-50">
        <Button
          onClick={() => setShowModal(true)}
          className="bg-green-500 hover:bg-green-600 text-white rounded-full w-14 h-14 shadow-lg hover:shadow-xl transition-all duration-300 animate-pulse group"
        >
          <MessageCircle className="w-6 h-6 group-hover:scale-110 transition-transform" />
        </Button>
      </div>

      {/* Modal */}
      <Dialog open={showModal} onOpenChange={setShowModal}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <MessageCircle className="w-5 h-5 text-green-500" />
              WhatsApp Integration
            </DialogTitle>
          </DialogHeader>
          <div className="py-6">
            <div className="text-center space-y-4">
              <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto">
                <MessageCircle className="w-10 h-10 text-green-500" />
              </div>
              <h3 className="text-lg font-semibold text-gray-900">
                WhatsApp Bot is Live in Production!
              </h3>
              <p className="text-gray-600">
                Our intelligent WhatsApp bot for appointment scheduling,
                emergency alerts, and donor coordination is currently active
                in production environments.
              </p>
              <div className="bg-green-50 p-4 rounded-lg space-y-3">
                <div className="flex items-center gap-2 text-sm text-green-700">
                  <CheckCircle className="w-4 h-4" />
                  <span><strong>Instant notifications</strong> for appointments</span>
                </div>
                <div className="flex items-center gap-2 text-sm text-green-700">
                  <Users className="w-4 h-4" />
                  <span><strong>Donor coordination</strong> & matching</span>
                </div>
                <div className="flex items-center gap-2 text-sm text-green-700">
                  <Activity className="w-4 h-4" />
                  <span><strong>Emergency blood requests</strong> & alerts</span>
                </div>
                <div className="flex items-center gap-2 text-sm text-green-700">
                  <MessageCircle className="w-4 h-4" />
                  <span><strong>Seamless communication</strong> between all parties</span>
                </div>
              </div>
              <div className="text-xs text-gray-500 bg-gray-50 p-3 rounded">
                <strong>Demo Note:</strong> WhatsApp integration is fully functional in production.
                This demo showcases the UI integration points and feature overview.
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
};

export default WhatsAppButton;

```

`frontend/src/components/landing/FeatureShowcase.css`

```css
/* frontend/src/components/landing/FeatureShowcase.css */

@keyframes slide-up {
  from {
    opacity: 0;
    transform: translateY(40px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-slide-up {
  animation: slide-up 0.8s ease-out both;
}

@keyframes fade-in-up {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-fade-in-up {
  animation: fade-in-up 0.8s ease-out both;
}

```

`frontend/src/components/landing/FeatureShowcase.jsx`

```javascript
// import React, { useState, useEffect, useRef } from 'react';
// import { Card } from '../ui/card';
// import * as Icons from 'lucide-react';

// const FeatureShowcase = ({ features }) => {
//   const [visibleCards, setVisibleCards] = useState([]);
//   const sectionRef = useRef(null);

//   useEffect(() => {
//     const observer = new IntersectionObserver(
//       (entries) => {
//         entries.forEach((entry) => {
//           if (entry.isIntersecting) {
//             // Stagger the animation of feature cards
//             features.forEach((_, index) => {
//               setTimeout(() => {
//                 setVisibleCards(prev => [...new Set([...prev, index])]);
//               }, index * 150);
//             });
//           }
//         });
//       },
//       { threshold: 0.1 }
//     );

//     if (sectionRef.current) {
//       observer.observe(sectionRef.current);
//     }

//     return () => observer.disconnect();
//   }, [features]);

//   return (
//     <section ref={sectionRef} className="py-20 bg-gradient-to-b from-white to-gray-50">
//       <div className="container mx-auto px-6">
//         <div className="max-w-6xl mx-auto">
//           {/* Enhanced Section Header */}
//           <div className="text-center mb-16">
//             <div className="inline-flex items-center gap-2 bg-blue-100 text-blue-700 px-4 py-2 rounded-full text-sm font-medium mb-6 animate-bounce">
//               <Icons.Zap className="w-4 h-4" />
//               Revolutionary Technology
//             </div>
//             <h2 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6 animate-fade-in-up">
//               <span className="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
//                 Cutting-Edge Healthcare
//               </span>
//               <br />
//               <span className="text-gray-900">Platform</span>
//             </h2>
//             <p className="text-xl text-gray-600 max-w-3xl mx-auto animate-fade-in-up" style={{animationDelay: '0.2s'}}>
//               Our comprehensive platform combines artificial intelligence, real-time matching,
//               and seamless communication to transform blood donation in India.
//             </p>
//           </div>

//           {/* Enhanced Features Grid */}
//           <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
//             {features.map((feature, index) => {
//               const IconComponent = Icons[feature.icon] || Icons.Heart;
//               const isVisible = visibleCards.includes(index);

//               return (
//                 <Card
//                   key={index}
//                   className={`p-8 text-center hover:shadow-2xl transition-all duration-700 border-gray-100 hover:border-blue-200 group cursor-pointer transform hover:scale-105 hover:-translate-y-3 ${
//                     isVisible ? 'animate-slide-up opacity-100' : 'opacity-0 translate-y-10'
//                   }`}
//                   style={{
//                     animationDelay: `${index * 0.1}s`,
//                     background: 'linear-gradient(135deg, rgba(255,255,255,0.9) 0%, rgba(248,250,252,0.9) 100%)'
//                   }}
//                 >
//                   <div className="relative mb-6">
//                     <div className="w-20 h-20 bg-gradient-to-br from-blue-50 to-purple-50 group-hover:from-blue-100 group-hover:to-purple-100 rounded-3xl flex items-center justify-center mx-auto transition-all duration-500 transform group-hover:rotate-6 group-hover:scale-110">
//                       <IconComponent className="w-10 h-10 text-blue-600 group-hover:text-purple-600 transition-colors duration-300" />
//                     </div>
//                     {/* Floating animation circles */}
//                     <div className="absolute -top-2 -right-2 w-6 h-6 bg-red-200 rounded-full opacity-0 group-hover:opacity-100 group-hover:animate-ping transition-opacity duration-300"></div>
//                     <div className="absolute -bottom-2 -left-2 w-4 h-4 bg-green-200 rounded-full opacity-0 group-hover:opacity-100 group-hover:animate-pulse transition-opacity duration-300" style={{animationDelay: '0.2s'}}></div>
//                   </div>

//                   <h3 className="text-xl font-semibold text-gray-900 mb-4 group-hover:text-blue-700 transition-colors duration-300">
//                     {feature.title}
//                   </h3>

//                   <p className="text-gray-600 leading-relaxed group-hover:text-gray-700 transition-colors duration-300">
//                     {feature.description}
//                   </p>

//                   {/* Progress bar animation */}
//                   <div className="mt-6 w-full bg-gray-200 rounded-full h-1 overflow-hidden">
//                     <div className="bg-gradient-to-r from-blue-500 to-purple-500 h-1 rounded-full transition-all duration-1000 transform origin-left group-hover:scale-x-100 scale-x-0"></div>
//                   </div>

//                   {/* Hover effect overlay */}
//                   <div className="absolute inset-0 bg-gradient-to-br from-blue-500/5 to-purple-500/5 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
//                 </Card>
//               );
//             })}
//           </div>

//           {/* Enhanced Bottom CTA */}
//           <div className="text-center mt-20 animate-fade-in-up" style={{animationDelay: '0.8s'}}>
//             <div className="relative max-w-4xl mx-auto">
//               <div className="absolute inset-0 bg-gradient-to-r from-red-200 via-blue-200 to-purple-200 rounded-3xl blur-3xl opacity-20 animate-pulse"></div>
//               <div className="relative bg-gradient-to-br from-red-50 via-blue-50 to-purple-50 p-12 rounded-3xl border border-red-100 shadow-lg hover:shadow-2xl transition-all duration-500">
//                 <div className="flex items-center justify-center mb-6">
//                   <div className="flex space-x-2">
//                     <div className="w-3 h-3 bg-red-500 rounded-full animate-bounce"></div>
//                     <div className="w-3 h-3 bg-blue-500 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
//                     <div className="w-3 h-3 bg-purple-500 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
//                   </div>
//                 </div>

//                 <h3 className="text-3xl font-bold text-gray-900 mb-6">
//                   Ready to{' '}
//                   <span className="bg-gradient-to-r from-red-600 to-blue-600 bg-clip-text text-transparent">
//                     Transform Lives
//                   </span>
//                   ?
//                 </h3>

//                 <p className="text-gray-700 mb-8 text-lg">
//                   Join thousands of donors who are already making a difference through our platform.
//                 </p>

//                 <div className="flex flex-col sm:flex-row gap-4 justify-center">
//                   <button className="group bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 text-white px-10 py-4 rounded-xl font-medium transition-all duration-300 transform hover:scale-105 hover:-translate-y-1 shadow-lg hover:shadow-xl">
//                     <span className="flex items-center justify-center">
//                       Become a Donor
//                       <Icons.ArrowRight className="ml-2 w-5 h-5 transition-transform duration-300 group-hover:translate-x-1" />
//                     </span>
//                   </button>
//                   <button className="group border-2 border-blue-600 text-blue-600 hover:bg-blue-600 hover:text-white px-10 py-4 rounded-xl font-medium transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl">
//                     <span className="flex items-center justify-center">
//                       Find Support
//                       <Icons.Heart className="ml-2 w-5 h-5 transition-transform duration-300 group-hover:scale-110" />
//                     </span>
//                   </button>
//                 </div>
//               </div>
//             </div>
//           </div>
//         </div>
//       </div>

//       {/* Custom Animation Styles */}
//       <style jsx>{`
//         @keyframes slide-up {
//           from {
//             opacity: 0;
//             transform: translateY(40px);
//           }
//           to {
//             opacity: 1;
//             transform: translateY(0);
//           }
//         }

//         .animate-slide-up {
//           animation: slide-up 0.8s ease-out both;
//         }

//         @keyframes fade-in-up {
//           from {
//             opacity: 0;
//             transform: translateY(30px);
//           }
//           to {
//             opacity: 1;
//             transform: translateY(0);
//           }
//         }

//         .animate-fade-in-up {
//           animation: fade-in-up 0.8s ease-out both;
//         }
//       `}</style>
//     </section>
//   );
// };

// export default FeatureShowcase;



// frontend/src/components/landing/FeatureShowcase.jsx

import React, { useState, useEffect, useRef } from 'react';
import { Card } from '../ui/card';
import * as Icons from 'lucide-react';
import './FeatureShowcase.css'; // <-- IMPORT THE CSS FILE HERE

const FeatureShowcase = ({ features }) => {
  const [visibleCards, setVisibleCards] = useState([]);
  const sectionRef = useRef(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            features.forEach((_, index) => {
              setTimeout(() => {
                setVisibleCards(prev => [...new Set([...prev, index])]);
              }, index * 150);
            });
            observer.unobserve(entry.target); // Stop observing after animation
          }
        });
      },
      { threshold: 0.1 }
    );

    if (sectionRef.current) {
      observer.observe(sectionRef.current);
    }

    return () => {
      if (sectionRef.current) {
        observer.unobserve(sectionRef.current);
      }
    };
  }, [features]);

  return (
    <section ref={sectionRef} className="py-20 bg-gradient-to-b from-white to-gray-50">
      <div className="container mx-auto px-6">
        <div className="max-w-6xl mx-auto">
          {/* Section Header */}
          <div className="text-center mb-16">
            <div className="inline-flex items-center gap-2 bg-blue-100 text-blue-700 px-4 py-2 rounded-full text-sm font-medium mb-6">
              <Icons.Zap className="w-4 h-4" />
              Revolutionary Technology
            </div>
            <h2 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
              <span className="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                Cutting-Edge Healthcare
              </span> Platform
            </h2>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto">
              Our platform combines AI, real-time matching, and seamless communication to transform blood donation in India.
            </p>
          </div>

          {/* Features Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {features.map((feature, index) => {
              const IconComponent = Icons[feature.icon] || Icons.Heart;
              const isVisible = visibleCards.includes(index);
              return (
                <Card
                  key={index}
                  className={`p-8 text-center hover:shadow-2xl transition-all duration-700 border-gray-100 hover:border-blue-200 group cursor-pointer transform hover:scale-105 hover:-translate-y-3 ${
                    isVisible ? 'animate-slide-up opacity-100' : 'opacity-0 translate-y-10'
                  }`}
                >
                  <div className="relative mb-6">
                    <div className="w-20 h-20 bg-gradient-to-br from-blue-50 to-purple-50 group-hover:from-blue-100 group-hover:to-purple-100 rounded-3xl flex items-center justify-center mx-auto transition-all duration-500 transform group-hover:rotate-6 group-hover:scale-110">
                      <IconComponent className="w-10 h-10 text-blue-600 group-hover:text-purple-600 transition-colors duration-300" />
                    </div>
                  </div>
                  <h3 className="text-xl font-semibold text-gray-900 mb-4 group-hover:text-blue-700 transition-colors duration-300">
                    {feature.title}
                  </h3>
                  <p className="text-gray-600 leading-relaxed group-hover:text-gray-700 transition-colors duration-300">
                    {feature.description}
                  </p>
                </Card>
              );
            })}
          </div>
        </div>
      </div>
    </section>
  );
};

export default FeatureShowcase;

```

`frontend/src/components/landing/HeroSection.css`

```css
/* frontend/src/components/landing/HeroSection.css */

@keyframes fade-in-up {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes gradient {
  0%, 100% {
    background-size: 200% 200%;
    background-position: left center;
  }
  50% {
    background-size: 200% 200%;
    background-position: right center;
  }
}

.animate-fade-in-up {
  animation: fade-in-up 0.8s ease-out both;
}

.animate-gradient {
  animation: gradient 3s ease infinite;
}

```

`frontend/src/components/landing/HeroSection.jsx`

```javascript
// import React, { useState, useEffect } from 'react';
// import { ArrowRight, Heart, Users, Activity, Star } from 'lucide-react';
// import { Button } from '../ui/button';
// import { Card } from '../ui/card';
// import { useNavigate } from 'react-router-dom';

// const HeroSection = ({ stats, loading }) => {
//   const navigate = useNavigate();
//   const [animatedStats, setAnimatedStats] = useState({
//     total_donors: 0,
//     patients_helped: 0,
//     active_donors: 0
//   });

//   useEffect(() => {
//     // Animate counters on mount
//     const animateCounter = (target, key) => {
//       let current = 0;
//       const increment = target / 100;
//       const timer = setInterval(() => {
//         current += increment;
//         if (current >= target) {
//           current = target;
//           clearInterval(timer);
//         }
//         setAnimatedStats(prev => ({ ...prev, [key]: Math.floor(current) }));
//       }, 20);
//     };

//     const timer = setTimeout(() => {
//       animateCounter(stats.total_donors, 'total_donors');
//       animateCounter(stats.patients_helped, 'patients_helped');
//       animateCounter(stats.active_donors, 'active_donors');
//     }, 500);

//     return () => clearTimeout(timer);
//   }, [stats]);

//   return (
//     <section className="relative bg-gradient-to-br from-red-50 via-white to-red-100 py-20 overflow-hidden">
//       {/* Animated Background Pattern */}
//       <div className="absolute inset-0 opacity-10">
//         <div className="absolute top-10 left-10 w-20 h-20 rounded-full bg-red-600 animate-pulse"></div>
//         <div className="absolute top-32 right-20 w-16 h-16 rounded-full bg-red-400 animate-bounce" style={{animationDelay: '1s'}}></div>
//         <div className="absolute bottom-20 left-1/4 w-24 h-24 rounded-full bg-red-300 animate-pulse" style={{animationDelay: '2s'}}></div>
//         <div className="absolute top-1/2 right-1/3 w-12 h-12 rounded-full bg-red-500 animate-bounce" style={{animationDelay: '0.5s'}}></div>
//       </div>

//       {/* Heartbeat Animation */}
//       <div className="absolute top-16 right-16 opacity-20">
//         <Heart className="w-32 h-32 text-red-500 animate-pulse" />
//       </div>

//       <div className="container mx-auto px-6 relative z-10">
//         <div className="max-w-6xl mx-auto">
//           {/* Main Hero Content with Slide-in Animation */}
//           <div className="text-center mb-16 transform transition-all duration-1000 ease-out">
//             <div className="inline-flex items-center gap-2 bg-red-100 text-red-700 px-4 py-2 rounded-full text-sm font-medium mb-6 transform transition-all duration-500 hover:scale-105 hover:bg-red-200 cursor-pointer">
//               <Heart className="w-4 h-4 animate-pulse" />
//               Mission 2030
//             </div>

//             <h1 className="text-5xl md:text-7xl font-bold text-gray-900 mb-6 leading-tight animate-fade-in-up">
//               <span className="text-red-600 animate-gradient bg-gradient-to-r from-red-600 to-red-700 bg-clip-text text-transparent">Thalassemia-Free</span>
//               <br />
//               <span className="transform transition-all duration-700 hover:scale-105 inline-block">India</span>{' '}
//               <span className="text-red-600 animate-gradient bg-gradient-to-r from-red-600 to-red-700 bg-clip-text text-transparent">2030</span>
//             </h1>

//             <p className="text-xl md:text-2xl text-gray-600 mb-8 max-w-4xl mx-auto animate-fade-in-up" style={{animationDelay: '0.3s'}}>
//               Connecting blood donors with thalassemia patients through AI-powered matching,
//               creating lifelong bridges of hope and healing across India.
//             </p>

//             <div className="flex flex-col sm:flex-row gap-4 justify-center mb-12 animate-fade-in-up" style={{animationDelay: '0.6s'}}>
//               <Button
//                 size="lg"
//                 onClick={() => navigate('/login')}
//                 className="bg-red-600 hover:bg-red-700 text-white px-8 py-4 text-lg rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 hover:-translate-y-1 group"
//               >
//                 Join the Mission
//                 <ArrowRight className="ml-2 w-5 h-5 transition-transform duration-300 group-hover:translate-x-1" />
//               </Button>
//               <Button
//                 variant="outline"
//                 size="lg"
//                 className="border-red-600 text-red-600 hover:bg-red-50 px-8 py-4 text-lg rounded-xl transition-all duration-300 transform hover:scale-105"
//               >
//                 Learn More
//               </Button>
//             </div>
//           </div>

//           {/* Enhanced Impact Statistics */}
//           <div className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto animate-fade-in-up" style={{animationDelay: '0.9s'}}>
//             <Card className="p-6 text-center bg-white/90 backdrop-blur-sm border-red-100 hover:shadow-xl transition-all duration-500 transform hover:scale-105 hover:-translate-y-2 group">
//               <div className="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4 transition-all duration-300 group-hover:bg-red-200 group-hover:scale-110">
//                 <Users className="w-6 h-6 text-red-600 transition-transform duration-300 group-hover:scale-110" />
//               </div>
//               <div className="text-3xl font-bold text-gray-900 mb-2 transition-all duration-300 group-hover:text-red-600">
//                 {loading ? '...' : animatedStats.total_donors.toLocaleString()}+
//               </div>
//               <div className="text-gray-600 font-medium">Registered Donors</div>
//               <div className="w-full bg-red-100 rounded-full h-2 mt-3 overflow-hidden">
//                 <div className="bg-red-500 h-2 rounded-full animate-pulse" style={{width: '85%'}}></div>
//               </div>
//             </Card>

//             <Card className="p-6 text-center bg-white/90 backdrop-blur-sm border-red-100 hover:shadow-xl transition-all duration-500 transform hover:scale-105 hover:-translate-y-2 group">
//               <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4 transition-all duration-300 group-hover:bg-green-200 group-hover:scale-110">
//                 <Heart className="w-6 h-6 text-green-600 transition-transform duration-300 group-hover:scale-110 group-hover:animate-pulse" />
//               </div>
//               <div className="text-3xl font-bold text-gray-900 mb-2 transition-all duration-300 group-hover:text-green-600">
//                 {loading ? '...' : animatedStats.patients_helped}+
//               </div>
//               <div className="text-gray-600 font-medium">Lives Transformed</div>
//               <div className="w-full bg-green-100 rounded-full h-2 mt-3 overflow-hidden">
//                 <div className="bg-green-500 h-2 rounded-full animate-pulse" style={{width: '70%'}}></div>
//               </div>
//             </Card>

//             <Card className="p-6 text-center bg-white/90 backdrop-blur-sm border-red-100 hover:shadow-xl transition-all duration-500 transform hover:scale-105 hover:-translate-y-2 group">
//               <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4 transition-all duration-300 group-hover:bg-blue-200 group-hover:scale-110">
//                 <Activity className="w-6 h-6 text-blue-600 transition-transform duration-300 group-hover:scale-110" />
//               </div>
//               <div className="text-3xl font-bold text-gray-900 mb-2 transition-all duration-300 group-hover:text-blue-600">
//                 {loading ? '...' : animatedStats.active_donors}
//               </div>
//               <div className="text-gray-600 font-medium">Active This Month</div>
//               <div className="w-full bg-blue-100 rounded-full h-2 mt-3 overflow-hidden">
//                 <div className="bg-blue-500 h-2 rounded-full animate-pulse" style={{width: '90%'}}></div>
//               </div>
//             </Card>
//           </div>

//           {/* Enhanced Mission Statement */}
//           <div className="text-center mt-16 max-w-3xl mx-auto animate-fade-in-up" style={{animationDelay: '1.2s'}}>
//             <div className="relative group">
//               <div className="absolute inset-0 bg-gradient-to-r from-red-100 to-red-200 rounded-2xl blur-xl opacity-30 group-hover:opacity-50 transition-opacity duration-300"></div>
//               <div className="relative bg-white/80 backdrop-blur-sm p-8 rounded-2xl border border-red-100 shadow-lg hover:shadow-xl transition-all duration-300">
//                 <p className="text-lg text-gray-700">
//                   <strong className="text-red-600 text-xl">"Every 20 days, a thalassemia patient needs your help."</strong>
//                   <br />
//                   <span className="block mt-4 text-base">
//                     Together, we're building an AI-powered ecosystem that ensures no patient waits for blood,
//                     no donor feels disconnected, and every drop of blood creates a bridge to better health.
//                   </span>
//                 </p>
//                 <div className="flex items-center justify-center mt-6 space-x-2">
//                   <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
//                   <div className="w-2 h-2 bg-red-400 rounded-full animate-pulse" style={{animationDelay: '0.2s'}}></div>
//                   <div className="w-2 h-2 bg-red-300 rounded-full animate-pulse" style={{animationDelay: '0.4s'}}></div>
//                 </div>
//               </div>
//             </div>
//           </div>
//         </div>
//       </div>

//       {/* Custom Styles */}
//       <style jsx>{`
//         @keyframes fade-in-up {
//           from {
//             opacity: 0;
//             transform: translateY(30px);
//           }
//           to {
//             opacity: 1;
//             transform: translateY(0);
//           }
//         }

//         @keyframes gradient {
//           0%, 100% {
//             background-size: 200% 200%;
//             background-position: left center;
//           }
//           50% {
//             background-size: 200% 200%;
//             background-position: right center;
//           }
//         }

//         .animate-fade-in-up {
//           animation: fade-in-up 0.8s ease-out both;
//         }

//         .animate-gradient {
//           animation: gradient 3s ease infinite;
//         }
//       `}</style>
//     </section>
//   );
// };

// export default HeroSection;


// frontend/src/components/landing/HeroSection.jsx

import React, { useState, useEffect } from 'react';
import { ArrowRight, Heart, Users, Activity } from 'lucide-react';
import { Button } from '../ui/button';
import { Card } from '../ui/card';
import { useNavigate } from 'react-router-dom';
import './HeroSection.css'; // This line imports the styles and fixes the warning

const HeroSection = ({ stats, loading }) => {
  const navigate = useNavigate();
  const [animatedStats, setAnimatedStats] = useState({
    total_donors: 0,
    patients_helped: 0,
    active_donors: 0
  });

  useEffect(() => {
    const animateCounter = (target, key) => {
      const numericTarget = Number(target) || 0;
      if (numericTarget === 0) return;
      
      let current = 0;
      const increment = numericTarget / 100;
      
      const timer = setInterval(() => {
        current += increment;
        if (current >= numericTarget) {
          current = numericTarget;
          clearInterval(timer);
        }
        setAnimatedStats(prev => ({ ...prev, [key]: Math.floor(current) }));
      }, 20);
      return () => clearInterval(timer);
    };

    if (stats) {
        const timerId = setTimeout(() => {
            animateCounter(stats.total_donors, 'total_donors');
            animateCounter(stats.patients_helped, 'patients_helped');
            animateCounter(stats.active_donors, 'active_donors');
        }, 500);
        return () => clearTimeout(timerId);
    }
  }, [stats]);

  return (
    <section className="relative bg-gradient-to-br from-red-50 via-white to-red-100 py-20 overflow-hidden">
      {/* Animated Background Pattern */}
      <div className="absolute inset-0 opacity-10">
        <div className="absolute top-10 left-10 w-20 h-20 rounded-full bg-red-600 animate-pulse"></div>
        <div className="absolute top-32 right-20 w-16 h-16 rounded-full bg-red-400 animate-bounce" style={{animationDelay: '1s'}}></div>
        <div className="absolute bottom-20 left-1/4 w-24 h-24 rounded-full bg-red-300 animate-pulse" style={{animationDelay: '2s'}}></div>
        <div className="absolute top-1/2 right-1/3 w-12 h-12 rounded-full bg-red-500 animate-bounce" style={{animationDelay: '0.5s'}}></div>
      </div>

      {/* Heartbeat Animation */}
      <div className="absolute top-16 right-16 opacity-20">
        <Heart className="w-32 h-32 text-red-500 animate-pulse" />
      </div>

      <div className="container mx-auto px-6 relative z-10">
        <div className="max-w-6xl mx-auto">
          {/* Main Hero Content */}
          <div className="text-center mb-16">
            <div className="inline-flex items-center gap-2 bg-red-100 text-red-700 px-4 py-2 rounded-full text-sm font-medium mb-6 hover:bg-red-200 cursor-pointer">
              <Heart className="w-4 h-4 animate-pulse" />
              Mission 2030
            </div>

            <h1 className="text-5xl md:text-7xl font-bold text-gray-900 mb-6 leading-tight animate-fade-in-up">
              <span className="text-red-600 animate-gradient bg-gradient-to-r from-red-600 to-red-700 bg-clip-text text-transparent">Thalassemia-Free</span>
              <br />
              <span>India</span>{' '}
              <span className="text-red-600 animate-gradient bg-gradient-to-r from-red-600 to-red-700 bg-clip-text text-transparent">2030</span>
            </h1>

            <p className="text-xl md:text-2xl text-gray-600 mb-8 max-w-4xl mx-auto animate-fade-in-up" style={{animationDelay: '0.3s'}}>
              Connecting blood donors with thalassemia patients through AI-powered matching,
              creating lifelong bridges of hope and healing across India.
            </p>

            <div className="flex flex-col sm:flex-row gap-4 justify-center mb-12 animate-fade-in-up" style={{animationDelay: '0.6s'}}>
              <Button
                size="lg"
                onClick={() => navigate('/login')}
                className="bg-red-600 hover:bg-red-700 text-white px-8 py-4 text-lg rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 hover:-translate-y-1 group"
              >
                Join the Mission
                <ArrowRight className="ml-2 w-5 h-5 transition-transform duration-300 group-hover:translate-x-1" />
              </Button>
              <Button
                variant="outline"
                size="lg"
                className="border-red-600 text-red-600 hover:bg-red-50 px-8 py-4 text-lg rounded-xl transition-all duration-300 transform hover:scale-105"
              >
                Learn More
              </Button>
            </div>
          </div>

          {/* Impact Statistics */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto animate-fade-in-up" style={{animationDelay: '0.9s'}}>
            <Card className="p-6 text-center bg-white/90 backdrop-blur-sm border-red-100 hover:shadow-xl transition-all duration-500 transform hover:scale-105 hover:-translate-y-2 group">
              <div className="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4 transition-all duration-300 group-hover:bg-red-200 group-hover:scale-110">
                <Users className="w-6 h-6 text-red-600" />
              </div>
              <div className="text-3xl font-bold text-gray-900 mb-2 group-hover:text-red-600">
                {loading ? '...' : animatedStats.total_donors.toLocaleString()}+
              </div>
              <div className="text-gray-600 font-medium">Registered Donors</div>
            </Card>

            <Card className="p-6 text-center bg-white/90 backdrop-blur-sm border-red-100 hover:shadow-xl transition-all duration-500 transform hover:scale-105 hover:-translate-y-2 group">
              <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4 transition-all duration-300 group-hover:bg-green-200 group-hover:scale-110">
                <Heart className="w-6 h-6 text-green-600" />
              </div>
              <div className="text-3xl font-bold text-gray-900 mb-2 group-hover:text-green-600">
                {loading ? '...' : animatedStats.patients_helped}+
              </div>
              <div className="text-gray-600 font-medium">Lives Transformed</div>
            </Card>

            <Card className="p-6 text-center bg-white/90 backdrop-blur-sm border-red-100 hover:shadow-xl transition-all duration-500 transform hover:scale-105 hover:-translate-y-2 group">
              <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4 transition-all duration-300 group-hover:bg-blue-200 group-hover:scale-110">
                <Activity className="w-6 h-6 text-blue-600" />
              </div>
              <div className="text-3xl font-bold text-gray-900 mb-2 group-hover:text-blue-600">
                {loading ? '...' : animatedStats.active_donors}
              </div>
              <div className="text-gray-600 font-medium">Active This Month</div>
            </Card>
          </div>
        </div>
      </div>
    </section>
  );
};

export default HeroSection;

```

`frontend/src/components/landing/SuccessStories.jsx`

```javascript
import React, { useState, useEffect } from 'react';
import { Card } from '../ui/card';
import { Button } from '../ui/button';
import { ChevronLeft, ChevronRight, Quote, Heart } from 'lucide-react';

const SuccessStories = ({ stories }) => {
  const [currentIndex, setCurrentIndex] = useState(0);

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentIndex((prevIndex) =>
        prevIndex === stories.length - 1 ? 0 : prevIndex + 1
      );
    }, 5000);

    return () => clearInterval(timer);
  }, [stories.length]);

  const goToPrevious = () => {
    setCurrentIndex(currentIndex === 0 ? stories.length - 1 : currentIndex - 1);
  };

  const goToNext = () => {
    setCurrentIndex(currentIndex === stories.length - 1 ? 0 : currentIndex + 1);
  };

  return (
    <section className="py-20 bg-gradient-to-b from-gray-50 to-white">
      <div className="container mx-auto px-6">
        <div className="max-w-6xl mx-auto">
          {/* Section Header */}
          <div className="text-center mb-16">
            <div className="inline-flex items-center gap-2 bg-green-100 text-green-700 px-4 py-2 rounded-full text-sm font-medium mb-6 animate-pulse">
              <Heart className="w-4 h-4" />
              Real Impact Stories
            </div>
            <h2 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
              Stories of Hope
            </h2>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto">
              Real patients, real impact. Discover how BloodBridge AI is transforming
              lives across India, one transfusion at a time.
            </p>
          </div>

          {/* Stories Carousel */}
          <div className="relative">
            <Card className="p-8 md:p-12 bg-white shadow-xl border-0 overflow-hidden">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 items-center">
                {/* Story Content */}
                <div className="space-y-6">
                  <div className="flex items-start gap-4">
                    <div className="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center flex-shrink-0">
                      <Quote className="w-6 h-6 text-red-600" />
                    </div>
                    <div>
                      <h3 className="text-2xl font-bold text-gray-900 mb-2">
                        {stories[currentIndex].name}
                      </h3>
                      <div className="text-red-600 font-medium mb-4">
                        Age {stories[currentIndex].age} • Thalassemia Patient
                      </div>
                    </div>
                  </div>

                  <blockquote className="text-lg text-gray-700 leading-relaxed italic">
                    "{stories[currentIndex].story}"
                  </blockquote>

                  <div className="flex items-center gap-4 pt-4 border-t border-gray-100">
                    <div className="flex items-center gap-2 text-green-600">
                      <Heart className="w-5 h-5" />
                      <span className="font-medium">{stories[currentIndex].impact}</span>
                    </div>
                  </div>
                </div>

                {/* Story Image */}
                <div className="relative">
                  <div className="aspect-square rounded-2xl overflow-hidden bg-gradient-to-br from-red-100 to-blue-100 p-8">
                    <img
                      src={stories[currentIndex].image}
                      alt={stories[currentIndex].name}
                      className="w-full h-full object-cover rounded-xl shadow-lg"
                    />
                  </div>
                  
                  {/* Floating elements */}
                  <div className="absolute -top-4 -right-4 w-8 h-8 bg-red-500 rounded-full animate-pulse"></div>
                  <div className="absolute -bottom-4 -left-4 w-6 h-6 bg-blue-500 rounded-full animate-bounce"></div>
                </div>
              </div>

              {/* Navigation Controls */}
              <div className="flex items-center justify-between mt-8 pt-8 border-t border-gray-100">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={goToPrevious}
                  className="flex items-center gap-2 hover:bg-red-50 hover:border-red-200"
                >
                  <ChevronLeft className="w-4 h-4" />
                  Previous
                </Button>

                {/* Dots Indicator */}
                <div className="flex gap-2">
                  {stories.map((_, index) => (
                    <button
                      key={index}
                      onClick={() => setCurrentIndex(index)}
                      className={`w-3 h-3 rounded-full transition-all duration-300 ${
                        index === currentIndex
                          ? 'bg-red-600 scale-125'
                          : 'bg-gray-300 hover:bg-gray-400'
                      }`}
                    />
                  ))}
                </div>

                <Button
                  variant="outline"
                  size="sm"
                  onClick={goToNext}
                  className="flex items-center gap-2 hover:bg-red-50 hover:border-red-200"
                >
                  Next
                  <ChevronRight className="w-4 h-4" />
                </Button>
              </div>
            </Card>
          </div>

          {/* Bottom Stats */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-16">
            <div className="text-center">
              <div className="text-3xl font-bold text-red-600 mb-2">100%</div>
              <div className="text-gray-600">Patient Satisfaction Rate</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-green-600 mb-2">24/7</div>
              <div className="text-gray-600">Emergency Response</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-blue-600 mb-2">Zero</div>
              <div className="text-gray-600">Missed Appointments</div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default SuccessStories;

```

`frontend/src/components/ui/accordion.jsx`

```javascript
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "../../lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item ref={ref} className={cn("border-b", className)} {...props} />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}>
      {children}
      <ChevronDown
        className="h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}>
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

```

`frontend/src/components/ui/alert-dialog.jsx`

```javascript
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "../../lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref} />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props} />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-2 text-center sm:text-left", className)}
    {...props} />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title ref={ref} className={cn("text-lg font-semibold", className)} {...props} />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action ref={ref} className={cn(buttonVariants(), className)} {...props} />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(buttonVariants({ variant: "outline" }), "mt-2 sm:mt-0", className)}
    {...props} />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

```

`frontend/src/components/ui/alert.jsx`

```javascript
import * as React from "react"
import { cva } from "class-variance-authority";

import { cn } from "../../lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props} />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props} />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props} />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

```

`frontend/src/components/ui/aspect-ratio.jsx`

```javascript
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

```

`frontend/src/components/ui/avatar.jsx`

```javascript
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "../../lib/utils"

const Avatar = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full", className)}
    {...props} />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props} />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props} />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

```

`frontend/src/components/ui/badge.jsx`

```javascript
import * as React from "react"
import { cva } from "class-variance-authority";

import { cn } from "../../lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  ...props
}) {
  return (<div className={cn(badgeVariants({ variant }), className)} {...props} />);
}

export { Badge, badgeVariants }

```

`frontend/src/components/ui/breadcrumb.jsx`

```javascript
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "../../lib/utils"

const Breadcrumb = React.forwardRef(
  ({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />
)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props} />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props} />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props} />
  );
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props} />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}>
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}>
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

```

`frontend/src/components/ui/button.jsx`

```javascript
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "../../lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"
  return (
    <Comp
      className={cn(buttonVariants({ variant, size, className }))}
      ref={ref}
      {...props} />
  );
})
Button.displayName = "Button"

export { Button, buttonVariants }

```

`frontend/src/components/ui/calendar.jsx`

```javascript
import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "../../lib/utils"
import { buttonVariants } from "@/components/ui/button"

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md"
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-8 w-8 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_start: "day-range-start",
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props} />
  );
}
Calendar.displayName = "Calendar"

export { Calendar }

```

`frontend/src/components/ui/card.jsx`

```javascript
import * as React from "react"

import { cn } from "../../lib/utils"

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("rounded-xl border bg-card text-card-foreground shadow", className)}
    {...props} />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props} />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props} />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props} />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

```

`frontend/src/components/ui/carousel.jsx`

```javascript
import * as React from "react"
import useEmblaCarousel from "embla-carousel-react";
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "../../lib/utils"
import { Button } from "@/components/ui/button"

const CarouselContext = React.createContext(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef((
  {
    orientation = "horizontal",
    opts,
    setApi,
    plugins,
    className,
    children,
    ...props
  },
  ref
) => {
  const [carouselRef, api] = useEmblaCarousel({
    ...opts,
    axis: orientation === "horizontal" ? "x" : "y",
  }, plugins)
  const [canScrollPrev, setCanScrollPrev] = React.useState(false)
  const [canScrollNext, setCanScrollNext] = React.useState(false)

  const onSelect = React.useCallback((api) => {
    if (!api) {
      return
    }

    setCanScrollPrev(api.canScrollPrev())
    setCanScrollNext(api.canScrollNext())
  }, [])

  const scrollPrev = React.useCallback(() => {
    api?.scrollPrev()
  }, [api])

  const scrollNext = React.useCallback(() => {
    api?.scrollNext()
  }, [api])

  const handleKeyDown = React.useCallback((event) => {
    if (event.key === "ArrowLeft") {
      event.preventDefault()
      scrollPrev()
    } else if (event.key === "ArrowRight") {
      event.preventDefault()
      scrollNext()
    }
  }, [scrollPrev, scrollNext])

  React.useEffect(() => {
    if (!api || !setApi) {
      return
    }

    setApi(api)
  }, [api, setApi])

  React.useEffect(() => {
    if (!api) {
      return
    }

    onSelect(api)
    api.on("reInit", onSelect)
    api.on("select", onSelect)

    return () => {
      api?.off("select", onSelect)
    };
  }, [api, onSelect])

  return (
    <CarouselContext.Provider
      value={{
        carouselRef,
        api: api,
        opts,
        orientation:
          orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
        scrollPrev,
        scrollNext,
        canScrollPrev,
        canScrollNext,
      }}>
      <div
        ref={ref}
        onKeyDownCapture={handleKeyDown}
        className={cn("relative", className)}
        role="region"
        aria-roledescription="carousel"
        {...props}>
        {children}
      </div>
    </CarouselContext.Provider>
  );
})
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props} />
    </div>
  );
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props} />
  );
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn("absolute  h-8 w-8 rounded-full", orientation === "horizontal"
        ? "-left-12 top-1/2 -translate-y-1/2"
        : "-top-12 left-1/2 -translate-x-1/2 rotate-90", className)}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}>
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  );
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn("absolute h-8 w-8 rounded-full", orientation === "horizontal"
        ? "-right-12 top-1/2 -translate-y-1/2"
        : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90", className)}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}>
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  );
})
CarouselNext.displayName = "CarouselNext"

export { Carousel, CarouselContent, CarouselItem, CarouselPrevious, CarouselNext };

```

`frontend/src/components/ui/checkbox.jsx`

```javascript
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "../../lib/utils"

const Checkbox = React.forwardRef(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}>
    <CheckboxPrimitive.Indicator className={cn("flex items-center justify-center text-current")}>
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

```

`frontend/src/components/ui/collapsible.jsx`

```javascript
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

```

`frontend/src/components/ui/command.jsx`

```javascript
import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "../../lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props} />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({
  children,
  ...props
}) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0">
        <Command
          className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
}

const CommandInput = React.forwardRef(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props} />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props} />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef((props, ref) => (
  <CommandPrimitive.Empty ref={ref} className="py-6 text-center text-sm" {...props} />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props} />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator ref={ref} className={cn("-mx-1 h-px bg-border", className)} {...props} />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props} />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)}
      {...props} />
  );
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

```

`frontend/src/components/ui/context-menu.jsx`

```javascript
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "../../lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}>
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]",
      className
    )}
    {...props} />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]",
        className
      )}
      {...props} />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props} />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-4 w-4 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props} />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props} />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)}
      {...props} />
  );
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

```

`frontend/src/components/ui/dialog.jsx`

```javascript
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "../../lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props} />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}>
      {children}
      <DialogPrimitive.Close
        className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)}
    {...props} />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props} />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

```

`frontend/src/components/ui/drawer.jsx`

```javascript
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "../../lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}) => (
  <DrawerPrimitive.Root shouldScaleBackground={shouldScaleBackground} {...props} />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props} />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}>
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props} />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}) => (
  <div className={cn("mt-auto flex flex-col gap-2 p-4", className)} {...props} />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props} />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

```

`frontend/src/components/ui/dropdown-menu.jsx`

```javascript
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "../../lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}>
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
      className
    )}
    {...props} />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
        className
      )}
      {...props} />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props} />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
    {...props} />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props} />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props} />
  );
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

```

`frontend/src/components/ui/form.jsx`

```javascript
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { Controller, FormProvider, useFormContext } from "react-hook-form";

import { cn } from "../../lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

const FormFieldContext = React.createContext({})

const FormField = (
  {
    ...props
  }
) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

const FormItemContext = React.createContext({})

const FormItem = React.forwardRef(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  );
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props} />
  );
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props} />
  );
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-[0.8rem] text-muted-foreground", className)}
      {...props} />
  );
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-[0.8rem] font-medium text-destructive", className)}
      {...props}>
      {body}
    </p>
  );
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

```

`frontend/src/components/ui/hover-card.jsx`

```javascript
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "../../lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]",
      className
    )}
    {...props} />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

```

`frontend/src/components/ui/input-otp.jsx`

```javascript
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Minus } from "lucide-react"

import { cn } from "../../lib/utils"

const InputOTP = React.forwardRef(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn("flex items-center gap-2 has-[:disabled]:opacity-50", containerClassName)}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props} />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-1 ring-ring",
        className
      )}
      {...props}>
      {char}
      {hasFakeCaret && (
        <div
          className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  );
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Minus />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

```

`frontend/src/components/ui/input.jsx`

```javascript
import * as React from "react"

import { cn } from "../../lib/utils"

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props} />
  );
})
Input.displayName = "Input"

export { Input }

```

`frontend/src/components/ui/label.jsx`

```javascript
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva } from "class-variance-authority";

import { cn } from "../../lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

```

`frontend/src/components/ui/menubar.jsx`

```javascript
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "../../lib/utils"

function MenubarMenu({
  ...props
}) {
  return <MenubarPrimitive.Menu {...props} />;
}

function MenubarGroup({
  ...props
}) {
  return <MenubarPrimitive.Group {...props} />;
}

function MenubarPortal({
  ...props
}) {
  return <MenubarPrimitive.Portal {...props} />;
}

function MenubarRadioGroup({
  ...props
}) {
  return <MenubarPrimitive.RadioGroup {...props} />;
}

function MenubarSub({
  ...props
}) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />;
}

const Menubar = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm",
      className
    )}
    {...props} />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props} />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}>
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]",
      className
    )}
    {...props} />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef((
  { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
  ref
) => (
  <MenubarPrimitive.Portal>
    <MenubarPrimitive.Content
      ref={ref}
      align={align}
      alignOffset={alignOffset}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]",
        className
      )}
      {...props} />
  </MenubarPrimitive.Portal>
))
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props} />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-4 w-4 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
    {...props} />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props} />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)}
      {...props} />
  );
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

```

`frontend/src/components/ui/navigation-menu.jsx`

```javascript
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "../../lib/utils"

const NavigationMenu = React.forwardRef(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}>
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props} />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent"
)

const NavigationMenuTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}>
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180"
      aria-hidden="true" />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props} />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props} />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}>
    <div
      className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

```

`frontend/src/components/ui/pagination.jsx`

```javascript
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "../../lib/utils"
import { buttonVariants } from "@/components/ui/button";

const Pagination = ({
  className,
  ...props
}) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props} />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props} />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(buttonVariants({
      variant: isActive ? "outline" : "ghost",
      size,
    }), className)}
    {...props} />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}>
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}>
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}>
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
}

```

`frontend/src/components/ui/popover.jsx`

```javascript
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "../../lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverAnchor = PopoverPrimitive.Anchor

const PopoverContent = React.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]",
        className
      )}
      {...props} />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }

```

`frontend/src/components/ui/progress.jsx`

```javascript
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "../../lib/utils"

const Progress = React.forwardRef(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
      className
    )}
    {...props}>
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }} />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

```

`frontend/src/components/ui/radio-group.jsx`

```javascript
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "../../lib/utils"

const RadioGroup = React.forwardRef(({ className, ...props }, ref) => {
  return (<RadioGroupPrimitive.Root className={cn("grid gap-2", className)} {...props} ref={ref} />);
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}>
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-3.5 w-3.5 fill-primary" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

```

`frontend/src/components/ui/resizable.jsx`

```javascript
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "../../lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props} />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}>
    {withHandle && (
      <div
        className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

```

`frontend/src/components/ui/scroll-area.jsx`

```javascript
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "../../lib/utils"

const ScrollArea = React.forwardRef(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}>
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}>
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

```

`frontend/src/components/ui/select.jsx`

```javascript
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "../../lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}>
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}>
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn("p-1", position === "popper" &&
          "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]")}>
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props} />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props} />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

```

`frontend/src/components/ui/separator.jsx`

```javascript
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "../../lib/utils"

const Separator = React.forwardRef((
  { className, orientation = "horizontal", decorative = true, ...props },
  ref
) => (
  <SeparatorPrimitive.Root
    ref={ref}
    decorative={decorative}
    orientation={orientation}
    className={cn(
      "shrink-0 bg-border",
      orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
      className
    )}
    {...props} />
))
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

```

`frontend/src/components/ui/sheet.jsx`

```javascript
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva } from "class-variance-authority";
import { X } from "lucide-react"

import { cn } from "../../lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref} />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

const SheetContent = React.forwardRef(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content ref={ref} className={cn(sheetVariants({ side }), className)} {...props}>
      <SheetPrimitive.Close
        className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
      {children}
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-2 text-center sm:text-left", className)}
    {...props} />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props} />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

```

`frontend/src/components/ui/skeleton.jsx`

```javascript
import { cn } from "../../lib/utils"

function Skeleton({
  className,
  ...props
}) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props} />
  );
}

export { Skeleton }

```

`frontend/src/components/ui/slider.jsx`

```javascript
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "../../lib/utils"

const Slider = React.forwardRef(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn("relative flex w-full touch-none select-none items-center", className)}
    {...props}>
    <SliderPrimitive.Track
      className="relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb
      className="block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

```

`frontend/src/components/ui/sonner.jsx`

```javascript
import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

const Toaster = ({
  ...props
}) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props} />
  );
}

export { Toaster }

```

`frontend/src/components/ui/switch.jsx`

```javascript
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "../../lib/utils"

const Switch = React.forwardRef(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}>
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
      )} />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

```

`frontend/src/components/ui/table.jsx`

```javascript
import * as React from "react"

import { cn } from "../../lib/utils"

const Table = React.forwardRef(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props} />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props} />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0", className)}
    {...props} />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props} />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props} />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props} />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props} />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

```

`frontend/src/components/ui/tabs.jsx`

```javascript
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "../../lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props} />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props} />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props} />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

```

`frontend/src/components/ui/textarea.jsx`

```javascript
import * as React from "react"

import { cn } from "../../lib/utils"

const Textarea = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props} />
  );
})
Textarea.displayName = "Textarea"

export { Textarea }

```

`frontend/src/components/ui/toast.jsx`

```javascript
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva } from "class-variance-authority";
import { X } from "lucide-react"

import { cn } from "../../lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props} />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props} />
  );
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props} />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}>
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold [&+div]:text-xs", className)}
    {...props} />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Description ref={ref} className={cn("text-sm opacity-90", className)} {...props} />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

export { ToastProvider, ToastViewport, Toast, ToastTitle, ToastDescription, ToastClose, ToastAction };

```

`frontend/src/components/ui/toaster.jsx`

```javascript
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        );
      })}
      <ToastViewport />
    </ToastProvider>
  );
}

```

`frontend/src/components/ui/toggle-group.jsx`

```javascript
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"

import { cn } from "../../lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}>
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(toggleVariants({
        variant: context.variant || variant,
        size: context.size || size,
      }), className)}
      {...props}>
      {children}
    </ToggleGroupPrimitive.Item>
  );
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

```

`frontend/src/components/ui/toggle.jsx`

```javascript
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva } from "class-variance-authority";

import { cn } from "../../lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-2 min-w-9",
        sm: "h-8 px-1.5 min-w-8",
        lg: "h-10 px-2.5 min-w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props} />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

```

`frontend/src/components/ui/tooltip.jsx`

```javascript
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "../../lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Portal>
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]",
        className
      )}
      {...props} />
  </TooltipPrimitive.Portal>
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

```

`frontend/src/context/AuthContext.jsx`

```javascript
// import React, { createContext, useContext, useState, useEffect } from 'react';

// const AuthContext = createContext();

// export const useAuth = () => {
//   const context = useContext(AuthContext);
//   if (!context) {
//     throw new Error('useAuth must be used within an AuthProvider');
//   }
//   return context;
// };

// export const AuthProvider = ({ children }) => {
//   const [user, setUser] = useState(null);
//   const [loading, setLoading] = useState(true);
//   const [token, setToken] = useState(null);

//   useEffect(() => {
//     // Check for existing auth on mount
//     const storedToken = localStorage.getItem('bloodbridge_token');
//     const storedUser = localStorage.getItem('bloodbridge_user');

//     if (storedToken && storedUser) {
//       try {
//         const userData = JSON.parse(storedUser);
//         setToken(storedToken);
//         setUser(userData);
//       } catch (error) {
//         console.error('Error parsing stored user data:', error);
//         localStorage.removeItem('bloodbridge_token');
//         localStorage.removeItem('bloodbridge_user');
//       }
//     }
    
//     setLoading(false);
//   }, []);

//   const login = (userData, authToken) => {
//     setUser(userData);
//     setToken(authToken);
//     localStorage.setItem('bloodbridge_token', authToken);
//     localStorage.setItem('bloodbridge_user', JSON.stringify(userData));
//   };

//   const logout = () => {
//     setUser(null);
//     setToken(null);
//     localStorage.removeItem('bloodbridge_token');
//     localStorage.removeItem('bloodbridge_user');
//   };

//   const value = {
//     user,
//     token,
//     login,
//     logout,
//     loading,
//     isAuthenticated: !!user
//   };

//   return (
//     <AuthContext.Provider value={value}>
//       {children}
//     </AuthContext.Provider>
//   );
// };

// frontend/src/context/AuthContext.jsx

import React, { createContext, useContext, useState, useEffect } from 'react';

const AuthContext = createContext();

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [token, setToken] = useState(null);

  useEffect(() => {
    const storedToken = localStorage.getItem('bloodbridge_token');
    const storedUser = localStorage.getItem('bloodbridge_user');

    if (storedToken && storedUser) {
      try {
        const userData = JSON.parse(storedUser);
        setToken(storedToken);
        setUser(userData);
      } catch (error) {
        console.error('Error parsing stored user data:', error);
        localStorage.removeItem('bloodbridge_token');
        localStorage.removeItem('bloodbridge_user');
      }
    }
    
    setLoading(false);
  }, []);

  const login = (userData, authToken) => {
    // Ensure the user object has the role
    const userWithRole = { ...userData, role: userData.role || 'guest' };
    setUser(userWithRole);
    setToken(authToken);
    localStorage.setItem('bloodbridge_token', authToken);
    localStorage.setItem('bloodbridge_user', JSON.stringify(userWithRole));
  };

  const logout = () => {
    setUser(null);
    setToken(null);
    localStorage.removeItem('bloodbridge_token');
    localStorage.removeItem('bloodbridge_user');
  };

  const value = {
    user,
    token,
    login,
    logout,
    loading,
    isAuthenticated: !!user
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

```

`frontend/src/hooks/use-toast.js`

```javascript
"use client";
// Inspired by react-hot-toast library
import * as React from "react"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST"
}

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString();
}

const toastTimeouts = new Map()

const addToRemoveQueue = (toastId) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state, action) => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t),
      };

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t),
      };
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
}

const listeners = []

let memoryState = { toasts: [] }

function dispatch(action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

function toast({
  ...props
}) {
  const id = genId()

  const update = (props) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    };
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId) => dispatch({ type: "DISMISS_TOAST", toastId }),
  };
}

export { useToast, toast }

```

`frontend/src/index.css`

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    margin: 0;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto",
        "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans",
        "Helvetica Neue", sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

code {
    font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",
        monospace;
}



@layer base {
  :root {
        --background: 0 0% 100%;
        --foreground: 0 0% 3.9%;
        --card: 0 0% 100%;
        --card-foreground: 0 0% 3.9%;
        --popover: 0 0% 100%;
        --popover-foreground: 0 0% 3.9%;
        --primary: 0 0% 9%;
        --primary-foreground: 0 0% 98%;
        --secondary: 0 0% 96.1%;
        --secondary-foreground: 0 0% 9%;
        --muted: 0 0% 96.1%;
        --muted-foreground: 0 0% 45.1%;
        --accent: 0 0% 96.1%;
        --accent-foreground: 0 0% 9%;
        --destructive: 0 84.2% 60.2%;
        --destructive-foreground: 0 0% 98%;
        --border: 0 0% 89.8%;
        --input: 0 0% 89.8%;
        --ring: 0 0% 3.9%;
        --chart-1: 12 76% 61%;
        --chart-2: 173 58% 39%;
        --chart-3: 197 37% 24%;
        --chart-4: 43 74% 66%;
        --chart-5: 27 87% 67%;
        --radius: 0.5rem;
    }
  .dark {
        --background: 0 0% 3.9%;
        --foreground: 0 0% 98%;
        --card: 0 0% 3.9%;
        --card-foreground: 0 0% 98%;
        --popover: 0 0% 3.9%;
        --popover-foreground: 0 0% 98%;
        --primary: 0 0% 98%;
        --primary-foreground: 0 0% 9%;
        --secondary: 0 0% 14.9%;
        --secondary-foreground: 0 0% 98%;
        --muted: 0 0% 14.9%;
        --muted-foreground: 0 0% 63.9%;
        --accent: 0 0% 14.9%;
        --accent-foreground: 0 0% 98%;
        --destructive: 0 62.8% 30.6%;
        --destructive-foreground: 0 0% 98%;
        --border: 0 0% 14.9%;
        --input: 0 0% 14.9%;
        --ring: 0 0% 83.1%;
        --chart-1: 220 70% 50%;
        --chart-2: 160 60% 45%;
        --chart-3: 30 80% 55%;
        --chart-4: 280 65% 60%;
        --chart-5: 340 75% 55%;
    }
}



@layer base {
  * {
    @apply border-border;
    }
  body {
    @apply bg-background text-foreground;
    }
}

```

`frontend/src/index.js`

```javascript
import React from "react";
import ReactDOM from "react-dom/client";
import "./index.css";
import App from "./App";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
);

```

`frontend/src/lib/api.js`

```javascript
// import axios from 'axios';

// const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
// const API_BASE = `${BACKEND_URL}/api`;

// // Create axios instance
// const api = axios.create({
//   baseURL: API_BASE,
//   headers: {
//     'Content-Type': 'application/json',
//   },
// });

// // Add auth token to requests
// api.interceptors.request.use((config) => {
//   const token = localStorage.getItem('bloodbridge_token');
//   if (token) {
//     config.headers.Authorization = `Bearer ${token}`;
//   }
//   return config;
// });

// // Handle auth errors
// api.interceptors.response.use(
//   (response) => response,
//   (error) => {
//     if (error.response?.status === 401) {
//       // Token expired or invalid
//       localStorage.removeItem('bloodbridge_token');
//       localStorage.removeItem('bloodbridge_user');
//       window.location.href = '/login';
//     }
//     return Promise.reject(error);
//   }
// );

// // Auth API
// export const authAPI = {
//   adminLogin: (credentials) => api.post('/admin/login', credentials),
// };

// // Admin API
// export const adminAPI = {
//   getStats: () => api.get('/admin/stats'),
//   getBloodGroupStats: () => api.get('/admin/stats/blood-groups'),
//   getLeaderboard: () => api.get('/admin/leaderboard'),
//   getPatients: (status) => api.get('/admin/patients', { params: { status } }),
//   createBridge: (patientId) => api.post(`/admin/patients/${patientId}/create-bridge`),
//   getEmergencies: () => api.get('/admin/emergencies'),
//   closeEmergency: (emergencyId) => api.post(`/admin/emergencies/${emergencyId}/close`),
//   escalateEmergency: (emergencyId) => api.post(`/admin/emergencies/${emergencyId}/escalate`),
//   getInbox: () => api.get('/admin/inbox'),
//   resolveMessage: (messageId) => api.post(`/admin/inbox/${messageId}/resolve`),
// };

// // Public API
// export const publicAPI = {
//   getStats: () => api.get('/public/stats'),
//   healthCheck: () => api.get('/health'),
// };

// export default api;

// frontend/src/lib/api.js

import axios from 'axios';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:3001';
const API_BASE = `${BACKEND_URL}/api`; // The base path now matches our single router

const api = axios.create({
  baseURL: API_BASE,
  headers: { 'Content-Type': 'application/json' },
});

api.interceptors.request.use((config) => {
  const token = localStorage.getItem('bloodbridge_token');
  if (token && !config.url.includes('/login')) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      localStorage.removeItem('bloodbridge_token');
      localStorage.removeItem('bloodbridge_user');
      if (window.location.pathname !== '/login') window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

export const authAPI = {
  login: (credentials) => api.post('/admin/login', credentials), // This path is now correct
};

export const adminAPI = {
  getStats: () => api.get('/admin/stats'),
  getBloodGroupStats: () => api.get('/admin/stats/blood-groups'),
  getLeaderboard: () => api.get('/admin/leaderboard'),
  getPatients: () => api.get('/admin/patients'),
  createBridge: (patientId) => api.post(`/admin/patients/${patientId}/create-bridge`),
  getEmergencies: () => api.get('/admin/emergencies'),
  closeEmergency: (emergencyId) => api.post(`/admin/emergencies/${emergencyId}/close`),
  escalateEmergency: (emergencyId) => api.post(`/admin/emergencies/${emergencyId}/escalate`),
  getInbox: () => api.get('/admin/inbox'),
  resolveMessage: (messageId) => api.post(`/admin/inbox/${messageId}/resolve`),
};

// CORRECTED: Pointing to the new, simplified routes
export const donorAPI = {
  getDashboard: () => api.get('/donor/dashboard'),
};

export const patientAPI = {
  getDashboard: () => api.get('/patient/dashboard'),
};

export const publicAPI = {
  getStats: () => api.get('/public/stats'),
};

export default api;

```

`frontend/src/lib/mockData.js`

```javascript
// Mock data for donor and patient portals (static previews only)

export const mockStats = {
  total_donors: 1247,
  active_donors: 892,
  patients_helped: 156,
  emergencies_resolved: 89,
  blood_units_donated: 2134,
  bridges_created: 145
};

export const mockFeatures = [
  {
    icon: 'Brain',
    title: 'AI-Powered Matching',
    description: 'Advanced algorithms match donors with patients based on location, blood type, and compatibility factors for optimal care coordination.'
  },
  {
    icon: 'MessageCircle',
    title: 'WhatsApp Integration',
    description: 'Seamless communication through WhatsApp for appointment reminders, emergency alerts, and donor-patient coordination.'
  },
  {
    icon: 'Users',
    title: 'Blood Bridge Network',
    description: 'Create lasting connections between donors and thalassemia patients for consistent, reliable blood supply management.'
  },
  {
    icon: 'Activity',
    title: 'Real-time Health Monitoring',
    description: 'Track patient vitals, transfusion schedules, and health metrics with AI-powered insights and predictive analytics.'
  },
  {
    icon: 'Zap',
    title: 'Emergency Response System',
    description: 'Instant emergency blood requests with automated donor alerting and hospital coordination for critical situations.'
  },
  {
    icon: 'Award',
    title: 'Gamified Donor Experience',
    description: 'Reward donors with points, badges, and recognition to encourage regular donations and community engagement.'
  }
];

export const mockSuccessStories = [
  {
    name: 'Arjun Patel',
    age: 16,
    story: 'Thanks to BloodBridge AI, I found 3 regular donors who understand my thalassemia journey. No more sleepless nights worrying about my next transfusion. The AI matching connected me with donors in my area who have become like family.',
    impact: 'Connected with 3 bridge donors',
    image: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face'
  },
  {
    name: 'Priya Sharma',
    age: 14,
    story: 'The WhatsApp reminders and health tracking have transformed how I manage my condition. My hemoglobin levels are the most stable they\'ve ever been, and my family feels so much more confident about my care.',
    impact: '85% improvement in health stability',
    image: 'https://images.unsplash.com/photo-1494790108755-2616b332-c2a?w=150&h=150&fit=crop&crop=face'
  },
  {
    name: 'Rohan Kumar',
    age: 12,
    story: 'I used to be scared of hospital visits, but now I look forward to meeting my bridge donors. They send me encouraging messages and celebrate my milestones. BloodBridge made my treatment journey less lonely.',
    impact: 'Zero missed appointments in 6 months',
    image: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face'
  }
];

export const mockDonorData = {
  id: 'd1',
  name: 'Ravi Kumar',
  phone: '+919876543210',
  blood_group: 'O+',
  location: 'Mumbai',
  donations_completed: 12,
  next_donation: 'January 25, 2025',
  points: 450,
  level: 'Blood Guardian',
  streak: 4,
  impact_lives_saved: 5,
  badges: [
    { id: 'b1', name: 'First Donation', icon: 'award', unlocked: true },
    { id: 'b2', name: 'Regular Donor', icon: 'heart', unlocked: true },
    { id: 'b3', name: 'Monthly Hero', icon: 'calendar', unlocked: true },
    { id: 'b4', name: 'Life Saver', icon: 'shield', unlocked: false }
  ]
};

export const mockPatientData = {
  id: 'p1',
  name: 'Priya Sharma',
  age: 14,
  blood_group: 'A+',
  condition: 'Beta Thalassemia Major',
  bridge_status: 'Connected',
  health_score: 85,
  connected_donors: 3,
  last_transfusion: '12 days ago',
  next_transfusion: '8 days',
  upcoming_appointments: [
    {
      type: 'Blood Transfusion',
      doctor: 'Dr. Amit Sharma',
      date: 'January 25, 2025 - 10:00 AM'
    },
    {
      type: 'Regular Checkup',
      doctor: 'Dr. Priya Verma',
      date: 'February 2, 2025 - 2:30 PM'
    }
  ]
};

export const mockLeaderboard = [
  { rank: 1, name: 'Ravi Kumar', location: 'Mumbai', donations: 45, blood_group: 'O+', points: 1125 },
  { rank: 2, name: 'Priya Sharma', location: 'Delhi', donations: 42, blood_group: 'A+', points: 1050 },
  { rank: 3, name: 'Amit Patel', location: 'Ahmedabad', donations: 38, blood_group: 'B+', points: 950 },
  { rank: 4, name: 'Sneha Reddy', location: 'Hyderabad', donations: 35, blood_group: 'AB+', points: 875 },
  { rank: 5, name: 'Kiran Singh', location: 'Pune', donations: 32, blood_group: 'O-', points: 800 }
];

```

`frontend/src/lib/utils.js`

```javascript
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge"

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}

```

`frontend/src/pages/AdminPortal.jsx`

```javascript
import React, { useState, useEffect } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';
import { BarChart3, Users, AlertTriangle, MessageSquare, Shield } from 'lucide-react';
import LoadingSpinner from '../components/common/LoadingSpinner';
import AnalyticsTab from '../components/admin/AnalyticsTab';
import PatientManagement from '../components/admin/PatientManagement';
import EmergencyCenter from '../components/admin/EmergencyCenter';
import InboxTab from '../components/admin/InboxTab';
import { adminAPI } from '../lib/api';

const AdminPortal = () => {
  const [loading, setLoading] = useState(true);
  const [data, setData] = useState({
    stats: null,
    bloodGroupStats: [],
    leaderboard: [],
    patients: [],
    emergencies: [],
    inbox: []
  });

  const [error, setError] = useState(null);

  const fetchAllData = async () => {
    setLoading(true);
    setError(null);
    
    try {
      // Fetch all admin data in parallel
      const [
        statsRes,
        bloodGroupRes,
        leaderboardRes,
        patientsRes,
        emergenciesRes,
        inboxRes
      ] = await Promise.all([
        adminAPI.getStats(),
        adminAPI.getBloodGroupStats(),
        adminAPI.getLeaderboard(),
        adminAPI.getPatients(),
        adminAPI.getEmergencies(),
        adminAPI.getInbox()
      ]);

      setData({
        stats: statsRes.data,
        bloodGroupStats: bloodGroupRes.data,
        leaderboard: leaderboardRes.data,
        patients: patientsRes.data,
        emergencies: emergenciesRes.data,
        inbox: inboxRes.data
      });
    } catch (error) {
      console.error('Error fetching admin data:', error);
      setError(error.response?.data?.detail || 'Failed to load admin data. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchAllData();
  }, []);

  const refetchData = () => {
    fetchAllData();
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="flex flex-col items-center gap-4">
          <LoadingSpinner size="xl" />
          <span className="ml-4 text-lg text-gray-600">Loading admin portal...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="text-red-600 mb-4 text-lg">{error}</div>
          <button 
            onClick={fetchAllData}
            className="bg-red-600 text-white px-6 py-2 rounded-lg hover:bg-red-700"
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-6 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-2">
            <div className="w-10 h-10 bg-red-600 rounded-lg flex items-center justify-center">
              <Shield className="w-6 h-6 text-white" />
            </div>
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Admin Portal</h1>
              <p className="text-gray-600">Manage blood donations, patients, and emergency responses</p>
            </div>
          </div>
          <p className="text-sm text-red-600 font-medium">🩸 Thalassemia-Free India 2030 Mission Control</p>
        </div>

        <Tabs defaultValue="analytics" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4 lg:w-auto lg:grid-cols-4 bg-white shadow-sm">
            <TabsTrigger value="analytics" className="flex items-center gap-2 data-[state=active]:bg-red-50 data-[state=active]:text-red-700">
              <BarChart3 className="w-4 h-4" />
              Analytics
            </TabsTrigger>
            <TabsTrigger value="patients" className="flex items-center gap-2 data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700">
              <Users className="w-4 h-4" />
              Patients
            </TabsTrigger>
            <TabsTrigger value="emergencies" className="flex items-center gap-2 data-[state=active]:bg-orange-50 data-[state=active]:text-orange-700">
              <AlertTriangle className="w-4 h-4" />
              Emergency
            </TabsTrigger>
            <TabsTrigger value="inbox" className="flex items-center gap-2 data-[state=active]:bg-green-50 data-[state=active]:text-green-700">
              <MessageSquare className="w-4 h-4" />
              Inbox
            </TabsTrigger>
          </TabsList>

          <TabsContent value="analytics" className="space-y-6">
            <AnalyticsTab
              stats={data.stats}
              leaderboard={data.leaderboard}
              bloodGroupStats={data.bloodGroupStats}
            />
          </TabsContent>

          <TabsContent value="patients" className="space-y-6">
            <PatientManagement
              patients={data.patients}
              onRefetch={refetchData}
            />
          </TabsContent>

          <TabsContent value="emergencies" className="space-y-6">
            <EmergencyCenter
              emergencies={data.emergencies}
              onRefetch={refetchData}
            />
          </TabsContent>

          <TabsContent value="inbox" className="space-y-6">
            <InboxTab
              messages={data.inbox}
              onRefetch={refetchData}
            />
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};

export default AdminPortal;

```

`frontend/src/pages/DonorPortal.jsx`

```javascript
// import React from 'react';
// import { Card } from '../components/ui/card';
// import { Badge } from '../components/ui/badge';
// import { Button } from '../components/ui/button';
// import { Trophy, Heart, Calendar, Shield, Star, Gift, Users, TrendingUp, Award, Zap } from 'lucide-react';
// import { mockDonorData, mockLeaderboard } from '../lib/mockData';

// const DonorPortal = () => {
//   const donor = mockDonorData;

//   return (
//     <div className="min-h-screen bg-gray-50">
//       <div className="container mx-auto px-6 py-8">
//         {/* Header Section */}
//         <div className="bg-gradient-to-r from-blue-600 to-blue-700 text-white p-8 rounded-2xl mb-8 relative overflow-hidden">
//           <div className="absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -mr-16 -mt-16"></div>
//           <div className="absolute bottom-0 left-0 w-24 h-24 bg-white/10 rounded-full -ml-12 -mb-12"></div>
          
//           <div className="flex items-center justify-between relative z-10">
//             <div>
//               <h1 className="text-3xl font-bold mb-2">
//                 Welcome back, {donor.name}! 🩸
//               </h1>
//               <p className="text-blue-100 text-lg">
//                 Thank you for being a <span className="font-semibold">{donor.level}</span>
//               </p>
//               <div className="flex items-center gap-4 mt-4">
//                 <Badge className="bg-white/20 text-white border-white/30">
//                   Level: {donor.level}
//                 </Badge>
//                 <Badge className="bg-white/20 text-white border-white/30">
//                   {donor.points} Points
//                 </Badge>
//                 <Badge className="bg-white/20 text-white border-white/30">
//                   {donor.streak} Month Streak
//                 </Badge>
//               </div>
//             </div>
//             <div className="text-center">
//               <div className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center mb-2">
//                 <Heart className="w-10 h-10 text-white animate-pulse" />
//               </div>
//               <div className="text-2xl font-bold">{donor.donations_completed}</div>
//               <div className="text-sm text-blue-100">Donations</div>
//             </div>
//           </div>
//         </div>

//         {/* Coming Soon Banner */}
//         <div className="bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200 p-6 rounded-xl mb-8">
//           <div className="flex items-center gap-4">
//             <div className="w-12 h-12 bg-yellow-100 rounded-full flex items-center justify-center">
//               <Gift className="w-6 h-6 text-yellow-600" />
//             </div>
//             <div className="flex-1">
//               <h3 className="text-lg font-semibold text-yellow-800">Enhanced Donor Features Launching Soon!</h3>
//               <p className="text-yellow-700">
//                 Advanced gamification, personalized matching, real-time notifications, and community features are being finalized.
//               </p>
//             </div>
//             <div className="hidden md:flex items-center gap-2">
//               <Zap className="w-5 h-5 text-yellow-600" />
//               <span className="text-yellow-700 font-medium">Phase 2</span>
//             </div>
//           </div>
//         </div>

//         <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
//           {/* Main Content */}
//           <div className="lg:col-span-2 space-y-8">
//             {/* Impact Metrics */}
//             <div>
//               <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center gap-2">
//                 <TrendingUp className="w-6 h-6 text-blue-600" />
//                 Your Impact
//               </h2>
//               <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
//                 <Card className="p-6 text-center bg-gradient-to-br from-red-50 to-red-100 border-red-200 hover:shadow-lg transition-all duration-300">
//                   <Heart className="w-12 h-12 text-red-600 mx-auto mb-4 animate-pulse" />
//                   <div className="text-3xl font-bold text-red-700 mb-2">{donor.impact_lives_saved}</div>
//                   <div className="text-red-600 font-medium">Lives Saved</div>
//                   <div className="mt-2 text-xs text-red-500">+2 this month</div>
//                 </Card>

//                 <Card className="p-6 text-center bg-gradient-to-br from-green-50 to-green-100 border-green-200 hover:shadow-lg transition-all duration-300">
//                   <Calendar className="w-12 h-12 text-green-600 mx-auto mb-4" />
//                   <div className="text-3xl font-bold text-green-700 mb-2">{donor.streak}</div>
//                   <div className="text-green-600 font-medium">Month Streak</div>
//                   <div className="mt-2 text-xs text-green-500">Personal best!</div>
//                 </Card>

//                 <Card className="p-6 text-center bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200 hover:shadow-lg transition-all duration-300">
//                   <Star className="w-12 h-12 text-blue-600 mx-auto mb-4" />
//                   <div className="text-3xl font-bold text-blue-700 mb-2">{donor.points}</div>
//                   <div className="text-blue-600 font-medium">Total Points</div>
//                   <div className="mt-2 text-xs text-blue-500">+75 this week</div>
//                 </Card>
//               </div>
//             </div>

//             {/* Achievement Badges */}
//             <div>
//               <h3 className="text-xl font-semibold text-gray-900 mb-6 flex items-center gap-2">
//                 <Award className="w-5 h-5 text-yellow-600" />
//                 Achievement Badges
//               </h3>
//               <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
//                 {donor.badges.map((badge) => {
//                   const IconComponent = {
//                     award: Trophy,
//                     heart: Heart,
//                     calendar: Calendar,
//                     shield: Shield
//                   }[badge.icon] || Trophy;

//                   return (
//                     <Card
//                       key={badge.id}
//                       className={`p-4 text-center transition-all duration-300 ${
//                         badge.unlocked
//                           ? 'bg-gradient-to-br from-yellow-50 to-yellow-100 border-yellow-200 hover:shadow-lg hover:scale-105'
//                           : 'bg-gray-50 border-gray-200 opacity-60'
//                       }`}
//                     >
//                       <div className={`w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-3 ${
//                         badge.unlocked ? 'bg-yellow-100' : 'bg-gray-100'
//                       }`}>
//                         <IconComponent className={`w-6 h-6 ${
//                           badge.unlocked ? 'text-yellow-600' : 'text-gray-400'
//                         }`} />
//                       </div>
//                       <div className={`font-medium text-sm ${
//                         badge.unlocked ? 'text-gray-900' : 'text-gray-500'
//                       }`}>
//                         {badge.name}
//                       </div>
//                       {badge.unlocked ? (
//                         <Badge className="mt-2 bg-green-100 text-green-800 text-xs">
//                           Unlocked ✓
//                         </Badge>
//                       ) : (
//                         <Badge className="mt-2 bg-gray-100 text-gray-600 text-xs">
//                           Locked
//                         </Badge>
//                       )}
//                     </Card>
//                   );
//                 })}
//               </div>
//             </div>

//             {/* Donation Status */}
//             <Card className="p-6 bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200">
//               <h3 className="text-xl font-semibold text-gray-900 mb-4 flex items-center gap-2">
//                 <Calendar className="w-5 h-5 text-blue-600" />
//                 Donation Status
//               </h3>
//               <div className="flex items-center justify-between p-4 bg-white rounded-lg shadow-sm">
//                 <div>
//                   <div className="font-semibold text-blue-900">Next Donation Eligibility</div>
//                   <div className="text-blue-700">{donor.next_donation}</div>
//                   <div className="text-sm text-gray-600 mt-1">You're ready to donate again!</div>
//                 </div>
//                 <Button className="bg-blue-600 hover:bg-blue-700" disabled>
//                   Schedule Donation (Coming Soon)
//                 </Button>
//               </div>
//             </Card>
//           </div>

//           {/* Sidebar */}
//           <div className="space-y-6">
//             {/* Community Leaderboard */}
//             <Card className="p-6">
//               <div className="flex items-center gap-2 mb-4">
//                 <Users className="w-5 h-5 text-gray-600" />
//                 <h3 className="text-lg font-semibold text-gray-900">Community Leaders</h3>
//               </div>
//               <div className="space-y-3">
//                 {mockLeaderboard.slice(0, 5).map((leader, index) => (
//                   <div key={leader.rank} className={`flex items-center justify-between p-3 rounded-lg transition-all duration-300 ${
//                     leader.name === donor.name ? 'bg-blue-50 border border-blue-200' : 'hover:bg-gray-50'
//                   }`}>
//                     <div className="flex items-center gap-3">
//                       <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${
//                         index === 0 ? 'bg-yellow-100 text-yellow-700' :
//                         index === 1 ? 'bg-gray-100 text-gray-700' :
//                         index === 2 ? 'bg-orange-100 text-orange-700' :
//                         'bg-blue-100 text-blue-700'
//                       }`}>
//                         #{leader.rank}
//                       </div>
//                       <div>
//                         <div className={`font-medium text-sm ${
//                           leader.name === donor.name ? 'text-blue-700' : 'text-gray-900'
//                         }`}>
//                           {leader.name}
//                           {leader.name === donor.name && <span className="text-blue-500 ml-1">(You)</span>}
//                         </div>
//                         <div className="text-xs text-gray-500">{leader.location}</div>
//                       </div>
//                     </div>
//                     <div className="text-right">
//                       <div className="font-semibold text-sm">{leader.donations}</div>
//                       <div className="text-xs text-gray-500">donations</div>
//                     </div>
//                   </div>
//                 ))}
//               </div>
//             </Card>

//             {/* Quick Actions */}
//             <Card className="p-6">
//               <h3 className="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h3>
//               <div className="space-y-3">
//                 <Button className="w-full bg-red-600 hover:bg-red-700" disabled>
//                   <Heart className="w-4 h-4 mr-2" />
//                   Emergency Request (Coming Soon)
//                 </Button>
//                 <Button className="w-full" variant="outline" disabled>
//                   <Calendar className="w-4 h-4 mr-2" />
//                   Find Donation Center (Coming Soon)
//                 </Button>
//                 <Button className="w-full" variant="outline" disabled>
//                   <Users className="w-4 h-4 mr-2" />
//                   Update Availability (Coming Soon)
//                 </Button>
//                 <Button className="w-full" variant="outline" disabled>
//                   <Trophy className="w-4 h-4 mr-2" />
//                   View Challenges (Coming Soon)
//                 </Button>
//               </div>
//             </Card>

//             {/* Progress to Next Level */}
//             <Card className="p-6 bg-gradient-to-br from-purple-50 to-pink-50 border-purple-200">
//               <h3 className="text-lg font-semibold text-purple-900 mb-4">Next Level Progress</h3>
//               <div className="space-y-3">
//                 <div className="flex justify-between text-sm">
//                   <span className="text-purple-700">Blood Guardian → Life Saver</span>
//                   <span className="text-purple-600 font-medium">75%</span>
//                 </div>
//                 <div className="w-full bg-purple-200 rounded-full h-3">
//                   <div className="bg-purple-600 h-3 rounded-full animate-pulse" style={{ width: '75%' }}></div>
//                 </div>
//                 <p className="text-xs text-purple-700">125 more points to unlock Life Saver status!</p>
//               </div>
//             </Card>
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// };

// // export default DonorPortal;
// import React from 'react';
// import { Card } from '../components/ui/card';
// import { Badge } from '../components/ui/badge';
// import { Button } from '../components/ui/button';
// import { Trophy, Heart, Calendar, Shield, Star, Gift, Users, TrendingUp, Award, Zap } from 'lucide-react';
// import { mockDonorData, mockLeaderboard } from '../lib/mockData';

// const DonorPortal = () => {
//   const donor = mockDonorData;

//   return (
//     <div className="min-h-screen bg-gray-50">
//       <div className="container mx-auto px-6 py-8">
//         {/* Header Section */}
//         <div className="bg-gradient-to-r from-blue-600 to-blue-700 text-white p-8 rounded-2xl mb-8 relative overflow-hidden">
//           <div className="absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -mr-16 -mt-16"></div>
//           <div className="absolute bottom-0 left-0 w-24 h-24 bg-white/10 rounded-full -ml-12 -mb-12"></div>
          
//           <div className="flex items-center justify-between relative z-10">
//             <div>
//               <h1 className="text-3xl font-bold mb-2">
//                 Welcome back, {donor.name}! 🩸
//               </h1>
//               <p className="text-blue-100 text-lg">
//                 Thank you for being a <span className="font-semibold">{donor.level}</span>
//               </p>
//               <div className="flex items-center gap-4 mt-4">
//                 <Badge className="bg-white/20 text-white border-white/30">
//                   Level: {donor.level}
//                 </Badge>
//                 <Badge className="bg-white/20 text-white border-white/30">
//                   {donor.points} Points
//                 </Badge>
//                 <Badge className="bg-white/20 text-white border-white/30">
//                   {donor.streak} Month Streak
//                 </Badge>
//               </div>
//             </div>
//             <div className="text-center">
//               <div className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center mb-2">
//                 <Heart className="w-10 h-10 text-white animate-pulse" />
//               </div>
//               <div className="text-2xl font-bold">{donor.donations_completed}</div>
//               <div className="text-sm text-blue-100">Donations</div>
//             </div>
//           </div>
//         </div>

//         {/* Coming Soon Banner */}
//         <div className="bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200 p-6 rounded-xl mb-8">
//           <div className="flex items-center gap-4">
//             <div className="w-12 h-12 bg-yellow-100 rounded-full flex items-center justify-center">
//               <Gift className="w-6 h-6 text-yellow-600" />
//             </div>
//             <div className="flex-1">
//               <h3 className="text-lg font-semibold text-yellow-800">Enhanced Donor Features Launching Soon!</h3>
//               <p className="text-yellow-700">
//                 Advanced gamification, personalized matching, real-time notifications, and community features are being finalized.
//               </p>
//             </div>
//             <div className="hidden md:flex items-center gap-2">
//               <Zap className="w-5 h-5 text-yellow-600" />
//               <span className="text-yellow-700 font-medium">Phase 2</span>
//             </div>
//           </div>
//         </div>

//         <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
//           {/* Main Content */}
//           <div className="lg:col-span-2 space-y-8">
//             {/* Impact Metrics */}
//             <div>
//               <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center gap-2">
//                 <TrendingUp className="w-6 h-6 text-blue-600" />
//                 Your Impact
//               </h2>
//               <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
//                 <Card className="p-6 text-center bg-gradient-to-br from-red-50 to-red-100 border-red-200 hover:shadow-lg transition-all duration-300">
//                   <Heart className="w-12 h-12 text-red-600 mx-auto mb-4 animate-pulse" />
//                   <div className="text-3xl font-bold text-red-700 mb-2">{donor.impact_lives_saved}</div>
//                   <div className="text-red-600 font-medium">Lives Saved</div>
//                   <div className="mt-2 text-xs text-red-500">+2 this month</div>
//                 </Card>

//                 <Card className="p-6 text-center bg-gradient-to-br from-green-50 to-green-100 border-green-200 hover:shadow-lg transition-all duration-300">
//                   <Calendar className="w-12 h-12 text-green-600 mx-auto mb-4" />
//                   <div className="text-3xl font-bold text-green-700 mb-2">{donor.streak}</div>
//                   <div className="text-green-600 font-medium">Month Streak</div>
//                   <div className="mt-2 text-xs text-green-500">Personal best!</div>
//                 </Card>

//                 <Card className="p-6 text-center bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200 hover:shadow-lg transition-all duration-300">
//                   <Star className="w-12 h-12 text-blue-600 mx-auto mb-4" />
//                   <div className="text-3xl font-bold text-blue-700 mb-2">{donor.points}</div>
//                   <div className="text-blue-600 font-medium">Total Points</div>
//                   <div className="mt-2 text-xs text-blue-500">+75 this week</div>
//                 </Card>
//               </div>
//             </div>

//             {/* Achievement Badges */}
//             <div>
//               <h3 className="text-xl font-semibold text-gray-900 mb-6 flex items-center gap-2">
//                 <Award className="w-5 h-5 text-yellow-600" />
//                 Achievement Badges
//               </h3>
//               <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
//                 {donor.badges.map((badge) => {
//                   const IconComponent = {
//                     award: Trophy,
//                     heart: Heart,
//                     calendar: Calendar,
//                     shield: Shield
//                   }[badge.icon] || Trophy;

//                   return (
//                     <Card
//                       key={badge.id}
//                       className={`p-4 text-center transition-all duration-300 ${
//                         badge.unlocked
//                           ? 'bg-gradient-to-br from-yellow-50 to-yellow-100 border-yellow-200 hover:shadow-lg hover:scale-105'
//                           : 'bg-gray-50 border-gray-200 opacity-60'
//                       }`}
//                     >
//                       <div className={`w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-3 ${
//                         badge.unlocked ? 'bg-yellow-100' : 'bg-gray-100'
//                       }`}>
//                         <IconComponent className={`w-6 h-6 ${
//                           badge.unlocked ? 'text-yellow-600' : 'text-gray-400'
//                         }`} />
//                       </div>
//                       <div className={`font-medium text-sm ${
//                         badge.unlocked ? 'text-gray-900' : 'text-gray-500'
//                       }`}>
//                         {badge.name}
//                       </div>
//                       {badge.unlocked ? (
//                         <Badge className="mt-2 bg-green-100 text-green-800 text-xs">
//                           Unlocked ✓
//                         </Badge>
//                       ) : (
//                         <Badge className="mt-2 bg-gray-100 text-gray-600 text-xs">
//                           Locked
//                         </Badge>
//                       )}
//                     </Card>
//                   );
//                 })}
//               </div>
//             </div>

//             {/* Donation Status */}
//             <Card className="p-6 bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200">
//               <h3 className="text-xl font-semibold text-gray-900 mb-4 flex items-center gap-2">
//                 <Calendar className="w-5 h-5 text-blue-600" />
//                 Donation Status
//               </h3>
//               <div className="flex items-center justify-between p-4 bg-white rounded-lg shadow-sm">
//                 <div>
//                   <div className="font-semibold text-blue-900">Next Donation Eligibility</div>
//                   <div className="text-blue-700">{donor.next_donation}</div>
//                   <div className="text-sm text-gray-600 mt-1">You're ready to donate again!</div>
//                 </div>
//                 <Button className="bg-blue-600 hover:bg-blue-700" disabled>
//                   Schedule Donation (Coming Soon)
//                 </Button>
//               </div>
//             </Card>
//           </div>

//           {/* Sidebar */}
//           <div className="space-y-6">
//             {/* Community Leaderboard */}
//             <Card className="p-6">
//               <div className="flex items-center gap-2 mb-4">
//                 <Users className="w-5 h-5 text-gray-600" />
//                 <h3 className="text-lg font-semibold text-gray-900">Community Leaders</h3>
//               </div>
//               <div className="space-y-3">
//                 {mockLeaderboard.slice(0, 5).map((leader, index) => (
//                   <div key={leader.rank} className={`flex items-center justify-between p-3 rounded-lg transition-all duration-300 ${
//                     leader.name === donor.name ? 'bg-blue-50 border border-blue-200' : 'hover:bg-gray-50'
//                   }`}>
//                     <div className="flex items-center gap-3">
//                       <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${
//                         index === 0 ? 'bg-yellow-100 text-yellow-700' :
//                         index === 1 ? 'bg-gray-100 text-gray-700' :
//                         index === 2 ? 'bg-orange-100 text-orange-700' :
//                         'bg-blue-100 text-blue-700'
//                       }`}>
//                         #{leader.rank}
//                       </div>
//                       <div>
//                         <div className={`font-medium text-sm ${
//                           leader.name === donor.name ? 'text-blue-700' : 'text-gray-900'
//                         }`}>
//                           {leader.name}
//                           {leader.name === donor.name && <span className="text-blue-500 ml-1">(You)</span>}
//                         </div>
//                         <div className="text-xs text-gray-500">{leader.location}</div>
//                       </div>
//                     </div>
//                     <div className="text-right">
//                       <div className="font-semibold text-sm">{leader.donations}</div>
//                       <div className="text-xs text-gray-500">donations</div>
//                     </div>
//                   </div>
//                 ))}
//               </div>
//             </Card>

//             {/* Quick Actions */}
//             <Card className="p-6">
//               <h3 className="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h3>
//               <div className="space-y-3">
//                 <Button className="w-full bg-red-600 hover:bg-red-700" disabled>
//                   <Heart className="w-4 h-4 mr-2" />
//                   Emergency Request (Coming Soon)
//                 </Button>
//                 <Button className="w-full" variant="outline" disabled>
//                   <Calendar className="w-4 h-4 mr-2" />
//                   Find Donation Center (Coming Soon)
//                 </Button>
//                 <Button className="w-full" variant="outline" disabled>
//                   <Users className="w-4 h-4 mr-2" />
//                   Update Availability (Coming Soon)
//                 </Button>
//                 <Button className="w-full" variant="outline" disabled>
//                   <Trophy className="w-4 h-4 mr-2" />
//                   View Challenges (Coming Soon)
//                 </Button>
//               </div>
//             </Card>

//             {/* Progress to Next Level */}
//             <Card className="p-6 bg-gradient-to-br from-purple-50 to-pink-50 border-purple-200">
//               <h3 className="text-lg font-semibold text-purple-900 mb-4">Next Level Progress</h3>
//               <div className="space-y-3">
//                 <div className="flex justify-between text-sm">
//                   <span className="text-purple-700">Blood Guardian → Life Saver</span>
//                   <span className="text-purple-600 font-medium">75%</span>
//                 </div>
//                 <div className="w-full bg-purple-200 rounded-full h-3">
//                   <div className="bg-purple-600 h-3 rounded-full animate-pulse" style={{ width: '75%' }}></div>
//                 </div>
//                 <p className="text-xs text-purple-700">125 more points to unlock Life Saver status!</p>
//               </div>
//             </Card>
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default DonorPortal;


// frontend/src/pages/DonorPortal.jsx

import React, { useState, useEffect } from 'react';
import { Card } from '../components/ui/card';
import { Badge } from '../components/ui/badge';
import { Button } from '../components/ui/button';
import { Trophy, Heart, Calendar, Shield, Star, Gift, Users, TrendingUp, Award, Zap } from 'lucide-react';
import { mockLeaderboard } from '../lib/mockData'; // Leaderboard remains mock for this version
import { donorAPI } from '../lib/api';
import LoadingSpinner from '../components/common/LoadingSpinner';

const DonorPortal = () => {
  const [donorData, setDonorData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        const response = await donorAPI.getDashboard();
        setDonorData(response.data);
      } catch (err) {
        setError("Could not fetch your dashboard data. Please try logging in again.");
        console.error("Failed to fetch donor data:", err);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []); // Empty dependency array ensures this runs only once when the component mounts

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="flex flex-col items-center gap-4">
          <LoadingSpinner size="xl" />
          <p className="text-lg text-gray-600">Loading Your Portal...</p>
        </div>
      </div>
    );
  }

  if (error || !donorData) {
    return (
      <div className="min-h-screen flex items-center justify-center text-red-600 text-lg p-4 text-center">
        {error || "An error occurred while loading your data."}
      </div>
    );
  }

  const donor = donorData; // Assign for easier use in existing JSX

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-6 py-8">
        {/* Header Section */}
        <div className="bg-gradient-to-r from-blue-600 to-blue-700 text-white p-8 rounded-2xl mb-8 relative overflow-hidden">
          <div className="absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -mr-16 -mt-16"></div>
          <div className="absolute bottom-0 left-0 w-24 h-24 bg-white/10 rounded-full -ml-12 -mb-12"></div>
          
          <div className="flex flex-col md:flex-row items-center justify-between relative z-10 gap-4">
            <div>
              <h1 className="text-3xl font-bold mb-2">
                Welcome back, {donor.name}! 🩸
              </h1>
              <p className="text-blue-100 text-lg">
                Thank you for being a <span className="font-semibold">{donor.level}</span>
              </p>
              <div className="flex flex-wrap items-center gap-4 mt-4">
                <Badge className="bg-white/20 text-white border-white/30">Level: {donor.level}</Badge>
                <Badge className="bg-white/20 text-white border-white/30">{donor.points} Points</Badge>
                <Badge className="bg-white/20 text-white border-white/30">{donor.streak} Month Streak</Badge>
              </div>
            </div>
            <div className="text-center flex-shrink-0">
              <div className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center mb-2">
                <Heart className="w-10 h-10 text-white animate-pulse" />
              </div>
              <div className="text-2xl font-bold">{donor.donations_completed}</div>
              <div className="text-sm text-blue-100">Donations</div>
            </div>
          </div>
        </div>

        {/* Coming Soon Banner */}
        <div className="bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200 p-6 rounded-xl mb-8">
          <div className="flex items-center gap-4">
            <div className="w-12 h-12 bg-yellow-100 rounded-full flex items-center justify-center flex-shrink-0">
              <Gift className="w-6 h-6 text-yellow-600" />
            </div>
            <div className="flex-1">
              <h3 className="text-lg font-semibold text-yellow-800">Enhanced Donor Features Launching Soon!</h3>
              <p className="text-yellow-700">Advanced gamification, personalized matching, and community features are being finalized.</p>
            </div>
            <div className="hidden md:flex items-center gap-2">
              <Zap className="w-5 h-5 text-yellow-600" />
              <span className="text-yellow-700 font-medium">Phase 2</span>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-8">
            {/* Impact Metrics */}
            <div>
              <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center gap-2"><TrendingUp className="w-6 h-6 text-blue-600" />Your Impact</h2>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <Card className="p-6 text-center bg-gradient-to-br from-red-50 to-red-100 border-red-200 hover:shadow-lg transition-all duration-300">
                  <Heart className="w-12 h-12 text-red-600 mx-auto mb-4 animate-pulse" />
                  <div className="text-3xl font-bold text-red-700 mb-2">{donor.impact_lives_saved}</div>
                  <div className="text-red-600 font-medium">Lives Saved</div>
                </Card>
                <Card className="p-6 text-center bg-gradient-to-br from-green-50 to-green-100 border-green-200 hover:shadow-lg transition-all duration-300">
                  <Calendar className="w-12 h-12 text-green-600 mx-auto mb-4" />
                  <div className="text-3xl font-bold text-green-700 mb-2">{donor.streak}</div>
                  <div className="text-green-600 font-medium">Month Streak</div>
                </Card>
                <Card className="p-6 text-center bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200 hover:shadow-lg transition-all duration-300">
                  <Star className="w-12 h-12 text-blue-600 mx-auto mb-4" />
                  <div className="text-3xl font-bold text-blue-700 mb-2">{donor.points}</div>
                  <div className="text-blue-600 font-medium">Total Points</div>
                </Card>
              </div>
            </div>

            {/* Achievement Badges */}
            <div>
              <h3 className="text-xl font-semibold text-gray-900 mb-6 flex items-center gap-2"><Award className="w-5 h-5 text-yellow-600" />Achievement Badges</h3>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {donor.badges.map((badge) => {
                  const IconComponent = { award: Trophy, heart: Heart, calendar: Calendar, shield: Shield }[badge.icon] || Trophy;
                  return (
                    <Card key={badge.id} className={`p-4 text-center transition-all duration-300 ${badge.unlocked ? 'bg-gradient-to-br from-yellow-50 to-yellow-100 border-yellow-200 hover:shadow-lg hover:scale-105' : 'bg-gray-50 border-gray-200 opacity-60'}`}>
                      <div className={`w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-3 ${badge.unlocked ? 'bg-yellow-100' : 'bg-gray-100'}`}>
                        <IconComponent className={`w-6 h-6 ${badge.unlocked ? 'text-yellow-600' : 'text-gray-400'}`} />
                      </div>
                      <div className={`font-medium text-sm ${badge.unlocked ? 'text-gray-900' : 'text-gray-500'}`}>{badge.name}</div>
                      {badge.unlocked ? (<Badge className="mt-2 bg-green-100 text-green-800 text-xs">Unlocked ✓</Badge>) : (<Badge className="mt-2 bg-gray-100 text-gray-600 text-xs">Locked</Badge>)}
                    </Card>
                  );
                })}
              </div>
            </div>

            {/* Donation Status */}
            <Card className="p-6 bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200">
              <h3 className="text-xl font-semibold text-gray-900 mb-4 flex items-center gap-2"><Calendar className="w-5 h-5 text-blue-600" />Donation Status</h3>
              <div className="flex items-center justify-between p-4 bg-white rounded-lg shadow-sm">
                <div>
                  <div className="font-semibold text-blue-900">Next Donation Eligibility</div>
                  <div className="text-blue-700">{donor.next_donation}</div>
                  <div className="text-sm text-gray-600 mt-1">You're ready to save a life again!</div>
                </div>
                <Button className="bg-blue-600 hover:bg-blue-700" disabled>Schedule Donation (Coming Soon)</Button>
              </div>
            </Card>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            <Card className="p-6">
              <div className="flex items-center gap-2 mb-4"><Users className="w-5 h-5 text-gray-600" /><h3 className="text-lg font-semibold text-gray-900">Community Leaders</h3></div>
              <div className="space-y-3">
                {mockLeaderboard.slice(0, 5).map((leader, index) => (
                  <div key={leader.rank} className={`flex items-center justify-between p-3 rounded-lg transition-all duration-300 ${leader.name === donor.name ? 'bg-blue-50 border border-blue-200' : 'hover:bg-gray-50'}`}>
                    <div className="flex items-center gap-3">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${index === 0 ? 'bg-yellow-100 text-yellow-700' : index === 1 ? 'bg-gray-100 text-gray-700' : index === 2 ? 'bg-orange-100 text-orange-700' : 'bg-blue-100 text-blue-700'}`}>#{leader.rank}</div>
                      <div>
                        <div className={`font-medium text-sm ${leader.name === donor.name ? 'text-blue-700' : 'text-gray-900'}`}>{leader.name}{leader.name === donor.name && <span className="text-blue-500 ml-1">(You)</span>}</div>
                        <div className="text-xs text-gray-500">{leader.location}</div>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="font-semibold text-sm">{leader.donations}</div>
                      <div className="text-xs text-gray-500">donations</div>
                    </div>
                  </div>
                ))}
              </div>
            </Card>

            <Card className="p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h3>
              <div className="space-y-3">
                <Button className="w-full" variant="outline" disabled><Users className="w-4 h-4 mr-2" />Update Availability (Coming Soon)</Button>
                <Button className="w-full" variant="outline" disabled><Calendar className="w-4 h-4 mr-2" />Find Donation Center (Coming Soon)</Button>
                <Button className="w-full" variant="outline" disabled><Trophy className="w-4 h-4 mr-2" />View Challenges (Coming Soon)</Button>
              </div>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DonorPortal;

```

`frontend/src/pages/Landing.jsx`

```javascript
import React, { useState, useEffect } from 'react';
import HeroSection from '../components/landing/HeroSection';
import FeatureShowcase from '../components/landing/FeatureShowcase';
import SuccessStories from '../components/landing/SuccessStories';
import WhatsAppButton from '../components/common/WhatsAppButton';
import { mockStats, mockFeatures, mockSuccessStories } from '../lib/mockData';
import { publicAPI } from '../lib/api';

const Landing = () => {
  const [stats, setStats] = useState(mockStats);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const fetchStats = async () => {
      setLoading(true);
      try {
        // Try to fetch live stats from public API
        const response = await publicAPI.getStats();
        setStats(response.data);
      } catch (error) {
        console.log('Using mock stats for landing page (API not available)');
        // Use mock stats as fallback
        setStats(mockStats);
      } finally {
        setLoading(false);
      }
    };

    fetchStats();
  }, []);

  return (
    <div className="min-h-screen">
      <HeroSection stats={stats} loading={loading} />
      <FeatureShowcase features={mockFeatures} />
      <SuccessStories stories={mockSuccessStories} />
      <WhatsAppButton />
    </div>
  );
};

export default Landing;

```

`frontend/src/pages/Login.jsx`

```javascript
// // import React, { useState } from 'react';
// // import { useNavigate } from 'react-router-dom';
// // import { Card } from '../components/ui/card';
// // import { Button } from '../components/ui/button';
// // import { Input } from '../components/ui/input';
// // import { Label } from '../components/ui/label';
// // import { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';
// // import { Dialog, DialogContent, DialogHeader, DialogTitle } from '../components/ui/dialog';
// // import { Heart, Shield, Users, Activity, AlertCircle, CheckCircle } from 'lucide-react';
// // import { useAuth } from '../context/AuthContext';
// // import { authAPI } from '../lib/api';
// // import LoadingSpinner from '../components/common/LoadingSpinner';

// // const Login = () => {
// //   const navigate = useNavigate();
// //   const { login } = useAuth();
// //   const [loading, setLoading] = useState(false);
// //   const [showComingSoon, setShowComingSoon] = useState(false);
// //   const [comingSoonType, setComingSoonType] = useState('');
// //   const [error, setError] = useState('');
// //   const [adminForm, setAdminForm] = useState({
// //     phone: '+918000000000',
// //     password: 'admin123'
// //   });

// //   const handleAdminLogin = async (e) => {
// //     e.preventDefault();
// //     setLoading(true);
// //     setError('');

// //     try {
// //       const response = await authAPI.adminLogin(adminForm);
// //       const { user, token } = response.data;
      
// //       login(user, token);
// //       navigate('/admin');
// //     } catch (error) {
// //       console.error('Login failed:', error);
// //       setError(error.response?.data?.detail || 'Login failed. Please check your credentials.');
// //     } finally {
// //       setLoading(false);
// //     }
// //   };

// //   const handleComingSoon = (type) => {
// //     setComingSoonType(type);
// //     setShowComingSoon(true);
// //   };

// //   return (
// //     <div className="min-h-screen bg-gradient-to-br from-red-50 via-white to-red-50 flex items-center justify-center p-6">
// //       <div className="w-full max-w-md">
// //         {/* Header */}
// //         <div className="text-center mb-8">
// //           <div className="w-16 h-16 bg-red-600 rounded-2xl flex items-center justify-center mx-auto mb-4 animate-pulse">
// //             <Heart className="w-8 h-8 text-white" />
// //           </div>
// //           <h1 className="text-3xl font-bold text-gray-900 mb-2">Welcome Back</h1>
// //           <p className="text-gray-600">Access your BloodBridge AI portal</p>
// //           <p className="text-sm text-red-600 font-medium mt-2">🩸 Thalassemia-Free India 2030</p>
// //         </div>

// //         {/* Login Tabs */}
// //         <Card className="p-6 shadow-xl border-0 bg-white/95 backdrop-blur-sm">
// //           <Tabs defaultValue="admin" className="w-full">
// //             <TabsList className="grid w-full grid-cols-3 mb-6">
// //               <TabsTrigger value="admin" className="flex items-center gap-2">
// //                 <Shield className="w-4 h-4" />
// //                 Admin
// //               </TabsTrigger>
// //               <TabsTrigger value="donor" className="flex items-center gap-2">
// //                 <Users className="w-4 h-4" />
// //                 Donor
// //               </TabsTrigger>
// //               <TabsTrigger value="patient" className="flex items-center gap-2">
// //                 <Activity className="w-4 h-4" />
// //                 Patient
// //               </TabsTrigger>
// //             </TabsList>

// //             {/* Admin Login */}
// //             <TabsContent value="admin" className="space-y-4">
// //               <form onSubmit={handleAdminLogin} className="space-y-4">
// //                 <div className="space-y-2">
// //                   <Label htmlFor="admin-phone">Phone Number</Label>
// //                   <Input
// //                     id="admin-phone"
// //                     type="tel"
// //                     value={adminForm.phone}
// //                     onChange={(e) => setAdminForm({...adminForm, phone: e.target.value})}
// //                     placeholder="+91 98765 43210"
// //                     required
// //                     className="border-red-200 focus:border-red-400"
// //                   />
// //                 </div>

// //                 <div className="space-y-2">
// //                   <Label htmlFor="admin-password">Password</Label>
// //                   <Input
// //                     id="admin-password"
// //                     type="password"
// //                     value={adminForm.password}
// //                     onChange={(e) => setAdminForm({...adminForm, password: e.target.value})}
// //                     placeholder="Enter your password"
// //                     required
// //                     className="border-red-200 focus:border-red-400"
// //                   />
// //                 </div>

// //                 {error && (
// //                   <div className="flex items-center gap-2 text-red-600 text-sm bg-red-50 p-3 rounded-lg">
// //                     <AlertCircle className="w-4 h-4" />
// //                     {error}
// //                   </div>
// //                 )}

// //                 <Button
// //                   type="submit"
// //                   className="w-full bg-red-600 hover:bg-red-700 text-white py-3"
// //                   disabled={loading}
// //                 >
// //                   {loading ? (
// //                     <>
// //                       <LoadingSpinner size="sm" className="mr-2" />
// //                       Signing In...
// //                     </>
// //                   ) : (
// //                     'Sign In as Admin'
// //                   )}
// //                 </Button>
// //               </form>

// //               <div className="bg-blue-50 p-4 rounded-lg text-sm border border-blue-200">
// //                 <div className="font-medium text-blue-800 mb-1 flex items-center gap-2">
// //                   <CheckCircle className="w-4 h-4" />
// //                   Demo Credentials:
// //                 </div>
// //                 <div className="text-blue-700">
// //                   Phone: +918000000000<br />
// //                   Password: admin123
// //                 </div>
// //               </div>
// //             </TabsContent>

// //             {/* Donor Login - Coming Soon */}
// //             <TabsContent value="donor" className="space-y-4">
// //               <div className="text-center py-8">
// //                 <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
// //                   <Users className="w-8 h-8 text-blue-600" />
// //                 </div>
// //                 <h3 className="text-xl font-semibold text-gray-900 mb-2">
// //                   Donor Portal
// //                 </h3>
// //                 <p className="text-gray-600 mb-6">
// //                   Enhanced donor features with gamification, impact tracking,
// //                   and personalized matching are being finalized.
// //                 </p>
// //                 <Button
// //                   onClick={() => handleComingSoon('donor')}
// //                   className="bg-blue-600 hover:bg-blue-700 text-white"
// //                 >
// //                   Join Waitlist
// //                 </Button>
// //               </div>
// //             </TabsContent>

// //             {/* Patient Login - Coming Soon */}
// //             <TabsContent value="patient" className="space-y-4">
// //               <div className="text-center py-8">
// //                 <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
// //                   <Activity className="w-8 h-8 text-green-600" />
// //                 </div>
// //                 <h3 className="text-xl font-semibold text-gray-900 mb-2">
// //                   Patient Portal
// //                 </h3>
// //                 <p className="text-gray-600 mb-6">
// //                   Personalized care coordination, health tracking,
// //                   and bridge management features launching soon.
// //                 </p>
// //                 <Button
// //                   onClick={() => handleComingSoon('patient')}
// //                   className="bg-green-600 hover:bg-green-700 text-white"
// //                 >
// //                   Get Early Access
// //                 </Button>
// //               </div>
// //             </TabsContent>
// //           </Tabs>

// //           {/* Footer */}
// //           <div className="text-center mt-6 pt-6 border-t border-gray-200">
// //             <p className="text-sm text-gray-500">
// //               Part of the <strong className="text-red-600">Thalassemia-Free India 2030</strong> Mission
// //             </p>
// //           </div>
// //         </Card>

// //         {/* Coming Soon Modal */}
// //         <Dialog open={showComingSoon} onOpenChange={setShowComingSoon}>
// //           <DialogContent className="sm:max-w-md">
// //             <DialogHeader>
// //               <DialogTitle className="text-center">
// //                 {comingSoonType === 'donor' ? 'Donor Portal' : 'Patient Portal'} Coming Soon!
// //               </DialogTitle>
// //             </DialogHeader>
// //             <div className="text-center py-6">
// //               <div className="w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
// //                 <Heart className="w-10 h-10 text-red-600" />
// //               </div>
// //               <h3 className="text-lg font-semibold text-gray-900 mb-4">
// //                 Phase 2 Features
// //               </h3>
// //               <p className="text-gray-600 mb-6">
// //                 We're working hard to bring you an amazing {comingSoonType} experience
// //                 with personalized features, real-time updates, and seamless care coordination.
// //               </p>
// //               <div className="bg-red-50 p-4 rounded-lg">
// //                 <p className="text-sm text-red-700">
// //                   <strong>Coming Soon:</strong> Complete {comingSoonType} portal with
// //                   advanced matching, health tracking, and community features.
// //                 </p>
// //               </div>
// //             </div>
// //           </DialogContent>
// //         </Dialog>
// //       </div>
// //     </div>
// //   );
// // };

// // export default Login;

// import React, { useState } from 'react';
// import { useNavigate } from 'react-router-dom';
// import { Card } from '../components/ui/card';
// import { Button } from '../components/ui/button';
// import { Input } from '../components/ui/input';
// import { Label } from '../components/ui/label';
// import { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';
// import { Heart, Shield, Users, Activity, AlertCircle, CheckCircle } from 'lucide-react';
// import { useAuth } from '../context/AuthContext';
// import { authAPI } from '../lib/api';
// import { mockDonorData, mockPatientData } from '../lib/mockData';
// import LoadingSpinner from '../components/common/LoadingSpinner';

// const Login = () => {
//   const navigate = useNavigate();
//   const { login } = useAuth();
//   const [loading, setLoading] = useState(false);
//   const [error, setError] = useState('');
//   const [activeTab, setActiveTab] = useState('admin');

//   // --- State for each form ---
//   const [adminForm, setAdminForm] = useState({ phone: '+918000000000', password: 'admin123' });
//   const [donorForm, setDonorForm] = useState({ phone: '+919876543210', password: 'donor123' });
//   const [patientForm, setPatientForm] = useState({ phone: '+911234567890', password: 'patient123' });

//   const handleAdminLogin = async (e) => {
//     e.preventDefault();
//     setLoading(true);
//     setError('');
//     try {
//       // Real API call for Admin
//       const response = await authAPI.adminLogin(adminForm);
//       const { user, token } = response.data;
//       login(user, token);
//       navigate('/admin');
//     } catch (err) {
//       setError(err.response?.data?.detail || 'Login failed. Please check your credentials.');
//     } finally {
//       setLoading(false);
//     }
//   };

//   // --- MOCK LOGIN HANDLERS ---
//   const handleDonorLogin = (e) => {
//     e.preventDefault();
//     setError('');
//     if (donorForm.phone === mockDonorData.phone && donorForm.password === 'donor123') {
//       const mockUser = { name: mockDonorData.name, phone: mockDonorData.phone, role: 'donor' };
//       login(mockUser, 'mock-donor-jwt-token');
//       navigate('/donor');
//     } else {
//       setError('Invalid donor credentials. Please use the demo details.');
//     }
//   };

//   const handlePatientLogin = (e) => {
//     e.preventDefault();
//     setError('');
//     // Using an invented phone number for the mock patient for consistency
//     if (patientForm.phone === '+911234567890' && patientForm.password === 'patient123') {
//         const mockUser = { name: mockPatientData.name, phone: '+911234567890', role: 'patient' };
//         login(mockUser, 'mock-patient-jwt-token');
//         navigate('/patient');
//     } else {
//       setError('Invalid patient credentials. Please use the demo details.');
//     }
//   };

//   return (
//     <div className="min-h-screen bg-gradient-to-br from-red-50 via-white to-red-50 flex items-center justify-center p-6">
//       <div className="w-full max-w-md">
//         <div className="text-center mb-8">
//           <div className="w-16 h-16 bg-red-600 rounded-2xl flex items-center justify-center mx-auto mb-4 animate-pulse">
//             <Heart className="w-8 h-8 text-white" />
//           </div>
//           <h1 className="text-3xl font-bold text-gray-900 mb-2">Welcome Back</h1>
//           <p className="text-gray-600">Access your BloodBridge AI portal</p>
//         </div>

//         <Card className="p-6 shadow-xl border-0 bg-white/95 backdrop-blur-sm">
//           <Tabs value={activeTab} onValueChange={(value) => { setActiveTab(value); setError(''); }} className="w-full">
//             <TabsList className="grid w-full grid-cols-3 mb-6">
//               <TabsTrigger value="admin"><Shield className="w-4 h-4 mr-1" />Admin</TabsTrigger>
//               <TabsTrigger value="donor"><Users className="w-4 h-4 mr-1" />Donor</TabsTrigger>
//               <TabsTrigger value="patient"><Activity className="w-4 h-4 mr-1" />Patient</TabsTrigger>
//             </TabsList>

//             {/* Admin Login Form */}
//             <TabsContent value="admin">
//               <form onSubmit={handleAdminLogin} className="space-y-4">
//                 {/* Form fields... */}
//                 <div className="space-y-2"><Label htmlFor="admin-phone">Phone Number</Label><Input id="admin-phone" type="tel" value={adminForm.phone} onChange={(e) => setAdminForm({...adminForm, phone: e.target.value})} required /></div>
//                 <div className="space-y-2"><Label htmlFor="admin-password">Password</Label><Input id="admin-password" type="password" value={adminForm.password} onChange={(e) => setAdminForm({...adminForm, password: e.target.value})} required /></div>
//                 {error && activeTab === 'admin' && (<div className="flex items-center gap-2 text-red-600 text-sm bg-red-50 p-3 rounded-lg"><AlertCircle className="w-4 h-4" />{error}</div>)}
//                 <Button type="submit" className="w-full bg-red-600 hover:bg-red-700" disabled={loading}>{loading ? <LoadingSpinner size="sm" /> : 'Sign In as Admin'}</Button>
//                 <div className="bg-blue-50 p-3 rounded-lg text-sm border border-blue-200"><div className="font-medium text-blue-800 mb-1 flex items-center gap-2"><CheckCircle className="w-4 h-4" />Demo Credentials:</div><div className="text-blue-700">Phone: +918000000000<br />Password: admin123</div></div>
//               </form>
//             </TabsContent>

//             {/* Donor Login Form */}
//             <TabsContent value="donor">
//               <form onSubmit={handleDonorLogin} className="space-y-4">
//                 <div className="space-y-2"><Label htmlFor="donor-phone">Phone Number</Label><Input id="donor-phone" type="tel" value={donorForm.phone} onChange={(e) => setDonorForm({...donorForm, phone: e.target.value})} required /></div>
//                 <div className="space-y-2"><Label htmlFor="donor-password">Password</Label><Input id="donor-password" type="password" value={donorForm.password} onChange={(e) => setDonorForm({...donorForm, password: e.target.value})} required /></div>
//                 {error && activeTab === 'donor' && (<div className="flex items-center gap-2 text-red-600 text-sm bg-red-50 p-3 rounded-lg"><AlertCircle className="w-4 h-4" />{error}</div>)}
//                 <Button type="submit" className="w-full bg-blue-600 hover:bg-blue-700">Sign In as Donor</Button>
//                 <div className="bg-blue-50 p-3 rounded-lg text-sm border border-blue-200"><div className="font-medium text-blue-800 mb-1 flex items-center gap-2"><CheckCircle className="w-4 h-4" />Demo Credentials:</div><div className="text-blue-700">Phone: +919876543210<br />Password: donor123</div></div>
//               </form>
//             </TabsContent>

//             {/* Patient Login Form */}
//             <TabsContent value="patient">
//               <form onSubmit={handlePatientLogin} className="space-y-4">
//                 <div className="space-y-2"><Label htmlFor="patient-phone">Phone Number</Label><Input id="patient-phone" type="tel" value={patientForm.phone} onChange={(e) => setPatientForm({...patientForm, phone: e.target.value})} required /></div>
//                 <div className="space-y-2"><Label htmlFor="patient-password">Password</Label><Input id="patient-password" type="password" value={patientForm.password} onChange={(e) => setPatientForm({...patientForm, password: e.target.value})} required /></div>
//                 {error && activeTab === 'patient' && (<div className="flex items-center gap-2 text-red-600 text-sm bg-red-50 p-3 rounded-lg"><AlertCircle className="w-4 h-4" />{error}</div>)}
//                 <Button type="submit" className="w-full bg-green-600 hover:bg-green-700">Sign In as Patient</Button>
//                 <div className="bg-blue-50 p-3 rounded-lg text-sm border border-blue-200"><div className="font-medium text-blue-800 mb-1 flex items-center gap-2"><CheckCircle className="w-4 h-4" />Demo Credentials:</div><div className="text-blue-700">Phone: +911234567890<br />Password: patient123</div></div>
//               </form>
//             </TabsContent>
//           </Tabs>

//           <div className="text-center mt-6 pt-6 border-t border-gray-200">
//             <p className="text-sm text-gray-500">
//               Part of the <strong className="text-red-600">Thalassemia-Free India 2030</strong> Mission
//             </p>
//           </div>
//         </Card>
//       </div>
//     </div>
//   );
// };

// export default Login;



// frontend/src/pages/Login.jsx

import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card } from '../components/ui/card';
import { Button } from '../components/ui/button';
import { Input } from '../components/ui/input';
import { Label } from '../components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';
import { Heart, Shield, Users, Activity, AlertCircle, CheckCircle } from 'lucide-react';
import { useAuth } from '../context/AuthContext';
import { authAPI } from '../lib/api';
import LoadingSpinner from '../components/common/LoadingSpinner';

const Login = () => {
  const navigate = useNavigate();
  const { login, user } = useAuth(); // Get the user from context
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [activeTab, setActiveTab] = useState('admin');

  const [formState, setFormState] = useState({
    admin: { phone: '+918000000000', password: 'admin123' },
    donor: { phone: '+919876543210', password: 'donor123' },
    patient: { phone: '+911234567890', password: 'patient123' },
  });

  // --- EFFECT FOR REDIRECTION ---
  // This will run whenever the 'user' object in our context changes.
  useEffect(() => {
    if (user) {
      console.log("User detected, redirecting. Role:", user.role);
      // Redirect based on the role now present in the context
      if (user.role === 'Admin') navigate('/admin');
      else if (user.role === 'Donor') navigate('/donor');
      else if (user.role === 'Patient') navigate('/patient');
      else navigate('/'); // Fallback
    }
  }, [user, navigate]); // Dependencies: user and navigate

  const handleInputChange = (role, field, value) => {
    setFormState(prev => ({
      ...prev,
      [role]: { ...prev[role], [field]: value }
    }));
  };

  const handleLogin = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    
    const credentials = formState[activeTab];

    try {
      const response = await authAPI.login(credentials);
      const { user: userData, token } = response.data;
      
      // This now just updates the context. The useEffect will handle the redirect.
      login(userData, token); 

    } catch (err) {
      setError(err.response?.data?.message || 'Login failed. Please check credentials.');
      setLoading(false); // Make sure to stop loading on error
    }
    // We no longer navigate here.
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-red-50 via-white to-red-50 flex items-center justify-center p-6">
      <div className="w-full max-w-md">
        <div className="text-center mb-8">
            <div className="w-16 h-16 bg-red-600 rounded-2xl flex items-center justify-center mx-auto mb-4 animate-pulse">
                <Heart className="w-8 h-8 text-white" />
            </div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">Welcome Back</h1>
            <p className="text-gray-600">Access your BloodBridge AI portal</p>
        </div>

        <Card className="p-6 shadow-xl border-0 bg-white/95 backdrop-blur-sm">
            <Tabs value={activeTab} onValueChange={(value) => { setActiveTab(value); setError(''); }} className="w-full">
                <TabsList className="grid w-full grid-cols-3 mb-6">
                    <TabsTrigger value="admin"><Shield className="w-4 h-4 mr-1" />Admin</TabsTrigger>
                    <TabsTrigger value="donor"><Users className="w-4 h-4 mr-1" />Donor</TabsTrigger>
                    <TabsTrigger value="patient"><Activity className="w-4 h-4 mr-1" />Patient</TabsTrigger>
                </TabsList>

                <form onSubmit={handleLogin} className="space-y-4">
                    <TabsContent value="admin">
                        <div className="space-y-2"><Label htmlFor="admin-phone">Phone Number</Label><Input id="admin-phone" type="tel" value={formState.admin.phone} onChange={(e) => handleInputChange('admin', 'phone', e.target.value)} required /></div>
                        <div className="space-y-2"><Label htmlFor="admin-password">Password</Label><Input id="admin-password" type="password" value={formState.admin.password} onChange={(e) => handleInputChange('admin', 'password', e.target.value)} required /></div>
                    </TabsContent>
                    <TabsContent value="donor">
                         <div className="space-y-2"><Label htmlFor="donor-phone">Phone Number</Label><Input id="donor-phone" type="tel" value={formState.donor.phone} onChange={(e) => handleInputChange('donor', 'phone', e.target.value)} required /></div>
                        <div className="space-y-2"><Label htmlFor="donor-password">Password</Label><Input id="donor-password" type="password" value={formState.donor.password} onChange={(e) => handleInputChange('donor', 'password', e.target.value)} required /></div>
                    </TabsContent>
                    <TabsContent value="patient">
                        <div className="space-y-2"><Label htmlFor="patient-phone">Phone Number</Label><Input id="patient-phone" type="tel" value={formState.patient.phone} onChange={(e) => handleInputChange('patient', 'phone', e.target.value)} required /></div>
                        <div className="space-y-2"><Label htmlFor="patient-password">Password</Label><Input id="patient-password" type="password" value={formState.patient.password} onChange={(e) => handleInputChange('patient', 'password', e.target.value)} required /></div>
                    </TabsContent>

                    {error && (<div className="flex items-center gap-2 text-red-600 text-sm bg-red-50 p-3 rounded-lg"><AlertCircle className="w-4 h-4" />{error}</div>)}
                    <Button type="submit" className="w-full bg-red-600 hover:bg-red-700" disabled={loading}>{loading ? <LoadingSpinner size="sm" /> : `Sign In as ${activeTab.charAt(0).toUpperCase() + activeTab.slice(1)}`}</Button>
                    
                    <div className="bg-blue-50 p-3 rounded-lg text-sm border border-blue-200">
                        <div className="font-medium text-blue-800 mb-1 flex items-center gap-2"><CheckCircle className="w-4 h-4" />Demo Credentials:</div>
                        <div className="text-blue-700">
                            <strong>{activeTab.charAt(0).toUpperCase() + activeTab.slice(1)} Phone:</strong> {formState[activeTab].phone}<br />
                            <strong>{activeTab.charAt(0).toUpperCase() + activeTab.slice(1)} Password:</strong> {formState[activeTab].password}
                        </div>
                    </div>
                </form>
            </Tabs>
        </Card>
      </div>
    </div>
  );
};

export default Login;

```

`frontend/src/pages/PatientPortal.jsx`

```javascript
// // import React from 'react';
// // import { Card } from '../components/ui/card';
// // import { Badge } from '../components/ui/badge';
// // import { Button } from '../components/ui/button';
// // import { Calendar, Heart, Activity, Users, Clock, AlertCircle, CheckCircle, Stethoscope, Zap } from 'lucide-react';
// // import { mockPatientData } from '../lib/mockData';

// // const PatientPortal = () => {
// //   const patient = mockPatientData;

// //   return (
// //     <div className="min-h-screen bg-gray-50">
// //       <div className="container mx-auto px-6 py-8">
// //         {/* Header Section */}
// //         <div className="bg-gradient-to-r from-green-600 to-green-700 text-white p-8 rounded-2xl mb-8 relative overflow-hidden">
// //           <div className="absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -mr-16 -mt-16"></div>
// //           <div className="absolute bottom-0 left-0 w-24 h-24 bg-white/10 rounded-full -ml-12 -mb-12"></div>
          
// //           <div className="flex items-center justify-between relative z-10">
// //             <div>
// //               <h1 className="text-3xl font-bold mb-2">
// //                 Hello, {patient.name}! 💚
// //               </h1>
// //               <p className="text-green-100 text-lg">
// //                 Your health journey is our priority
// //               </p>
// //               <div className="flex items-center gap-4 mt-4">
// //                 <Badge className="bg-white/20 text-white border-white/30">
// //                   Bridge Status: {patient.bridge_status}
// //                 </Badge>
// //                 <Badge className="bg-white/20 text-white border-white/30">
// //                   Health Score: {patient.health_score}%
// //                 </Badge>
// //                 <Badge className="bg-white/20 text-white border-white/30">
// //                   {patient.blood_group}
// //                 </Badge>
// //               </div>
// //             </div>
// //             <div className="text-center">
// //               <div className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center mb-2">
// //                 <Activity className="w-10 h-10 text-white animate-pulse" />
// //               </div>
// //               <div className="text-2xl font-bold">{patient.connected_donors}</div>
// //               <div className="text-sm text-green-100">Connected Donors</div>
// //             </div>
// //           </div>
// //         </div>

// //         {/* Coming Soon Banner */}
// //         <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 p-6 rounded-xl mb-8">
// //           <div className="flex items-center gap-4">
// //             <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
// //               <Heart className="w-6 h-6 text-blue-600" />
// //             </div>
// //             <div className="flex-1">
// //               <h3 className="text-lg font-semibold text-blue-800">Personalized Patient Features Launching Soon!</h3>
// //               <p className="text-blue-700">
// //                 Advanced health monitoring, appointment management, and direct donor communication are being finalized.
// //               </p>
// //             </div>
// //             <div className="hidden md:flex items-center gap-2">
// //               <Zap className="w-5 h-5 text-blue-600" />
// //               <span className="text-blue-700 font-medium">Phase 2</span>
// //             </div>
// //           </div>
// //         </div>

// //         <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
// //           {/* Main Content */}
// //           <div className="lg:col-span-2 space-y-8">
// //             {/* Health Timeline */}
// //             <div>
// //               <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center gap-2">
// //                 <Activity className="w-6 h-6 text-green-600" />
// //                 Health Timeline
// //               </h2>
// //               <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
// //                 <Card className="p-6 bg-gradient-to-br from-red-50 to-red-100 border-red-200 hover:shadow-lg transition-all duration-300">
// //                   <div className="flex items-center gap-4 mb-4">
// //                     <div className="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center">
// //                       <Calendar className="w-6 h-6 text-red-600" />
// //                     </div>
// //                     <div>
// //                       <h3 className="font-semibold text-red-800">Next Transfusion</h3>
// //                       <p className="text-red-600">Countdown</p>
// //                     </div>
// //                   </div>
// //                   <div className="text-center">
// //                     <div className="text-4xl font-bold text-red-700 mb-2">{patient.next_transfusion}</div>
// //                     <div className="text-red-600">Until next session</div>
// //                     <div className="mt-2 text-sm text-red-500">All preparations ready</div>
// //                   </div>
// //                 </Card>

// //                 <Card className="p-6 bg-gradient-to-br from-green-50 to-green-100 border-green-200 hover:shadow-lg transition-all duration-300">
// //                   <div className="flex items-center gap-4 mb-4">
// //                     <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center">
// //                       <CheckCircle className="w-6 h-6 text-green-600" />
// //                     </div>
// //                     <div>
// //                       <h3 className="font-semibold text-green-800">Last Transfusion</h3>
// //                       <p className="text-green-600">Completed</p>
// //                     </div>
// //                   </div>
// //                   <div className="text-center">
// //                     <div className="text-2xl font-bold text-green-700 mb-2">{patient.last_transfusion}</div>
// //                     <div className="text-green-600">Successfully completed</div>
// //                     <div className="mt-2 text-sm text-green-500">Excellent recovery</div>
// //                   </div>
// //                 </Card>
// //               </div>
// //             </div>

// //             {/* Blood Bridge Status */}
// //             <Card className="p-6 bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200">
// //               <h3 className="text-xl font-semibold text-gray-900 mb-6 flex items-center gap-2">
// //                 <Users className="w-5 h-5 text-blue-600" />
// //                 Blood Bridge Network
// //               </h3>
// //               <div className="flex items-center justify-between p-6 bg-white rounded-xl shadow-sm">
// //                 <div className="flex items-center gap-4">
// //                   <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center">
// //                     <Users className="w-8 h-8 text-blue-600" />
// //                   </div>
// //                   <div>
// //                     <h4 className="text-xl font-bold text-blue-900">{patient.connected_donors} Active Donors</h4>
// //                     <p className="text-blue-700">Connected to your care network</p>
// //                     <Badge className="mt-2 bg-green-100 text-green-800">
// //                       Bridge Status: {patient.bridge_status}
// //                     </Badge>
// //                   </div>
// //                 </div>
// //                 <div className="text-center">
// //                   <div className="w-20 h-20 bg-green-500 rounded-full flex items-center justify-center mb-2">
// //                     <CheckCircle className="w-10 h-10 text-white" />
// //                   </div>
// //                   <div className="text-sm font-medium text-green-700">Connected</div>
// //                 </div>
// //               </div>
// //             </Card>

// //             {/* Upcoming Appointments */}
// //             <Card className="p-6">
// //               <h3 className="text-xl font-semibold text-gray-900 mb-6 flex items-center gap-2">
// //                 <Calendar className="w-5 h-5 text-purple-600" />
// //                 Upcoming Appointments
// //               </h3>
// //               <div className="space-y-4">
// //                 {patient.upcoming_appointments.map((appointment, index) => (
// //                   <div key={index} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
// //                     <div className="flex items-center gap-4">
// //                       <div className="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center">
// //                         <Calendar className="w-6 h-6 text-purple-600" />
// //                       </div>
// //                       <div>
// //                         <div className="font-semibold text-gray-900">{appointment.type}</div>
// //                         <div className="text-gray-600">with {appointment.doctor}</div>
// //                         <div className="text-sm text-gray-500">{appointment.date}</div>
// //                       </div>
// //                     </div>
// //                     <Button variant="outline" size="sm" disabled>
// //                       Reschedule (Coming Soon)
// //                     </Button>
// //                   </div>
// //                 ))}
// //               </div>
// //             </Card>
// //           </div>

// //           {/* Sidebar */}
// //           <div className="space-y-6">
// //             {/* Health Score */}
// //             <Card className="p-6">
// //               <div className="flex items-center gap-2 mb-4">
// //                 <Activity className="w-5 h-5 text-gray-600" />
// //                 <h3 className="text-lg font-semibold text-gray-900">Health Score</h3>
// //               </div>
// //               <div className="text-center">
// //                 <div className="w-24 h-24 mx-auto mb-4 relative">
// //                   <svg className="w-24 h-24 transform -rotate-90" viewBox="0 0 36 36">
// //                     <path
// //                       className="text-gray-300"
// //                       stroke="currentColor"
// //                       strokeWidth="3"
// //                       fill="transparent"
// //                       d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
// //                     />
// //                     <path
// //                       className="text-green-500"
// //                       stroke="currentColor"
// //                       strokeWidth="3"
// //                       strokeDasharray={`${patient.health_score}, 100`}
// //                       fill="transparent"
// //                       d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
// //                     />
// //                   </svg>
// //                   <div className="absolute inset-0 flex items-center justify-center">
// //                     <span className="text-2xl font-bold text-green-600">{patient.health_score}%</span>
// //                   </div>
// //                 </div>
// //                 <p className="text-sm text-gray-600">Based on recent health metrics</p>
// //                 <div className="mt-3 flex items-center justify-center gap-1">
// //                   <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
// //                   <span className="text-xs text-green-600 font-medium">Excellent condition</span>
// //                 </div>
// //               </div>
// //             </Card>

// //             {/* Quick Actions */}
// //             <Card className="p-6">
// //               <h3 className="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h3>
// //               <div className="space-y-3">
// //                 <Button className="w-full bg-red-600 hover:bg-red-700" disabled>
// //                   <AlertCircle className="w-4 h-4 mr-2" />
// //                   Emergency Alert (Coming Soon)
// //                 </Button>
// //                 <Button className="w-full" variant="outline" disabled>
// //                   <Calendar className="w-4 h-4 mr-2" />
// //                   Schedule Appointment (Coming Soon)
// //                 </Button>
// //                 <Button className="w-full" variant="outline" disabled>
// //                   <Heart className="w-4 h-4 mr-2" />
// //                   Contact Bridge Donors (Coming Soon)
// //                 </Button>
// //                 <Button className="w-full" variant="outline" disabled>
// //                   <Clock className="w-4 h-4 mr-2" />
// //                   View Health History (Coming Soon)
// //                 </Button>
// //               </div>
// //             </Card>

// //             {/* Care Team */}
// //             <Card className="p-6">
// //               <h3 className="text-lg font-semibold text-gray-900 mb-4">Care Team</h3>
// //               <div className="space-y-3">
// //                 <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
// //                   <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
// //                     <Stethoscope className="w-5 h-5 text-blue-600" />
// //                   </div>
// //                   <div>
// //                     <div className="font-medium text-sm">Dr. Sharma</div>
// //                     <div className="text-xs text-gray-500">Hematologist</div>
// //                   </div>
// //                 </div>
// //                 <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
// //                   <div className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
// //                     <Heart className="w-5 h-5 text-green-600" />
// //                   </div>
// //                   <div>
// //                     <div className="font-medium text-sm">Nurse Priya</div>
// //                     <div className="text-xs text-gray-500">Care Coordinator</div>
// //                   </div>
// //                 </div>
// //                 <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
// //                   <div className="w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center">
// //                     <Users className="w-5 h-5 text-purple-600" />
// //                   </div>
// //                   <div>
// //                     <div className="font-medium text-sm">Support Team</div>
// //                     <div className="text-xs text-gray-500">24/7 Available</div>
// //                   </div>
// //                 </div>
// //               </div>
// //             </Card>

// //             {/* Treatment Progress */}
// //             <Card className="p-6 bg-gradient-to-br from-indigo-50 to-purple-50 border-indigo-200">
// //               <h3 className="text-lg font-semibold text-indigo-900 mb-4">Treatment Progress</h3>
// //               <div className="space-y-3">
// //                 <div className="flex justify-between text-sm">
// //                   <span className="text-indigo-700">This Month's Goal</span>
// //                   <span className="text-indigo-600 font-medium">90%</span>
// //                 </div>
// //                 <div className="w-full bg-indigo-200 rounded-full h-3">
// //                   <div className="bg-indigo-600 h-3 rounded-full animate-pulse" style={{ width: '90%' }}></div>
// //                 </div>
// //                 <p className="text-xs text-indigo-700">Excellent adherence to treatment plan!</p>
// //               </div>
// //             </Card>
// //           </div>
// //         </div>
// //       </div>
// //     </div>
// //   );
// // };

// // export default PatientPortal;



// import React from 'react';
// import { Card } from '../components/ui/card';
// import { Badge } from '../components/ui/badge';
// import { Button } from '../components/ui/button';
// import { Calendar, Heart, Activity, Users, Clock, AlertCircle, CheckCircle, Stethoscope, Zap } from 'lucide-react';
// import { mockPatientData } from '../lib/mockData';

// const PatientPortal = () => {
//   const patient = mockPatientData;

//   return (
//     <div className="min-h-screen bg-gray-50">
//       <div className="container mx-auto px-6 py-8">
//         {/* Header Section */}
//         <div className="bg-gradient-to-r from-green-600 to-green-700 text-white p-8 rounded-2xl mb-8 relative overflow-hidden">
//           <div className="absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -mr-16 -mt-16"></div>
//           <div className="absolute bottom-0 left-0 w-24 h-24 bg-white/10 rounded-full -ml-12 -mb-12"></div>
          
//           <div className="flex items-center justify-between relative z-10">
//             <div>
//               <h1 className="text-3xl font-bold mb-2">
//                 Hello, {patient.name}! 💚
//               </h1>
//               <p className="text-green-100 text-lg">
//                 Your health journey is our priority
//               </p>
//               <div className="flex items-center gap-4 mt-4">
//                 <Badge className="bg-white/20 text-white border-white/30">
//                   Bridge Status: {patient.bridge_status}
//                 </Badge>
//                 <Badge className="bg-white/20 text-white border-white/30">
//                   Health Score: {patient.health_score}%
//                 </Badge>
//                 <Badge className="bg-white/20 text-white border-white/30">
//                   {patient.blood_group}
//                 </Badge>
//               </div>
//             </div>
//             <div className="text-center">
//               <div className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center mb-2">
//                 <Activity className="w-10 h-10 text-white animate-pulse" />
//               </div>
//               <div className="text-2xl font-bold">{patient.connected_donors}</div>
//               <div className="text-sm text-green-100">Connected Donors</div>
//             </div>
//           </div>
//         </div>

//         {/* Coming Soon Banner */}
//         <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 p-6 rounded-xl mb-8">
//           <div className="flex items-center gap-4">
//             <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
//               <Heart className="w-6 h-6 text-blue-600" />
//             </div>
//             <div className="flex-1">
//               <h3 className="text-lg font-semibold text-blue-800">Personalized Patient Features Launching Soon!</h3>
//               <p className="text-blue-700">
//                 Advanced health monitoring, appointment management, and direct donor communication are being finalized.
//               </p>
//             </div>
//             <div className="hidden md:flex items-center gap-2">
//               <Zap className="w-5 h-5 text-blue-600" />
//               <span className="text-blue-700 font-medium">Phase 2</span>
//             </div>
//           </div>
//         </div>

//         <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
//           {/* Main Content */}
//           <div className="lg:col-span-2 space-y-8">
//             {/* Health Timeline */}
//             <div>
//               <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center gap-2">
//                 <Activity className="w-6 h-6 text-green-600" />
//                 Health Timeline
//               </h2>
//               <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
//                 <Card className="p-6 bg-gradient-to-br from-red-50 to-red-100 border-red-200 hover:shadow-lg transition-all duration-300">
//                   <div className="flex items-center gap-4 mb-4">
//                     <div className="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center">
//                       <Calendar className="w-6 h-6 text-red-600" />
//                     </div>
//                     <div>
//                       <h3 className="font-semibold text-red-800">Next Transfusion</h3>
//                       <p className="text-red-600">Countdown</p>
//                     </div>
//                   </div>
//                   <div className="text-center">
//                     <div className="text-4xl font-bold text-red-700 mb-2">{patient.next_transfusion}</div>
//                     <div className="text-red-600">Until next session</div>
//                     <div className="mt-2 text-sm text-red-500">All preparations ready</div>
//                   </div>
//                 </Card>

//                 <Card className="p-6 bg-gradient-to-br from-green-50 to-green-100 border-green-200 hover:shadow-lg transition-all duration-300">
//                   <div className="flex items-center gap-4 mb-4">
//                     <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center">
//                       <CheckCircle className="w-6 h-6 text-green-600" />
//                     </div>
//                     <div>
//                       <h3 className="font-semibold text-green-800">Last Transfusion</h3>
//                       <p className="text-green-600">Completed</p>
//                     </div>
//                   </div>
//                   <div className="text-center">
//                     <div className="text-2xl font-bold text-green-700 mb-2">{patient.last_transfusion}</div>
//                     <div className="text-green-600">Successfully completed</div>
//                     <div className="mt-2 text-sm text-green-500">Excellent recovery</div>
//                   </div>
//                 </Card>
//               </div>
//             </div>

//             {/* Blood Bridge Status */}
//             <Card className="p-6 bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200">
//               <h3 className="text-xl font-semibold text-gray-900 mb-6 flex items-center gap-2">
//                 <Users className="w-5 h-5 text-blue-600" />
//                 Blood Bridge Network
//               </h3>
//               <div className="flex items-center justify-between p-6 bg-white rounded-xl shadow-sm">
//                 <div className="flex items-center gap-4">
//                   <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center">
//                     <Users className="w-8 h-8 text-blue-600" />
//                   </div>
//                   <div>
//                     <h4 className="text-xl font-bold text-blue-900">{patient.connected_donors} Active Donors</h4>
//                     <p className="text-blue-700">Connected to your care network</p>
//                     <Badge className="mt-2 bg-green-100 text-green-800">
//                       Bridge Status: {patient.bridge_status}
//                     </Badge>
//                   </div>
//                 </div>
//                 <div className="text-center">
//                   <div className="w-20 h-20 bg-green-500 rounded-full flex items-center justify-center mb-2">
//                     <CheckCircle className="w-10 h-10 text-white" />
//                   </div>
//                   <div className="text-sm font-medium text-green-700">Connected</div>
//                 </div>
//               </div>
//             </Card>

//             {/* Upcoming Appointments */}
//             <Card className="p-6">
//               <h3 className="text-xl font-semibold text-gray-900 mb-6 flex items-center gap-2">
//                 <Calendar className="w-5 h-5 text-purple-600" />
//                 Upcoming Appointments
//               </h3>
//               <div className="space-y-4">
//                 {patient.upcoming_appointments.map((appointment, index) => (
//                   <div key={index} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
//                     <div className="flex items-center gap-4">
//                       <div className="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center">
//                         <Calendar className="w-6 h-6 text-purple-600" />
//                       </div>
//                       <div>
//                         <div className="font-semibold text-gray-900">{appointment.type}</div>
//                         <div className="text-gray-600">with {appointment.doctor}</div>
//                         <div className="text-sm text-gray-500">{appointment.date}</div>
//                       </div>
//                     </div>
//                     <Button variant="outline" size="sm" disabled>
//                       Reschedule (Coming Soon)
//                     </Button>
//                   </div>
//                 ))}
//               </div>
//             </Card>
//           </div>

//           {/* Sidebar */}
//           <div className="space-y-6">
//             {/* Health Score */}
//             <Card className="p-6">
//               <div className="flex items-center gap-2 mb-4">
//                 <Activity className="w-5 h-5 text-gray-600" />
//                 <h3 className="text-lg font-semibold text-gray-900">Health Score</h3>
//               </div>
//               <div className="text-center">
//                 <div className="w-24 h-24 mx-auto mb-4 relative">
//                   <svg className="w-24 h-24 transform -rotate-90" viewBox="0 0 36 36">
//                     <path
//                       className="text-gray-300"
//                       stroke="currentColor"
//                       strokeWidth="3"
//                       fill="transparent"
//                       d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
//                     />
//                     <path
//                       className="text-green-500"
//                       stroke="currentColor"
//                       strokeWidth="3"
//                       strokeDasharray={`${patient.health_score}, 100`}
//                       fill="transparent"
//                       d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
//                     />
//                   </svg>
//                   <div className="absolute inset-0 flex items-center justify-center">
//                     <span className="text-2xl font-bold text-green-600">{patient.health_score}%</span>
//                   </div>
//                 </div>
//                 <p className="text-sm text-gray-600">Based on recent health metrics</p>
//                 <div className="mt-3 flex items-center justify-center gap-1">
//                   <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
//                   <span className="text-xs text-green-600 font-medium">Excellent condition</span>
//                 </div>
//               </div>
//             </Card>

//             {/* Quick Actions */}
//             <Card className="p-6">
//               <h3 className="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h3>
//               <div className="space-y-3">
//                 <Button className="w-full bg-red-600 hover:bg-red-700" disabled>
//                   <AlertCircle className="w-4 h-4 mr-2" />
//                   Emergency Alert (Coming Soon)
//                 </Button>
//                 <Button className="w-full" variant="outline" disabled>
//                   <Calendar className="w-4 h-4 mr-2" />
//                   Schedule Appointment (Coming Soon)
//                 </Button>
//                 <Button className="w-full" variant="outline" disabled>
//                   <Heart className="w-4 h-4 mr-2" />
//                   Contact Bridge Donors (Coming Soon)
//                 </Button>
//                 <Button className="w-full" variant="outline" disabled>
//                   <Clock className="w-4 h-4 mr-2" />
//                   View Health History (Coming Soon)
//                 </Button>
//               </div>
//             </Card>

//             {/* Care Team */}
//             <Card className="p-6">
//               <h3 className="text-lg font-semibold text-gray-900 mb-4">Care Team</h3>
//               <div className="space-y-3">
//                 <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
//                   <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
//                     <Stethoscope className="w-5 h-5 text-blue-600" />
//                   </div>
//                   <div>
//                     <div className="font-medium text-sm">Dr. Sharma</div>
//                     <div className="text-xs text-gray-500">Hematologist</div>
//                   </div>
//                 </div>
//                 <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
//                   <div className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
//                     <Heart className="w-5 h-5 text-green-600" />
//                   </div>
//                   <div>
//                     <div className="font-medium text-sm">Nurse Priya</div>
//                     <div className="text-xs text-gray-500">Care Coordinator</div>
//                   </div>
//                 </div>
//                 <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
//                   <div className="w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center">
//                     <Users className="w-5 h-5 text-purple-600" />
//                   </div>
//                   <div>
//                     <div className="font-medium text-sm">Support Team</div>
//                     <div className="text-xs text-gray-500">24/7 Available</div>
//                   </div>
//                 </div>
//               </div>
//             </Card>

//             {/* Treatment Progress */}
//             <Card className="p-6 bg-gradient-to-br from-indigo-50 to-purple-50 border-indigo-200">
//               <h3 className="text-lg font-semibold text-indigo-900 mb-4">Treatment Progress</h3>
//               <div className="space-y-3">
//                 <div className="flex justify-between text-sm">
//                   <span className="text-indigo-700">This Month's Goal</span>
//                   <span className="text-indigo-600 font-medium">90%</span>
//                 </div>
//                 <div className="w-full bg-indigo-200 rounded-full h-3">
//                   <div className="bg-indigo-600 h-3 rounded-full animate-pulse" style={{ width: '90%' }}></div>
//                 </div>
//                 <p className="text-xs text-indigo-700">Excellent adherence to treatment plan!</p>
//               </div>
//             </Card>
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default PatientPortal;





// frontend/src/pages/PatientPortal.jsx

import React, { useState, useEffect } from 'react';
import { Card } from '../components/ui/card';
import { Badge } from '../components/ui/badge';
import { Button } from '../components/ui/button';
import { Calendar, Heart, Activity, Users, Clock, AlertCircle, CheckCircle, Stethoscope, Zap } from 'lucide-react';
import { patientAPI } from '../lib/api';
import LoadingSpinner from '../components/common/LoadingSpinner';

const PatientPortal = () => {
  const [patientData, setPatientData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        const response = await patientAPI.getDashboard();
        setPatientData(response.data);
      } catch (err) {
        setError("Could not fetch your dashboard data. Please try logging in again.");
        console.error("Failed to fetch patient data:", err);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="flex flex-col items-center gap-4">
          <LoadingSpinner size="xl" />
          <p className="text-lg text-gray-600">Loading Your Health Portal...</p>
        </div>
      </div>
    );
  }

  if (error || !patientData) {
    return (
      <div className="min-h-screen flex items-center justify-center text-red-600 text-lg p-4 text-center">
        {error || "An error occurred while loading your data."}
      </div>
    );
  }

  const patient = patientData; // Assign for easy compatibility with existing JSX

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-6 py-8">
        {/* Header Section */}
        <div className="bg-gradient-to-r from-green-600 to-green-700 text-white p-8 rounded-2xl mb-8 relative overflow-hidden">
          <div className="absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -mr-16 -mt-16"></div>
          <div className="absolute bottom-0 left-0 w-24 h-24 bg-white/10 rounded-full -ml-12 -mb-12"></div>
          
          <div className="flex flex-col md:flex-row items-center justify-between relative z-10 gap-4">
            <div>
              <h1 className="text-3xl font-bold mb-2">Hello, {patient.name}! 💚</h1>
              <p className="text-green-100 text-lg">Your health journey is our priority</p>
              <div className="flex flex-wrap items-center gap-4 mt-4">
                <Badge className="bg-white/20 text-white border-white/30">Bridge Status: {patient.bridge_status}</Badge>
                <Badge className="bg-white/20 text-white border-white/30">Health Score: {patient.health_score}%</Badge>
                <Badge className="bg-white/20 text-white border-white/30">{patient.blood_group}</Badge>
              </div>
            </div>
            <div className="text-center flex-shrink-0">
              <div className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center mb-2">
                <Users className="w-10 h-10 text-white" />
              </div>
              <div className="text-2xl font-bold">{patient.connected_donors}</div>
              <div className="text-sm text-green-100">Connected Donors</div>
            </div>
          </div>
        </div>

        {/* Main Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content Column */}
          <div className="lg:col-span-2 space-y-8">
            {/* Health Timeline */}
            <Card className="p-6">
              <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center gap-2"><Activity className="w-6 h-6 text-green-600" />Health Timeline</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="p-6 bg-gradient-to-br from-red-50 to-red-100 border border-red-200 rounded-lg">
                  <div className="flex items-center gap-4 mb-4">
                    <div className="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center flex-shrink-0"><Calendar className="w-6 h-6 text-red-600" /></div>
                    <div><h3 className="font-semibold text-red-800">Next Transfusion</h3><p className="text-red-600">Countdown</p></div>
                  </div>
                  <div className="text-center"><div className="text-4xl font-bold text-red-700 mb-2">{patient.next_transfusion}</div><div className="text-red-600">Until next session</div></div>
                </div>
                <div className="p-6 bg-gradient-to-br from-green-50 to-green-100 border border-green-200 rounded-lg">
                  <div className="flex items-center gap-4 mb-4">
                    <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0"><CheckCircle className="w-6 h-6 text-green-600" /></div>
                    <div><h3 className="font-semibold text-green-800">Last Transfusion</h3><p className="text-green-600">Completed</p></div>
                  </div>
                  <div className="text-center"><div className="text-2xl font-bold text-green-700 mb-2">{patient.last_transfusion}</div><div className="text-green-600">Successfully completed</div></div>
                </div>
              </div>
            </Card>

            {/* Upcoming Appointments */}
            <Card className="p-6">
              <h3 className="text-xl font-semibold text-gray-900 mb-6 flex items-center gap-2"><Calendar className="w-5 h-5 text-purple-600" />Upcoming Appointments</h3>
              <div className="space-y-4">
                {patient.upcoming_appointments.map((appointment, index) => (
                  <div key={index} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                    <div className="flex items-center gap-4">
                      <div className="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center flex-shrink-0"><Calendar className="w-6 h-6 text-purple-600" /></div>
                      <div>
                        <div className="font-semibold text-gray-900">{appointment.type}</div>
                        <div className="text-gray-600">with {appointment.doctor}</div>
                        <div className="text-sm text-gray-500">{appointment.date}</div>
                      </div>
                    </div>
                    <Button variant="outline" size="sm" disabled>Reschedule (Coming Soon)</Button>
                  </div>
                ))}
              </div>
            </Card>
          </div>

          {/* Sidebar Column */}
          <div className="space-y-6">
            <Card className="p-6">
              <div className="flex items-center gap-2 mb-4"><Activity className="w-5 h-5 text-gray-600" /><h3 className="text-lg font-semibold text-gray-900">Health Score</h3></div>
              <div className="text-center">
                <div className="w-24 h-24 mx-auto mb-4 relative">
                  <svg className="w-24 h-24 transform -rotate-90" viewBox="0 0 36 36"><path className="text-gray-200" stroke="currentColor" strokeWidth="3" fill="transparent" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" /><path className="text-green-500" stroke="currentColor" strokeWidth="3" strokeDasharray={`${patient.health_score}, 100`} fill="transparent" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" /></svg>
                  <div className="absolute inset-0 flex items-center justify-center"><span className="text-2xl font-bold text-green-600">{patient.health_score}%</span></div>
                </div>
                <p className="text-sm text-gray-600">Based on recent health metrics</p>
              </div>
            </Card>

            <Card className="p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h3>
              <div className="space-y-3">
                <Button className="w-full bg-red-600 hover:bg-red-700" disabled><AlertCircle className="w-4 h-4 mr-2" />Emergency Alert (Coming Soon)</Button>
                <Button className="w-full" variant="outline" disabled><Calendar className="w-4 h-4 mr-2" />Schedule Appointment (Coming Soon)</Button>
                <Button className="w-full" variant="outline" disabled><Heart className="w-4 h-4 mr-2" />Contact Bridge Donors (Coming Soon)</Button>
              </div>
            </Card>

            <Card className="p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Your Care Team</h3>
              <div className="space-y-3">
                <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
                  <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0"><Stethoscope className="w-5 h-5 text-blue-600" /></div>
                  <div><div className="font-medium text-sm">Dr. Sharma</div><div className="text-xs text-gray-500">Hematologist</div></div>
                </div>
                <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
                  <div className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0"><Heart className="w-5 h-5 text-green-600" /></div>
                  <div><div className="font-medium text-sm">Nurse Priya</div><div className="text-xs text-gray-500">Care Coordinator</div></div>
                </div>
              </div>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PatientPortal;

```

`frontend/tailwind.config.js`

```javascript
/** @type {import('tailwindcss').Config} */
module.exports = {
    darkMode: ["class"],
    content: [
    "./src/**/*.{js,jsx,ts,tsx}",
    "./public/index.html"
  ],
  theme: {
  	extend: {
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
};

```

`ml_services/.env`

```
# ml_services/.env

# This should be the same database URL used in your backend/.env file.
DATABASE_URL="postgresql://postgres.fapoilusnezdvfmbbxzr:RP6eThZoJhsCrxcH@aws-1-ap-south-1.pooler.supabase.com:6543/postgres"
GEMINI_API_KEY="AIzaSyCn1xTJRYjOH_Gl3hg5sOW0P9PUX2Ug76M"

```

`ml_services/main.py`

```python
# ml_services/main.py
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Optional
from datetime import datetime
from sentence_transformers import SentenceTransformer, util
import os
import psycopg2
from dotenv import load_dotenv

load_dotenv()

# --- Configuration ---
os.environ['SENTENCE_TRANSFORMERS_HOME'] = './.cache'

print("Loading sentence-transformer model...")
MODEL_NAME = 'all-MiniLM-L6-v2'
model = SentenceTransformer(MODEL_NAME)
print("Model loaded successfully.")

DATABASE_URL = os.getenv('DATABASE_URL')
conn = None
try:
    print("Connecting to the database for RAG...")
    conn = psycopg2.connect(DATABASE_URL)
    print("Database connection successful.")
except psycopg2.OperationalError as e:
    print(f"FATAL: Could not connect to the database: {e}")
    conn = None

knowledge_cache = []

# --- Pydantic Models ---
class DonorScoreRequest(BaseModel):
    donor_id: str
    last_donation_date: Optional[str] = None
    streak_count: int = 0
    notifications_received: int = 0
    donations_confirmed: int = 0

class DonorScoreResponse(BaseModel):
    donor_id: str
    availability_score: float
    reliability_score: float
    final_score: float

# ✅ NEW: Models for the RAG endpoint
class RagRequest(BaseModel):
    query: str

class RagResponse(BaseModel):
    answer: str
    source_found: bool

# --- FastAPI App ---
app = FastAPI(title="BloodBridge AI Engine (Scoring & RAG)")

# --- Helper Functions ---
def calculate_availability_score(last_donation_date: Optional[str]) -> float:
    if not last_donation_date:
        return 100.0
    try:
        last_date = datetime.fromisoformat(last_donation_date.replace('Z', '+00:00'))
        days_since = (datetime.now(last_date.tzinfo) - last_date).days
        if days_since >= 90:
            return 100.0
        if days_since < 56:
            return 0.0
        return round(((days_since - 56) / (90 - 56)) * 100, 2)
    except (ValueError, TypeError):
        return 100.0

def calculate_reliability_score(streak: int, notifications: int, confirmations: int) -> float:
    streak_score = min(streak * 10, 40)
    if notifications == 0:
        response_score = 40.0
    else:
        response_rate = confirmations / notifications
        response_score = response_rate * 60
    return min(streak_score + response_score, 100.0)

# ✅ NEW: Function to load and vectorize the knowledge base
def load_knowledge_base():
    global knowledge_cache
    if not conn:
        print("WARNING: Database connection not available. Knowledge base will be empty.")
        return

    print("Loading and vectorizing knowledge base from database...")
    try:
        with conn.cursor() as cur:
            cur.execute("SELECT id, content FROM knowledge_base;")
            rows = cur.fetchall()
            contents = [row[1] for row in rows]
            embeddings = model.encode(contents, convert_to_tensor=True)
            knowledge_cache = [
                {'id': rows[i][0], 'content': contents[i], 'embedding': embeddings[i]}
                for i in range(len(rows))
            ]
            print(f"Loaded and vectorized {len(knowledge_cache)} documents into memory.")
    except Exception as e:
        print(f"Error loading knowledge base: {e}")
        knowledge_cache = []

# ✅ NEW: FastAPI startup event to load the data
@app.on_event("startup")
async def startup_event():
    load_knowledge_base()

# --- API Endpoints ---
@app.get("/health", summary="Health Check")
async def health_check():
    return {"status": "healthy", "knowledge_base_items": len(knowledge_cache)}

@app.post("/score-donor", response_model=DonorScoreResponse, summary="Scores a single donor")
async def score_donor(request: DonorScoreRequest):
    availability = calculate_availability_score(request.last_donation_date)
    reliability = calculate_reliability_score(
        request.streak_count, request.notifications_received, request.donations_confirmed
    )
    final_score = (availability * 0.6) + (reliability * 0.4)
    if availability == 0:
        final_score = 0

    return DonorScoreResponse(
        donor_id=request.donor_id,
        availability_score=availability,
        reliability_score=reliability,
        final_score=round(final_score, 2)
    )

# ✅ NEW: The fully implemented RAG endpoint
@app.post("/generate-faq-answer", response_model=RagResponse, summary="Answers a question using RAG")
async def generate_faq_answer(request: RagRequest):
    if not knowledge_cache:
        raise HTTPException(status_code=503, detail="Knowledge base is not loaded.")

    query_embedding = model.encode(request.query, convert_to_tensor=True)

    best_match = None
    highest_similarity = -1.0

    for doc in knowledge_cache:
        similarity = util.pytorch_cos_sim(query_embedding, doc['embedding'])[0][0].item()
        if similarity > highest_similarity:
            highest_similarity = similarity
            best_match = doc

    SIMILARITY_THRESHOLD = 0.5
    if best_match and highest_similarity > SIMILARITY_THRESHOLD:
        answer = best_match['content'].split('A: ')[-1]
        return RagResponse(answer=answer, source_found=True)
    else:
        default_answer = (
            "Thank you for your question. I'm not sure about that. "
            "An NGO volunteer will get back to you shortly."
        )
        return RagResponse(answer=default_answer, source_found=False)

```

`ml_services/requirements.txt`

```
# ml_services/requirements.txt
fastapi==0.111.0
uvicorn[standard]==0.29.0
pydantic==2.7.1
sentence-transformers==2.7.0
scikit-learn==1.3.0
psycopg2-binary==2.9.9
torch==2.3.1
numpy==1.26.4
python-dotenv

```

`testcases.txt`

```
--> Scenario 1: Donor Registration & Feature Test

        I want to be a blood donor
        Register: Test Donor, Hyderabad, B+
        my status
        leaderboard
        pause my notifications for 2 weeks


--> Scenario 2: Full Emergency & Confirmation Flow

        Emergency!! We need B+ blood urgently at Apollo Hospital, Hyderabad for a patient named Priya.


--> Scenario 3: FAQ and Admin Escalation Test   

        How often can I donate blood?
        I had a bad reaction and a problem last time I donateds

        

## Test Suite 1: AI-Powered Message Routing & User Onboarding 


REG-01: Happy Path: New Donor Registration (Interactive) 


REG-02: Happy Path: New Donor Registration (One-Shot) 


REG-03: Edge Case: Re-registration Attempt 


REG-04: Edge Case: Patient Onboarding 


REG-05: Failure Case: Invalid Blood Group 

## Test Suite 2: Emergency Blood Request System 


EMG-01: Happy Path: Request, Accept & Confirm 


EMG-02: Decline & Rollover Path 


EMG-03: Failure Case: Invalid Short Code 


EMG-04: Failure Case: Invalid OTP 

## Test Suite 3: Blood Bridge Coordination 


BRG-01: Verify Bridge Priority in Emergencies 


BRG-02: Join a Bridge via Chat 


BRG-03: Attempt to Re-join a Bridge 

## Test Suite 4: Donor Engagement & Preferences 



ENG-01: Personalized Inactivity Nudge 


ENG-02: Leaderboard Broadcast 


ENG-03: Snooze Notifications 


PREF-01: Snooze Notifications (Happy Path) 


PREF-02: Verify Snooze is Respected 


PREF-03: Do Not Disturb (DND) / Unsubscribe 


PREF-04: Verify DND is Respected 


PREF-05: Re-subscribe / Re-register 

## Test Suite 5: Automated FAQ & Safety Handling 


FAQ-01: FAQ with Live Data 


FAQ-02: Sensitive Keyword Escalation 

```

