
-- Create users table
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    phone VARCHAR(15) NOT NULL UNIQUE,
    name VARCHAR(255) NOT NULL,
    password VARCHAR(255), -- For admin login
    blood_group VARCHAR(5), -- e.g., 'A+', 'O-', 'AB+'
    city VARCHAR(100),
    pincode VARCHAR(10),
    user_type VARCHAR(50) NOT NULL CHECK (user_type IN ('donor', 'patient', 'admin')),
    role VARCHAR(50) DEFAULT 'Emergency Donor',
    registration_status VARCHAR(50) DEFAULT 'completed' CHECK (registration_status IN ('pending', 'completed')),
    availability_status VARCHAR(50) DEFAULT 'available' CHECK (availability_status IN ('available', 'unavailable', 'on_hold')),
    dnd_status BOOLEAN DEFAULT false,
    snooze_until TIMESTAMPTZ,
    cooldown_until TIMESTAMPTZ,
    last_donation DATE,
    donations_till_date INTEGER DEFAULT 0 CHECK (donations_till_date >= 0),
    gamification_points INTEGER DEFAULT 0 CHECK (gamification_points >= 0),
    streak_count INTEGER DEFAULT 0 CHECK (streak_count >= 0),
    last_ml_score REAL,
    score_cached_at TIMESTAMPTZ,
    last_request_short_code VARCHAR(4),
    quiet_hours_start TIME,
    quiet_hours_end TIME,
    inactive_trigger_comment TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT valid_blood_group CHECK (blood_group IN ('A+', 'A-', 'B+', 'B-', 'O+', 'O-', 'AB+', 'AB-', 'Unknown'))
);

-- Create patients table (standalone, no user_id foreign key)
CREATE TABLE patients (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    phone VARCHAR(15) NOT NULL UNIQUE,
    blood_group VARCHAR(5) NOT NULL,
    city VARCHAR(100) NOT NULL,
    pincode VARCHAR(10),
    condition TEXT, -- e.g., 'thalassemia'
    status VARCHAR(50) DEFAULT 'pending' CHECK (status IN ('pending', 'pending_verification', 'bridged', 'active')),
    last_transfusion_date DATE,
    frequency_in_days INTEGER CHECK (frequency_in_days > 0),
    quantity_required INTEGER DEFAULT 1 CHECK (quantity_required > 0),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT valid_blood_group CHECK (blood_group IN ('A+', 'A-', 'B+', 'B-', 'O+', 'O-', 'AB+', 'AB-'))
);

-- Create emergency_requests table
CREATE TABLE emergency_requests (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    patient_name VARCHAR(255) NOT NULL,
    blood_group VARCHAR(5) NOT NULL,
    units_needed INTEGER NOT NULL CHECK (units_needed > 0),
    hospital_name VARCHAR(255) NOT NULL,
    hospital_contact VARCHAR(15),
    city VARCHAR(100) NOT NULL,
    urgency_level VARCHAR(50) DEFAULT 'high' CHECK (urgency_level IN ('critical', 'high', 'medium')),
    status VARCHAR(50) DEFAULT 'active' CHECK (status IN ('active', 'fulfilled', 'closed', 'escalated')),
    created_by UUID REFERENCES users(id) ON DELETE SET NULL,
    requested_by_phone VARCHAR(15) NOT NULL,
    short_code VARCHAR(4) UNIQUE,
    units_confirmed INTEGER DEFAULT 0 CHECK (units_confirmed >= 0),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    fulfilled_at TIMESTAMPTZ,
    CONSTRAINT valid_blood_group CHECK (blood_group IN ('A+', 'A-', 'B+', 'B-', 'O+', 'O-', 'AB+', 'AB-'))
);

-- Create blood_bridges table
CREATE TABLE blood_bridges (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    patient_id UUID REFERENCES patients(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    blood_group VARCHAR(5) NOT NULL,
    city VARCHAR(100) NOT NULL,
    rotation_position INTEGER DEFAULT 1 CHECK (rotation_position >= 1),
    active BOOLEAN DEFAULT true,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT valid_blood_group CHECK (blood_group IN ('A+', 'A-', 'B+', 'B-', 'O+', 'O-', 'AB+', 'AB-'))
);

-- Create bridge_members table
CREATE TABLE bridge_members (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    bridge_id UUID REFERENCES blood_bridges(id) ON DELETE CASCADE,
    donor_id UUID REFERENCES users(id) ON DELETE CASCADE,
    position INTEGER NOT NULL CHECK (position >= 0),
    status VARCHAR(50) NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'skipped')),
    joined_at TIMESTAMPTZ DEFAULT NOW(),
    rotation_order INTEGER,
    UNIQUE(bridge_id, donor_id)
);

-- Create donor_responses table
CREATE TABLE donor_responses (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    donor_id UUID REFERENCES users(id) ON DELETE CASCADE,
    request_id UUID REFERENCES emergency_requests(id) ON DELETE CASCADE,
    response VARCHAR(50) NOT NULL CHECK (response IN ('pending', 'accepted', 'declined')),
    otp VARCHAR(6),
    otp_expires_at TIMESTAMPTZ,
    confirmed_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(donor_id, request_id)
);

-- Create inbox_messages table
CREATE TABLE inbox_messages (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_phone VARCHAR(15) NOT NULL,
    user_message TEXT NOT NULL,
    reason VARCHAR(255) NOT NULL,
    status VARCHAR(50) DEFAULT 'pending' CHECK (status IN ('pending', 'resolved')),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    resolved_at TIMESTAMPTZ
);

-- Create processed_messages table
CREATE TABLE processed_messages (
    message_id VARCHAR(255) PRIMARY KEY,
    processed_at TIMESTAMPTZ DEFAULT NOW(),
    payload JSONB
);

-- Create achievements table
CREATE TABLE achievements (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    badge_type VARCHAR(255) NOT NULL,
    points_awarded INTEGER DEFAULT 0 CHECK (points_awarded >= 0),
    earned_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create knowledge_base table
CREATE TABLE knowledge_base (
    id SERIAL PRIMARY KEY,
    content TEXT NOT NULL,
    category VARCHAR(255),
    embedding VECTOR -- Requires pgvector extension
);

-- Create schema_migrations table
CREATE TABLE schema_migrations (
    version VARCHAR(255) PRIMARY KEY,
    applied_at TIMESTAMPTZ DEFAULT NOW(),
    description TEXT
);

-- Create conversations table
CREATE TABLE conversations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    message TEXT NOT NULL,
    response TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create optimized donor search function
CREATE OR REPLACE FUNCTION find_donors_for_bridge(
    p_city VARCHAR,
    p_blood_group VARCHAR,
    p_pincode VARCHAR,
    p_limit INTEGER
)
RETURNS TABLE (donor_id UUID, final_score FLOAT) AS $$
BEGIN
    RETURN QUERY
    SELECT
        u.id AS donor_id,
        COALESCE(u.last_ml_score, 0.0) AS final_score
    FROM users u
    WHERE
        u.user_type = 'donor'
        AND u.city ILIKE p_city
        AND u.blood_group = p_blood_group
        AND u.availability_status = 'available'
        AND u.dnd_status = false
        AND (u.snooze_until IS NULL OR u.snooze_until < NOW())
        AND u.registration_status = 'completed'
        AND u.id NOT IN (
            SELECT bm.donor_id 
            FROM bridge_members bm 
            JOIN blood_bridges bb ON bm.bridge_id = bb.id 
            WHERE bb.active = true
        )
    ORDER BY
        COALESCE(u.last_ml_score, 0.0) DESC,
        u.created_at ASC
    LIMIT p_limit;
END;
$$ LANGUAGE plpgsql;

-- Create indexes for performance
CREATE INDEX idx_users_phone ON users(phone);
CREATE INDEX idx_users_blood_group ON users(blood_group);
CREATE INDEX idx_users_city ON users(city);
CREATE INDEX idx_users_user_type ON users(user_type);
CREATE INDEX idx_patients_phone ON patients(phone);
CREATE INDEX idx_emergency_requests_short_code ON emergency_requests(short_code);
CREATE INDEX idx_bridge_members_bridge_id ON bridge_members(bridge_id);
CREATE INDEX idx_donor_responses_donor_id ON donor_responses(donor_id);
CREATE INDEX idx_knowledge_base_category ON knowledge_base(category);

-- Enable Row-Level Security (RLS)
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE patients ENABLE ROW LEVEL SECURITY;
ALTER TABLE emergency_requests ENABLE ROW LEVEL SECURITY;
ALTER TABLE blood_bridges ENABLE ROW LEVEL SECURITY;
ALTER TABLE bridge_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE donor_responses ENABLE ROW LEVEL SECURITY;
ALTER TABLE inbox_messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE processed_messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE achievements ENABLE ROW LEVEL SECURITY;
ALTER TABLE knowledge_base ENABLE ROW LEVEL SECURITY;
ALTER TABLE schema_migrations ENABLE ROW LEVEL SECURITY;
ALTER TABLE conversations ENABLE ROW LEVEL SECURITY;

-- Insert test data
INSERT INTO users (
    name, phone, password, blood_group, city, pincode, user_type, 
    role, registration_status, availability_status
) VALUES (
    'Admin User', '+918000000000', 'admin123', NULL, NULL, NULL, 
    'admin', 'admin', 'completed', 'available'
), (
    'Test Donor', '+911234567890', NULL, 'O+', 'Hyderabad', '500001', 
    'donor', 'Emergency Donor', 'completed', 'available'
) ON CONFLICT (phone) DO NOTHING;

INSERT INTO patients (
    name, phone, blood_group, city, pincode, status
) VALUES (
    'John Doe', '+919876543210', 'A+', 'Delhi', '110001', 'pending_verification'
) ON CONFLICT (phone) DO NOTHING;

-- Insert initial schema migration
INSERT INTO schema_migrations (version, description)
VALUES ('2025082901', 'Initial schema for BloodBridge AI') ON CONFLICT (version) DO NOTHING;

-- Enable pgvector extension for knowledge_base.embedding
CREATE EXTENSION IF NOT EXISTS vector;